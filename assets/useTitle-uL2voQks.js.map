{"version":3,"mappings":"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","names":["getAccount","id","accounts","store","local","getJSON","find","a","info","getAccountByAccessToken","accessToken","getAccountByInstance","instance","instanceURL","standaloneMQ","window","matchMedia","getCurrentAccountID","session","get","matches","setCurrentAccountID","set","getCurrentAccount","__IGNORE_GET_ACCOUNT_ERROR__","currentAccount","account","getCurrentAccountNS","saveAccount","acc","updateAccount","accountInfo","displayName","currentInstance","getCurrentInstance","instances","e","location","getInstanceConfiguration","configuration","maxMediaAttachments","maxTootChars","pleroma","pollLimits","statuses","polls","maxCharactersPerOption","maxExpiration","getCurrentInstanceConfiguration","key","localStorage","getItem","console","JSON","value","setJSON","warn","sessionStorage","setItem","data","del","DEFAULT_INSTANCE","apis","accountApis","__ACCOUNT_APIS__","currentAccountApi","initClient","test","replace","toLowerCase","url","client","masto","createRestAPIClient","timeout","initInstance","uri","streamingApi","urls","domain","streaming","streamClient","createStreamingAPIClient","implementation","initAccount","vapidKey","mastoAccount","initPreferences","preferences","accountID","authenticated","_b","_c","instanceAccount","_e","isMastodonLinkMaybe","pathname","hash","URL","_moize","moize","mem","fn","opts","maxSize","isDeepEqual","pmem","isPromise","rateLimit","interval","queue","isRunning","executeNext","length","shift","setTimeout","args","callFn","apply","push","throttle","pThrottle","limit","denylistDomains","failedUnfurls","_unfurlMastodonLink","snapStates","snapshot","states","RegExp","unfurledLinks","Promise","resolve","debug","remoteInstanceFetch","theURL","urlAfterHash","urlObj","hostname","statusRegex","path","statusMatch","masto2","status","mastoSearchFetch","q","type","results","then","_a","theStatuses","handleFulfill","result","selfURL","instance2","saveStatus","reject","handleCatch","finalPromise","unfurlMastodonLink","proxy","appVersion","prevLocation","currentLocation","statusThreadNumber","home","homeNew","homeLast","homeLastFetchTime","notifications","notificationsLast","notificationsNew","notificationsShowNew","notificationsLastFetchTime","reloadStatusPage","reloadGenericAccounts","counter","spoilers","spoilersMedia","scrollPositions","statusQuotes","statusFollowedTags","statusReply","routeNotification","showCompose","showSettings","showAccount","showAccounts","showDrafts","showMediaModal","showShortcutsSettings","showKeyboardShortcutsHelp","showGenericAccounts","showMediaAlt","showEmbedModal","showReportModal","shortcuts","settings","autoRefresh","shortcutsViewMode","shortcutsColumnsMode","boostsCarousel","contentTranslation","contentTranslationTargetLanguage","contentTranslationHideLanguages","contentTranslationAutoInline","shortcutSettingsCloudImportExport","mediaAltGenerator","composerGIFPicker","cloakMode","states$1","initStates","subscribeKey","v","subscribe","changes","prevValue","join","statusKey","getStatus","statusID","skipThreading","skipUnfurling","override","oldStatus","deepEqual","_pinned","srKey","sKey","threadifyStatus","unfurlStatus","_threadifyStatus","propInstance","api","traverse","index","fetchIndex","inReplyToAccountId","inReplyToId","prevStatus","r","fetchStatus","fauxDiv","content","document","i","splice","Loader","abrupt","hidden","props","_jsx","class","children","supportsIntlSegmenter","shouldPolyfill","queueMicrotask","__vitePreload","n","catch","IntlSegmenterSuspense","Suspense","fallback","polyfillLoaded","setPolyfillLoaded","useState","useEffect","PHANPY_CLIENT_NAME","CLIENT_NAME","import","useTitle","title","setTitle","hasPaths","Array","isArray","paths","matched","some","p","matchPath","unsub"],"ignoreList":[],"sources":["../../src/utils/store-utils.js","../../src/utils/store.js","../../src/utils/api.js","../../src/utils/isMastodonLinkMaybe.jsx","../../src/utils/mem.js","../../src/utils/pmem.js","../../src/utils/ratelimit.js","../../src/utils/unfurl-link.jsx","../../src/utils/states.js","../../src/components/loader.jsx","../../src/components/intl-segmenter-suspense.jsx","../../src/utils/useTitle.js"],"sourcesContent":["import store from './store';\n\nexport function getAccount(id) {\n  const accounts = store.local.getJSON('accounts') || [];\n  if (!id) return accounts[0];\n  return accounts.find((a) => a.info.id === id) || accounts[0];\n}\n\nexport function getAccountByAccessToken(accessToken) {\n  const accounts = store.local.getJSON('accounts') || [];\n  return accounts.find((a) => a.accessToken === accessToken);\n}\n\nexport function getAccountByInstance(instance) {\n  const accounts = store.local.getJSON('accounts') || [];\n  return accounts.find((a) => a.instanceURL === instance);\n}\n\nconst standaloneMQ = window.matchMedia('(display-mode: standalone)');\n\nexport function getCurrentAccountID() {\n  try {\n    const id = store.session.get('currentAccount');\n    if (id) return id;\n  } catch (e) {}\n  if (standaloneMQ.matches) {\n    try {\n      const id = store.local.get('currentAccount');\n      if (id) return id;\n    } catch (e) {}\n  }\n  return null;\n}\n\nexport function setCurrentAccountID(id) {\n  try {\n    store.session.set('currentAccount', id);\n  } catch (e) {}\n  if (standaloneMQ.matches) {\n    try {\n      store.local.set('currentAccount', id);\n    } catch (e) {}\n  }\n}\n\nexport function getCurrentAccount() {\n  if (!window.__IGNORE_GET_ACCOUNT_ERROR__) {\n    // Track down getCurrentAccount() calls before account-based states are initialized\n    console.error('getCurrentAccount() called before states are initialized');\n    if (import.meta.env.DEV) console.trace();\n  }\n  const currentAccount = getCurrentAccountID();\n  const account = getAccount(currentAccount);\n  return account;\n}\n\nexport function getCurrentAccountNS() {\n  const account = getCurrentAccount();\n  const {\n    instanceURL,\n    info: { id },\n  } = account;\n  return `${id}@${instanceURL}`;\n}\n\nexport function saveAccount(account) {\n  const accounts = store.local.getJSON('accounts') || [];\n  const acc = accounts.find((a) => a.info.id === account.info.id);\n  if (acc) {\n    acc.info = account.info;\n    acc.instanceURL = account.instanceURL;\n    acc.accessToken = account.accessToken;\n    acc.vapidKey = account.vapidKey;\n  } else {\n    accounts.push(account);\n  }\n  store.local.setJSON('accounts', accounts);\n  setCurrentAccountID(account.info.id);\n}\n\nexport function updateAccount(accountInfo) {\n  // Only update if displayName or avatar or avatar_static is different\n  const accounts = store.local.getJSON('accounts') || [];\n  const acc = accounts.find((a) => a.info.id === accountInfo.id);\n  if (acc) {\n    if (\n      acc.info.displayName !== accountInfo.displayName ||\n      acc.info.avatar !== accountInfo.avatar ||\n      acc.info.avatar_static !== accountInfo.avatar_static\n    ) {\n      acc.info = {\n        ...acc.info,\n        ...accountInfo,\n      };\n      store.local.setJSON('accounts', accounts);\n    }\n  }\n}\n\nlet currentInstance = null;\nexport function getCurrentInstance() {\n  if (currentInstance) return currentInstance;\n  try {\n    const account = getCurrentAccount();\n    const instances = store.local.getJSON('instances');\n    const instance = account.instanceURL.toLowerCase();\n    return (currentInstance = instances[instance]);\n  } catch (e) {\n    console.error(e);\n    alert(`Failed to load instance configuration. Please try again.\\n\\n${e}`);\n    // Temporary fix for corrupted data\n    store.local.del('instances');\n    location.reload();\n    return {};\n  }\n}\n\n// Massage these instance configurations to match the Mastodon API\n// - Pleroma\nfunction getInstanceConfiguration(instance) {\n  const {\n    configuration,\n    maxMediaAttachments,\n    maxTootChars,\n    pleroma,\n    pollLimits,\n  } = instance;\n\n  const statuses = configuration?.statuses || {};\n  if (maxMediaAttachments) {\n    statuses.maxMediaAttachments ??= maxMediaAttachments;\n  }\n  if (maxTootChars) {\n    statuses.maxCharacters ??= maxTootChars;\n  }\n\n  const polls = configuration?.polls || {};\n  if (pollLimits) {\n    polls.maxCharactersPerOption ??= pollLimits.maxOptionChars;\n    polls.maxExpiration ??= pollLimits.maxExpiration;\n    polls.maxOptions ??= pollLimits.maxOptions;\n    polls.minExpiration ??= pollLimits.minExpiration;\n  }\n\n  return {\n    ...configuration,\n    statuses,\n    polls,\n  };\n}\n\nexport function getCurrentInstanceConfiguration() {\n  const instance = getCurrentInstance();\n  return getInstanceConfiguration(instance);\n}\n\nexport function isMediaFirstInstance() {\n  const instance = getCurrentInstance();\n  return /pixelfed/i.test(instance?.version);\n}\n","import { getCurrentAccountNS } from './store-utils';\n\nconst local = {\n  get: (key) => {\n    try {\n      return localStorage.getItem(key);\n    } catch (e) {\n      console.warn(e);\n      return null;\n    }\n  },\n  getJSON: (key) => {\n    try {\n      return JSON.parse(local.get(key));\n    } catch (e) {\n      console.warn(e);\n      return null;\n    }\n  },\n  set: (key, value) => {\n    try {\n      return localStorage.setItem(key, value);\n    } catch (e) {\n      console.warn(e);\n      return null;\n    }\n  },\n  setJSON: (key, value) => {\n    try {\n      return local.set(key, JSON.stringify(value));\n    } catch (e) {\n      console.warn(e);\n      return null;\n    }\n  },\n  del: (key) => {\n    try {\n      return localStorage.removeItem(key);\n    } catch (e) {\n      console.warn(e);\n      return null;\n    }\n  },\n};\n\nconst session = {\n  get: (key) => {\n    try {\n      return sessionStorage.getItem(key);\n    } catch (e) {\n      console.warn(e);\n      return null;\n    }\n  },\n  getJSON: (key) => {\n    try {\n      return JSON.parse(session.get(key));\n    } catch (e) {\n      console.warn(e);\n      return null;\n    }\n  },\n  set: (key, value) => {\n    try {\n      return sessionStorage.setItem(key, value);\n    } catch (e) {\n      console.warn(e);\n      return null;\n    }\n  },\n  setJSON: (key, value) => {\n    try {\n      return session.set(key, JSON.stringify(value));\n    } catch (e) {\n      console.warn(e);\n      return null;\n    }\n  },\n  del: (key) => {\n    try {\n      return sessionStorage.removeItem(key);\n    } catch (e) {\n      console.warn(e);\n      return null;\n    }\n  },\n};\n\n// Store with account namespace (id@domain.tld) <- uses id, not username\nconst account = {\n  get: (key) => {\n    try {\n      return local.getJSON(key)[getCurrentAccountNS()];\n    } catch (e) {\n      console.warn(e);\n      return null;\n    }\n  },\n  set: (key, value) => {\n    try {\n      const data = local.getJSON(key) || {};\n      data[getCurrentAccountNS()] = value;\n      return local.setJSON(key, data);\n    } catch (e) {\n      console.warn(e);\n      return null;\n    }\n  },\n  del: (key) => {\n    try {\n      const data = local.getJSON(key) || {};\n      delete data[getCurrentAccountNS()];\n      return local.setJSON(key, data);\n    } catch (e) {\n      console.warn(e);\n      return null;\n    }\n  },\n};\n\nexport default { local, session, account };\n","import { createRestAPIClient, createStreamingAPIClient } from 'masto';\n\nimport store from './store';\nimport {\n  getAccount,\n  getAccountByAccessToken,\n  getAccountByInstance,\n  getCurrentAccount,\n  saveAccount,\n  setCurrentAccountID,\n} from './store-utils';\n\n// Default *fallback* instance\nconst DEFAULT_INSTANCE = 'mastodon.social';\n\n// Per-instance masto instance\n// Useful when only one account is logged in\n// I'm not sure if I'll ever allow multiple logged-in accounts but oh well...\n// E.g. apis['mastodon.social']\nconst apis = {};\n\n// Per-account masto instance\n// Note: There can be many accounts per instance\n// Useful when multiple accounts are logged in or when certain actions require a specific account\n// Just in case if I need this one day.\n// E.g. accountApis['mastodon.social']['ACCESS_TOKEN']\nconst accountApis = {};\nwindow.__ACCOUNT_APIS__ = accountApis;\n\n// Current account masto instance\nlet currentAccountApi;\n\nexport function initClient({ instance, accessToken }) {\n  if (/^https?:\\/\\//.test(instance)) {\n    instance = instance\n      .replace(/^https?:\\/\\//, '')\n      .replace(/\\/+$/, '')\n      .toLowerCase();\n  }\n  const url = instance ? `https://${instance}` : `https://${DEFAULT_INSTANCE}`;\n\n  const masto = createRestAPIClient({\n    url,\n    accessToken, // Can be null\n    timeout: 30_000, // Unfortunatly this is global instead of per-request\n  });\n\n  const client = {\n    masto,\n    instance,\n    accessToken,\n  };\n  apis[instance] = client;\n  if (!accountApis[instance]) accountApis[instance] = {};\n  if (accessToken) accountApis[instance][accessToken] = client;\n\n  return client;\n}\n\n// Get the instance information\n// The config is needed for composing\nexport async function initInstance(client, instance) {\n  console.log('INIT INSTANCE', client, instance);\n  const { masto, accessToken } = client;\n  // Request v2, fallback to v1 if fail\n  let info;\n  try {\n    info = await masto.v2.instance.fetch();\n  } catch (e) {}\n  if (!info) {\n    try {\n      info = await masto.v1.instance.fetch();\n    } catch (e) {}\n  }\n  if (!info) return;\n  console.log(info);\n  const {\n    // v1\n    uri,\n    urls: { streamingApi } = {},\n    // v2\n    domain,\n    configuration: { urls: { streaming } = {} } = {},\n  } = info;\n  const instances = store.local.getJSON('instances') || {};\n  if (uri || domain) {\n    instances[\n      (domain || uri)\n        .replace(/^https?:\\/\\//, '')\n        .replace(/\\/+$/, '')\n        .toLowerCase()\n    ] = info;\n  }\n  if (instance) {\n    instances[instance.toLowerCase()] = info;\n  }\n  store.local.setJSON('instances', instances);\n  // This is a weird place to put this but here's updating the masto instance with the streaming API URL set in the configuration\n  // Reason: Streaming WebSocket URL may change, unlike the standard API REST URLs\n  const supportsWebSocket = 'WebSocket' in window;\n  if (supportsWebSocket && (streamingApi || streaming)) {\n    console.log('🎏 Streaming API URL:', streaming || streamingApi);\n    // masto.config.props.streamingApiUrl = streaming || streamingApi;\n    // Legacy masto.ws\n    const streamClient = createStreamingAPIClient({\n      streamingApiUrl: streaming || streamingApi,\n      accessToken,\n      implementation: WebSocket,\n    });\n    client.streaming = streamClient;\n    // masto.ws = streamClient;\n    console.log('🎏 Streaming API client:', client);\n  }\n}\n\n// Get the account information and store it\nexport async function initAccount(client, instance, accessToken, vapidKey) {\n  const { masto } = client;\n  const mastoAccount = await masto.v1.accounts.verifyCredentials();\n\n  console.log('CURRENTACCOUNT SET', mastoAccount.id);\n  setCurrentAccountID(mastoAccount.id);\n\n  saveAccount({\n    info: mastoAccount,\n    instanceURL: instance.toLowerCase(),\n    accessToken,\n    vapidKey,\n  });\n}\n\n// Get preferences\nexport async function initPreferences(client) {\n  try {\n    const { masto } = client;\n    const preferences = await masto.v1.preferences.fetch();\n    store.account.set('preferences', preferences);\n  } catch (e) {\n    // silently fail\n    console.error(e);\n  }\n}\n\n// Get the masto instance\n// If accountID is provided, get the masto instance for that account\nexport function api({ instance, accessToken, accountID, account } = {}) {\n  // Always lowercase and trim the instance\n  if (instance) {\n    instance = instance.toLowerCase().trim();\n  }\n\n  // If instance and accessToken are provided, get the masto instance for that account\n  if (instance && accessToken) {\n    const client =\n      accountApis[instance]?.[accessToken] ||\n      initClient({ instance, accessToken });\n    const { masto, streaming } = client;\n    return {\n      masto,\n      streaming,\n      client,\n      authenticated: true,\n      instance,\n    };\n  }\n\n  if (accessToken) {\n    // If only accessToken is provided, get the masto instance for that accessToken\n    console.log('X 1', accountApis);\n    for (const instance in accountApis) {\n      if (accountApis[instance][accessToken]) {\n        console.log('X 2', accountApis, instance, accessToken);\n        const client = accountApis[instance][accessToken];\n        const { masto, streaming } = client;\n        return {\n          masto,\n          streaming,\n          client,\n          authenticated: true,\n          instance,\n        };\n      } else {\n        console.log('X 3', accountApis, instance, accessToken);\n        const account = getAccountByAccessToken(accessToken);\n        if (account) {\n          const accessToken = account.accessToken;\n          const instance = account.instanceURL.toLowerCase().trim();\n          const client = initClient({ instance, accessToken });\n          const { masto, streaming } = client;\n          return {\n            masto,\n            streaming,\n            client,\n            authenticated: true,\n            instance,\n          };\n        } else {\n          throw new Error(`Access token not found`);\n        }\n      }\n    }\n  }\n\n  // If account is provided, get the masto instance for that account\n  if (account || accountID) {\n    account = account || getAccount(accountID);\n    if (account) {\n      const accessToken = account.accessToken;\n      const instance = account.instanceURL.toLowerCase().trim();\n      const client =\n        accountApis[instance]?.[accessToken] ||\n        initClient({ instance, accessToken });\n      const { masto, streaming } = client;\n      return {\n        masto,\n        streaming,\n        client,\n        authenticated: true,\n        instance,\n      };\n    } else {\n      throw new Error(`Account ${accountID} not found`);\n    }\n  }\n\n  const currentAccount = getCurrentAccount();\n\n  // If only instance is provided, get the masto instance for that instance\n  if (instance) {\n    if (currentAccountApi?.instance === instance) {\n      return {\n        masto: currentAccountApi.masto,\n        streaming: currentAccountApi.streaming,\n        client: currentAccountApi,\n        authenticated: true,\n        instance,\n      };\n    }\n\n    if (currentAccount?.instanceURL === instance) {\n      const { accessToken } = currentAccount;\n      currentAccountApi =\n        accountApis[instance]?.[accessToken] ||\n        initClient({ instance, accessToken });\n      return {\n        masto: currentAccountApi.masto,\n        streaming: currentAccountApi.streaming,\n        client: currentAccountApi,\n        authenticated: true,\n        instance,\n      };\n    }\n\n    const instanceAccount = getAccountByInstance(instance);\n    if (instanceAccount) {\n      const accessToken = instanceAccount.accessToken;\n      const client =\n        accountApis[instance]?.[accessToken] ||\n        initClient({ instance, accessToken });\n      const { masto, streaming } = client;\n      return {\n        masto,\n        streaming,\n        client,\n        authenticated: true,\n        instance,\n      };\n    }\n\n    const client = apis[instance] || initClient({ instance });\n    const { masto, streaming, accessToken } = client;\n    return {\n      masto,\n      streaming,\n      client,\n      authenticated: !!accessToken,\n      instance,\n    };\n  }\n\n  // If no instance is provided, get the masto instance for the current account\n  if (currentAccountApi) {\n    return {\n      masto: currentAccountApi.masto,\n      streaming: currentAccountApi.streaming,\n      client: currentAccountApi,\n      authenticated: true,\n      instance: currentAccountApi.instance,\n    };\n  }\n  if (currentAccount) {\n    const { accessToken, instanceURL: instance } = currentAccount;\n    currentAccountApi =\n      accountApis[instance]?.[accessToken] ||\n      initClient({ instance, accessToken });\n    return {\n      masto: currentAccountApi.masto,\n      streaming: currentAccountApi.streaming,\n      client: currentAccountApi,\n      authenticated: true,\n      instance,\n    };\n  }\n\n  // If no instance is provided and no account is logged in, get the masto instance for DEFAULT_INSTANCE\n  const client =\n    apis[DEFAULT_INSTANCE] || initClient({ instance: DEFAULT_INSTANCE });\n  const { masto, streaming } = client;\n  return {\n    masto,\n    streaming,\n    client,\n    authenticated: false,\n    instance: DEFAULT_INSTANCE,\n  };\n}\n\nwindow.__API__ = {\n  currentAccountApi,\n  apis,\n  accountApis,\n};\n","export default function isMastodonLinkMaybe(url) {\n  try {\n    const { pathname, hash } = new URL(url);\n    return (\n      /^\\/.*\\/\\d+$/i.test(pathname) ||\n      /^\\/(@[^/]+|users\\/[^/]+)\\/(statuses|posts)\\/\\w+\\/?$/i.test(pathname) || // GoToSocial, Takahe\n      /^\\/notes\\/[a-z0-9]+$/i.test(pathname) || // Misskey, Firefish\n      /^\\/(notice|objects)\\/[a-z0-9-]+$/i.test(pathname) || // Pleroma\n      /#\\/[^\\/]+\\.[^\\/]+\\/s\\/.+/i.test(hash) // Phanpy 🫣\n    );\n  } catch (e) {\n    return false;\n  }\n}\n","import moize from 'moize';\n\nwindow._moize = moize;\n\nexport default function mem(fn, opts = {}) {\n  return moize(fn, { ...opts, maxSize: 50, isDeepEqual: true });\n}\n","import mem from './mem';\n\nexport default function pmem(fn, opts = {}) {\n  return mem(fn, { isPromise: true, ...opts });\n}\n","// Rate limit repeated function calls and queue them to set interval\nexport default function rateLimit(fn, interval) {\n  let queue = [];\n  let isRunning = false;\n\n  function executeNext() {\n    if (queue.length === 0) {\n      isRunning = false;\n      return;\n    }\n\n    const nextFn = queue.shift();\n    nextFn();\n    setTimeout(executeNext, interval);\n  }\n\n  return function (...args) {\n    const callFn = () => fn.apply(this, args);\n    queue.push(callFn);\n\n    if (!isRunning) {\n      isRunning = true;\n      setTimeout(executeNext, interval);\n    }\n  };\n}\n","import pThrottle from 'p-throttle';\nimport { snapshot } from 'valtio/vanilla';\n\nimport { api } from './api';\nimport states, { saveStatus } from './states';\n\nexport const throttle = pThrottle({\n  limit: 1,\n  interval: 1000,\n});\n\nconst denylistDomains = /(twitter|github)\\.com/i;\nconst failedUnfurls = {};\nfunction _unfurlMastodonLink(instance, url) {\n  const snapStates = snapshot(states);\n  if (denylistDomains.test(url)) {\n    return;\n  }\n  if (failedUnfurls[url]) {\n    return;\n  }\n  const instanceRegex = new RegExp(instance + '/');\n  if (instanceRegex.test(snapStates.unfurledLinks[url]?.url)) {\n    return Promise.resolve(snapStates.unfurledLinks[url]);\n  }\n  console.debug('🦦 Unfurling URL', url);\n\n  let remoteInstanceFetch;\n  let theURL = url;\n\n  // https://elk.zone/domain.com/@stest/123 -> https://domain.com/@stest/123\n  if (/\\/\\/elk\\.[^\\/]+\\/[^\\/]+\\.[^\\/]+/i.test(theURL)) {\n    theURL = theURL.replace(/elk\\.[^\\/]+\\//i, '');\n  }\n\n  // https://trunks.social/status/domain.com/@stest/123 -> https://domain.com/@stest/123\n  if (/\\/\\/trunks\\.[^\\/]+\\/status\\/[^\\/]+\\.[^\\/]+/i.test(theURL)) {\n    theURL = theURL.replace(/trunks\\.[^\\/]+\\/status\\//i, '');\n  }\n\n  // https://phanpy.social/#/domain.com/s/123 -> https://domain.com/statuses/123\n  if (/\\/#\\/[^\\/]+\\.[^\\/]+\\/s\\/.+/i.test(theURL)) {\n    const urlAfterHash = theURL.split('/#/')[1];\n    const finalURL = urlAfterHash.replace(/\\/s\\//i, '/@fakeUsername/');\n    theURL = `https://${finalURL}`;\n  }\n\n  let urlObj;\n  try {\n    urlObj = new URL(theURL);\n  } catch (e) {\n    return;\n  }\n  const domain = urlObj.hostname;\n  const path = urlObj.pathname;\n  // Regex /:username/:id, where username = @username or @username@domain, id = number\n  const statusRegex = /\\/@([^@\\/]+)@?([^\\/]+)?\\/(\\d+)$/i;\n  const statusMatch = statusRegex.exec(path);\n  if (statusMatch) {\n    const id = statusMatch[3];\n    const { masto } = api({ instance: domain });\n    remoteInstanceFetch = masto.v1.statuses\n      .$select(id)\n      .fetch()\n      .then((status) => {\n        if (status?.id) {\n          return {\n            status,\n            instance: domain,\n          };\n        } else {\n          throw new Error('No results');\n        }\n      });\n  }\n\n  const { masto } = api({ instance });\n  const mastoSearchFetch = masto.v2.search\n    .fetch({\n      q: theURL,\n      type: 'statuses',\n      resolve: true,\n      limit: 1,\n    })\n    .then((results) => {\n      const { statuses } = results;\n      if (statuses.length > 0) {\n        // Filter out statuses that has content that contains the URL, in-case-sensitive\n        const theStatuses = statuses.filter(\n          (status) =>\n            !status.content?.toLowerCase().includes(theURL.toLowerCase()),\n        );\n\n        if (theStatuses.length === 1) {\n          return {\n            status: theStatuses[0],\n            instance,\n          };\n        }\n        // If there are multiple statuses, give up, something is wrong\n      }\n      throw new Error('No results');\n    });\n\n  function handleFulfill(result) {\n    const { status, instance } = result;\n    const { id } = status;\n    const selfURL = `/${instance}/s/${id}`;\n    console.debug('🦦 Unfurled URL', url, id, selfURL);\n    const data = {\n      id,\n      instance,\n      url: selfURL,\n    };\n    states.unfurledLinks[url] = data;\n    saveStatus(status, instance, {\n      skipThreading: true,\n    });\n    return data;\n  }\n  function handleCatch(e) {\n    failedUnfurls[url] = true;\n  }\n\n  if (remoteInstanceFetch) {\n    // return Promise.any([remoteInstanceFetch, mastoSearchFetch])\n    //   .then(handleFulfill)\n    //   .catch(handleCatch);\n    // If mastoSearchFetch is fulfilled within 3s, return it, else return remoteInstanceFetch\n    const finalPromise = Promise.race([\n      mastoSearchFetch,\n      new Promise((resolve, reject) => setTimeout(reject, 3000)),\n    ]).catch(() => {\n      // If remoteInstanceFetch is fullfilled, return it, else return mastoSearchFetch\n      return remoteInstanceFetch.catch(() => mastoSearchFetch);\n    });\n    return finalPromise.then(handleFulfill).catch(handleCatch);\n  } else {\n    return mastoSearchFetch.then(handleFulfill).catch(handleCatch);\n  }\n}\n\nconst unfurlMastodonLink = throttle(_unfurlMastodonLink);\nexport default unfurlMastodonLink;\n","import { deepEqual } from 'fast-equals';\nimport { proxy, subscribe } from 'valtio';\nimport { subscribeKey } from 'valtio/utils';\n\nimport { api } from './api';\nimport isMastodonLinkMaybe from './isMastodonLinkMaybe';\nimport pmem from './pmem';\nimport rateLimit from './ratelimit';\nimport store from './store';\nimport unfurlMastodonLink from './unfurl-link';\n\nconst states = proxy({\n  appVersion: {},\n  // history: [],\n  prevLocation: null,\n  currentLocation: null,\n  statuses: {},\n  statusThreadNumber: {},\n  home: [],\n  // specialHome: [],\n  homeNew: [],\n  homeLast: null, // Last item in 'home' list\n  homeLastFetchTime: null,\n  notifications: [],\n  notificationsLast: null, // Last read notification\n  notificationsNew: [],\n  notificationsShowNew: false,\n  notificationsLastFetchTime: null,\n  reloadStatusPage: 0,\n  reloadGenericAccounts: {\n    id: null,\n    counter: 0,\n  },\n  spoilers: {},\n  spoilersMedia: {},\n  scrollPositions: {},\n  unfurledLinks: {},\n  statusQuotes: {},\n  statusFollowedTags: {},\n  statusReply: {},\n  accounts: {},\n  routeNotification: null,\n  // Modals\n  showCompose: false,\n  showSettings: false,\n  showAccount: false,\n  showAccounts: false,\n  showDrafts: false,\n  showMediaModal: false,\n  showShortcutsSettings: false,\n  showKeyboardShortcutsHelp: false,\n  showGenericAccounts: false,\n  showMediaAlt: false,\n  showEmbedModal: false,\n  showReportModal: false,\n  // Shortcuts\n  shortcuts: [],\n  // Settings\n  settings: {\n    autoRefresh: false,\n    shortcutsViewMode: null,\n    shortcutsColumnsMode: false,\n    boostsCarousel: true,\n    contentTranslation: true,\n    contentTranslationTargetLanguage: null,\n    contentTranslationHideLanguages: [],\n    contentTranslationAutoInline: false,\n    shortcutSettingsCloudImportExport: false,\n    mediaAltGenerator: false,\n    composerGIFPicker: false,\n    cloakMode: false,\n  },\n});\n\nexport default states;\n\nexport function initStates() {\n  // init all account based states\n  // all keys that uses store.account.get() should be initialized here\n  states.notificationsLast = store.account.get('notificationsLast') || null;\n  states.shortcuts = store.account.get('shortcuts') ?? [];\n  states.settings.autoRefresh =\n    store.account.get('settings-autoRefresh') ?? false;\n  states.settings.shortcutsViewMode =\n    store.account.get('settings-shortcutsViewMode') ?? null;\n  if (store.account.get('settings-shortcutsColumnsMode')) {\n    states.settings.shortcutsColumnsMode = true;\n  }\n  states.settings.boostsCarousel =\n    store.account.get('settings-boostsCarousel') ?? true;\n  states.settings.contentTranslation =\n    store.account.get('settings-contentTranslation') ?? true;\n  states.settings.contentTranslationTargetLanguage =\n    store.account.get('settings-contentTranslationTargetLanguage') || null;\n  states.settings.contentTranslationHideLanguages =\n    store.account.get('settings-contentTranslationHideLanguages') || [];\n  states.settings.contentTranslationAutoInline =\n    store.account.get('settings-contentTranslationAutoInline') ?? false;\n  states.settings.shortcutSettingsCloudImportExport =\n    store.account.get('settings-shortcutSettingsCloudImportExport') ?? false;\n  states.settings.mediaAltGenerator =\n    store.account.get('settings-mediaAltGenerator') ?? false;\n  states.settings.composerGIFPicker =\n    store.account.get('settings-composerGIFPicker') ?? false;\n  states.settings.cloakMode = store.account.get('settings-cloakMode') ?? false;\n}\n\nsubscribeKey(states, 'notificationsLast', (v) => {\n  console.log('CHANGE', v);\n  store.account.set('notificationsLast', states.notificationsLast);\n});\nsubscribe(states, (changes) => {\n  console.debug('STATES change', changes);\n  for (const [action, path, value, prevValue] of changes) {\n    if (path.join('.') === 'settings.autoRefresh') {\n      store.account.set('settings-autoRefresh', !!value);\n    }\n    if (path.join('.') === 'settings.boostsCarousel') {\n      store.account.set('settings-boostsCarousel', !!value);\n    }\n    if (path.join('.') === 'settings.shortcutsViewMode') {\n      store.account.set('settings-shortcutsViewMode', value);\n    }\n    if (path.join('.') === 'settings.contentTranslation') {\n      store.account.set('settings-contentTranslation', !!value);\n    }\n    if (path.join('.') === 'settings.contentTranslationAutoInline') {\n      store.account.set('settings-contentTranslationAutoInline', !!value);\n    }\n    if (path.join('.') === 'settings.shortcutSettingsCloudImportExport') {\n      store.account.set('settings-shortcutSettingsCloudImportExport', !!value);\n    }\n    if (path.join('.') === 'settings.contentTranslationTargetLanguage') {\n      console.log('SET', value);\n      store.account.set('settings-contentTranslationTargetLanguage', value);\n    }\n    if (/^settings\\.contentTranslationHideLanguages/i.test(path.join('.'))) {\n      store.account.set(\n        'settings-contentTranslationHideLanguages',\n        states.settings.contentTranslationHideLanguages,\n      );\n    }\n    if (path.join('.') === 'settings.mediaAltGenerator') {\n      store.account.set('settings-mediaAltGenerator', !!value);\n    }\n    if (path.join('.') === 'settings.composerGIFPicker') {\n      store.account.set('settings-composerGIFPicker', !!value);\n    }\n    if (path?.[0] === 'shortcuts') {\n      store.account.set('shortcuts', states.shortcuts);\n    }\n    if (path.join('.') === 'settings.cloakMode') {\n      store.account.set('settings-cloakMode', !!value);\n    }\n  }\n});\n\nexport function hideAllModals() {\n  states.showCompose = false;\n  states.showSettings = false;\n  states.showAccount = false;\n  states.showAccounts = false;\n  states.showDrafts = false;\n  states.showMediaModal = false;\n  states.showShortcutsSettings = false;\n  states.showKeyboardShortcutsHelp = false;\n  states.showGenericAccounts = false;\n  states.showMediaAlt = false;\n  states.showEmbedModal = false;\n}\n\nexport function statusKey(id, instance) {\n  if (!id) return;\n  return instance ? `${instance}/${id}` : id;\n}\n\nexport function getStatus(statusID, instance) {\n  if (instance) {\n    const key = statusKey(statusID, instance);\n    return states.statuses[key];\n  }\n  return states.statuses[statusID];\n}\n\nexport function saveStatus(status, instance, opts) {\n  if (typeof instance === 'object') {\n    opts = instance;\n    instance = null;\n  }\n  const {\n    override = true,\n    skipThreading = false,\n    skipUnfurling = false,\n  } = opts || {};\n  if (!status) return;\n  const oldStatus = getStatus(status.id, instance);\n  if (!override && oldStatus) return;\n  if (deepEqual(status, oldStatus)) return;\n  queueMicrotask(() => {\n    const key = statusKey(status.id, instance);\n    if (oldStatus?._pinned) status._pinned = oldStatus._pinned;\n    // if (oldStatus?._filtered) status._filtered = oldStatus._filtered;\n    states.statuses[key] = status;\n    if (status.reblog?.id) {\n      const srKey = statusKey(status.reblog.id, instance);\n      states.statuses[srKey] = status.reblog;\n    }\n    if (status.quote?.id) {\n      const sKey = statusKey(status.quote.id, instance);\n      states.statuses[sKey] = status.quote;\n      states.statusQuotes[key] = [\n        {\n          id: status.quote.id,\n          instance,\n        },\n      ];\n    }\n  });\n\n  // THREAD TRAVERSER\n  if (!skipThreading) {\n    queueMicrotask(() => {\n      threadifyStatus(status.reblog || status, instance);\n    });\n  }\n\n  // UNFURLER\n  if (!skipUnfurling) {\n    queueMicrotask(() => {\n      unfurlStatus(status.reblog || status, instance);\n    });\n  }\n}\n\nfunction _threadifyStatus(status, propInstance) {\n  const { masto, instance } = api({ instance: propInstance });\n  // Return all statuses in the thread, via inReplyToId, if inReplyToAccountId === account.id\n  let fetchIndex = 0;\n  async function traverse(status, index = 0) {\n    const { inReplyToId, inReplyToAccountId } = status;\n    if (!inReplyToId || inReplyToAccountId !== status.account.id) {\n      return [status];\n    }\n    if (inReplyToId && inReplyToAccountId !== status.account.id) {\n      throw 'Not a thread';\n      // Possibly thread of replies by multiple people?\n    }\n    const key = statusKey(inReplyToId, instance);\n    let prevStatus = states.statuses[key];\n    if (!prevStatus) {\n      if (fetchIndex++ > 3) throw 'Too many fetches for thread'; // Some people revive old threads\n      await new Promise((r) => setTimeout(r, 500 * fetchIndex)); // Be nice to rate limits\n      // prevStatus = await masto.v1.statuses.$.select(inReplyToId).fetch();\n      prevStatus = await fetchStatus(inReplyToId, masto);\n      saveStatus(prevStatus, instance, { skipThreading: true });\n    }\n    // Prepend so that first status in thread will be index 0\n    return [...(await traverse(prevStatus, ++index)), status];\n  }\n  return traverse(status)\n    .then((statuses) => {\n      if (statuses.length > 1) {\n        console.debug('THREAD', statuses);\n        statuses.forEach((status, index) => {\n          const key = statusKey(status.id, instance);\n          states.statusThreadNumber[key] = index + 1;\n        });\n      }\n    })\n    .catch((e) => {\n      console.error(e, status);\n    });\n}\nexport const threadifyStatus = rateLimit(_threadifyStatus, 100);\n\nconst fauxDiv = document.createElement('div');\nexport function unfurlStatus(status, instance) {\n  const { instance: currentInstance } = api();\n  const content = status?.content;\n  const hasLink = /<a/i.test(content);\n  if (hasLink) {\n    const sKey = statusKey(status?.id, instance);\n    fauxDiv.innerHTML = content;\n    const links = fauxDiv.querySelectorAll(\n      'a[href]:not(.u-url):not(.mention):not(.hashtag)',\n    );\n    [...links]\n      .filter((a) => {\n        const url = a.href;\n        const isPostItself = url === status.url || url === status.uri;\n        return !isPostItself && isMastodonLinkMaybe(url);\n      })\n      .forEach((a, i) => {\n        unfurlMastodonLink(currentInstance, a.href).then((result) => {\n          if (!result) return;\n          if (!sKey) return;\n          if (!Array.isArray(states.statusQuotes[sKey])) {\n            states.statusQuotes[sKey] = [];\n          }\n          if (!states.statusQuotes[sKey][i]) {\n            states.statusQuotes[sKey].splice(i, 0, result);\n          }\n        });\n      });\n  }\n}\n\nconst fetchStatus = pmem((statusID, masto) => {\n  return masto.v1.statuses.$select(statusID).fetch();\n});\n","import './loader.css';\n\nfunction Loader({ abrupt, hidden, ...props }) {\n  return (\n    <span\n      {...props}\n      class={`loader-container ${abrupt ? 'abrupt' : ''} ${\n        hidden ? 'hidden' : ''\n      }`}\n    >\n      <span class=\"loader\" />\n    </span>\n  );\n}\n\nexport default Loader;\n","import { shouldPolyfill } from '@formatjs/intl-segmenter/should-polyfill';\nimport { Suspense } from 'preact/compat';\nimport { useEffect, useState } from 'preact/hooks';\n\nimport Loader from './loader';\n\nconst supportsIntlSegmenter = !shouldPolyfill();\n\n// Preload IntlSegmenter\nsetTimeout(() => {\n  queueMicrotask(() => {\n    if (!supportsIntlSegmenter) {\n      import('@formatjs/intl-segmenter/polyfill-force').catch(() => {});\n    }\n  });\n}, 1000);\n\nexport default function IntlSegmenterSuspense({ children }) {\n  if (supportsIntlSegmenter) {\n    return <Suspense fallback={<Loader />}>{children}</Suspense>;\n  }\n\n  const [polyfillLoaded, setPolyfillLoaded] = useState(false);\n  useEffect(() => {\n    (async () => {\n      await import('@formatjs/intl-segmenter/polyfill-force');\n      setPolyfillLoaded(true);\n    })();\n  }, []);\n\n  return polyfillLoaded ? (\n    <Suspense fallback={<Loader />}>{children}</Suspense>\n  ) : (\n    <Loader />\n  );\n}\n","import { useLayoutEffect } from 'preact/hooks';\nimport { matchPath } from 'react-router-dom';\nimport { subscribeKey } from 'valtio/utils';\n\nimport states from './states';\n\nconst { PHANPY_CLIENT_NAME: CLIENT_NAME } = import.meta.env;\n\nexport default function useTitle(title, path) {\n  function setTitle() {\n    const { currentLocation } = states;\n    const hasPaths = Array.isArray(path);\n    let paths = hasPaths ? path : [];\n    // Workaround for matchPath not working for optional path segments\n    // https://github.com/remix-run/react-router/discussions/9862\n    if (!hasPaths && /:?\\w+\\?/.test(path)) {\n      paths.push(path.replace(/(:\\w+)\\?/g, '$1'));\n      paths.push(path.replace(/\\/?:\\w+\\?/g, ''));\n    }\n    let matched = false;\n    if (paths.length) {\n      matched = paths.some((p) => matchPath(p, currentLocation));\n    } else if (path) {\n      matched = matchPath(path, currentLocation);\n    }\n    console.debug('setTitle', { title, path, currentLocation, paths, matched });\n    if (matched) {\n      document.title = title ? `${title} / ${CLIENT_NAME}` : CLIENT_NAME;\n    }\n  }\n\n  useLayoutEffect(() => {\n    const unsub = subscribeKey(states, 'currentLocation', setTitle);\n    setTitle();\n    return unsub;\n  }, [title, path]);\n}\n"],"file":"assets/useTitle-uL2voQks.js"}