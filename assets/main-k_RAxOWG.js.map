{"version":3,"mappings":"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","names":["usePageVisibility","fn","deps","savedCallback","useRef","useEffect","current","handleVisibilityChange","hidden","document","visibilityState","console","STREAMING_TIMEOUT","POLL_INTERVAL","BackgroundService","memo","isLoggedIn","visible","setVisible","useState","checkLatestNotification","masto","instance","skipCheckMarkers","states","notificationsLast","notificationsIterator","v1","notifications","list","limit","sinceId","id","value","next","length","notificationsShowNew","lastReadId","markers","fetch","timeline","sub","pollNotifications","streaming","api","hasStreaming","setTimeout","user","notification","subscribe","log","entry","_a","checkForUpdates","clearTimeout","clearInterval","info","visible2","lastCheckDate","useHotkeys","currentCloakMode","Date","diff","isSafari","test","navigator","userAgent","openOSK","fauxEl","createElement","style","position","top","left","opacity","body","appendChild","focus","removeChild","ComposeButton","handleButton","e","shiftKey","openCompose","showCompose","ignoreEventWhen","querySelector","_jsx","type","onClick","children","Icon","icon","size","alt","KeyboardShortcutsHelp","snapStates","useSnapshot","onClose","showKeyboardShortcutsHelp","hasModal","Modal","class","tabindex","action","keys","_jsxs","_Fragment","className","map","FollowRequestButtons","accountID","onChange","uiState","setUIState","requestState","setRequestState","relationship","setRelationship","hasRelationship","disabled","rel","followRequests","$select","authorize","followedBy","Error","Loader","NOTIFICATION_ICONS","mention","status","reblog","follow","follow_request","favourite","poll","update","severed_relationships","emoji_reaction","emojiText","emoji","emoji_url","url","staticUrl","CustomEmoji","contentText","count","reblog_reply","favourite_reply","targetAccount","name","SEVERED_RELATIONSHIPS_TEXT","account_suspension","from","targetName","domain_block","followersCount","followingCount","user_domain_block","AVATARS_LIMIT","Notification","isStatic","disableContextMenu","account","report","event","_accounts","_statuses","actualStatus","actualStatusID","currentAccount","store","session","get","isSelf","isVoted","voted","isReplyToOthers","inReplyToAccountId","favsCount","reblogsCount","_types","includes","text","NameText","showAvatar","emojiURL","emojis","find","shortcode","replace","formattedCreatedAt","createdAt","toLocaleString","genericAccountsHeading","handleOpenGenericAccounts","showGenericAccounts","heading","accounts","showReactions","excludeRelationshipAttrs","postID","statusKey","debug","tabIndex","title","RelativeTime","datetime","format","href","target","account2","Fragment","Avatar","avatarStatic","bot","type2","status2","to","Status","previewMode","TruncatedLink","onContextMenu","post","dispatchEvent","clientX","clientY","undefined","readOnly","statusID","props","ref","useTruncated","oldProps","newProps","serviceWorker","accessToken","data","NotificationService","routeNotification","useLayoutEffect","sameInstance","currentInstance","notificationAccount","hasAccount","accountInstance","location","hash","warn","id2","setShowNotificationSheet","showNotificationSheet","Link","tagName","instanceURL","SearchForm","forwardRef","searchParams","setSearchParams","useSearchParams","searchMenuOpen","setSearchMenuOpen","query","setQuery","formRef","searchFieldRef","useImperativeHandle","setValue","select","blur","onSubmit","preventDefault","params","q","encodeURIComponent","placeholder","dir","autocomplete","autocorrect","autocapitalize","spellCheck","onSearch","onInput","onFocus","classList","add","onBlur","remove","onKeyDown","key","focusItem","nextItem","nextElementSibling","Array","parentElement","filter","el","forEach","firstItem","prevItem","previousElementSibling","lastItem","click","label","queryType","sort","a","b","i","SearchCommand","showSearch","setShowSearch","searchFormRef","isSearchPage","closeSearch","enabled","enableOnFormTags","floatingButtonUrl","multiColumnUrl$1","tabMenuBarUrl","LIMIT","MAX_FETCH","fetchFollowedTags","iterator","followedTags","tags","fetchCount","done","push","localeCompare","updatedAt","MAX_AGE","getFollowedTags","fauxDiv","extractTagsFromStatus","content","hashtagLinks","FETCH_MAX_AGE","fetchLists","pmem","lists","set","now","maxAge","getLists","fetchList","getList","theList","getListTitle","addListStore","updateListStore","index","deleteListStore","listID","findIndex","AsyncText","setText","Promise","resolve","then","SHORTCUTS_LIMIT","TYPES","TYPE_TEXT","following","public","search","bookmarks","favourites","hashtag","trending","mentions","TYPE_PARAMS","notRequired","pattern","fetchAccountTitle","username","acct","displayName","SHORTCUTS_META","_","path","excludeViewMode","local","subtitle","media","split","join","ShortcutsSettings","shortcuts","showForm","setShowForm","showImportExport","setShowImportExport","shortcutsListParent","useAutoAnimate","fontSize","textTransform","imgURL","multiColumnUrl","checked","settings","shortcutsViewMode","src","width","height","Boolean","shortcut","Object","values","excludedViewMode","shortcutsArr","temp","shortcutIndex","display","justifyContent","alignItems","currentTarget","ShortcutForm","result","mode","ImportExport","FORM_NOTES","editMode","setLists","setFollowedHashtags","currentType","lists2","form","input","setCurrentType","required","defaultValue","switch","followedHashtags","tag","compressToEncodedURIComponent","shortcutsStr","importUIState","setImportUIState","parsedImportShortcutStr","importShortcutStr","parsed","isArray","parse","hasCurrentSettings","shortcutsImportFieldRef","shortcutSettingsCloudImportExport","showToast","note","relationships","v","dt","s","some","MenuConfirm","nonUniqueShortcuts","menuFooter","every","exceededLimit","newShortcuts","confirmLabel","menuItemClassName","clipboard","share","alert","newNote","settingsJSON2","settingsJSON","Shortcuts","shortcutsColumnsMode","menuRef","hasLists","formattedShortcuts","pin","navigate","useNavigate","handler","parseInt","closeMenu","showShortcutsSettings","contains","page","getElementById","updatesButton","Menu2","instanceRef","overflow","viewScroll","menuClassName","gap","menuButton","_b","SubMenu","MenuLink","MenuDivider","ListAddEdit","nameFieldRef","repliesPolicyFieldRef","exclusiveFieldRef","repliesPolicy","exclusive","supportsExclusive","supports","formData","FormData","listResult","replies_policy","MUTE_DURATIONS","MUTE_DURATIONS_LABELS","ACCOUNT_INFO_MAX_AGE","fetchFamiliarFollowers","currentID","familiarFollowers","memFetchFamiliarFollowers","fetchPostingStats","fetchStatuses","statuses","total","originals","replies","stats","boosts","memFetchPostingStats","fetchAccount","standalone","authenticated","currentMasto","isString","useMemo","setInfo","sameCurrentInstance","info2","avatar","fields","group","lastStatusAt","locked","statusesCount","memorial","moved","roles","header","headerStatic","headerIsAvatar","infoHasEssentials","getJSON","updated","headerCornerColors","setHeaderCornerColors","followersIterator","domain","fetchFollowers","firstLoad","familiarFollowersCache","results","familiarFollowers2","newValue","familiar","followingIterator","LinkOrDiv","accountLink","postingStats","setPostingStats","renderFamiliarFollowers","setFamiliarFollowers","postingStatsUIState","setPostingStatsUIState","hasPostingStats","followers","renderPostingStats","onRelationshipChange","onProfileUpdate","useCallback","newAccount","AccountBlock","stopPropagation","onError","ctx","canvas","onLoad","pixelDimension","rgbColors","window","OffscreenCanvas","g","imageSmoothingEnabled","drawImage","colors","getImageData","dataLength","r","lightenRGB","color","avatarSize","handle","role","enhanceContent","verifiedAt","__html","EmojiText","follower","fetchAccounts","shortenNumber","squircle","fetchFollowing","Math","RelatedActions","FAMILIAR_FOLLOWERS_LIMIT","showingReblogs","currentInfo","setCurrentInfo","notifying","blocking","blockedBy","muting","mutingNotifications","requested","domainBlocking","endorsed","privateNote","v2","fetchRelationships","setRelationshipUIState","relationship2","setIsSelf","showAddRemoveLists","setShowAddRemoveLists","showPrivateNoteModal","updateAccount","niceDateTime","showTranslatedBio","showEditProfile","setShowPrivateNoteModal","currentAuthenticated","MenuItem","loading","onMenuChange","setShowTranslatedBio","reblogs","niceAccountURL","error","newRelationship","duration","counter","setShowEditProfile","relationshipUIState","TranslatedBioSheet","PrivateNoteSheet","EditProfileSheet","state","luminence","alpha","pathname","getHTMLText","fieldsText","urlObj","host","TranslationBlock","setListsContainingAccount","reloadCount","reload","useReducer","c","listsContainingAccount2","inList","listsContainingAccount","l","showListAddEditModal","setShowListAddEditModal","accountIds","initialNote","textareaRef","timer","e2","setAccount","source","fieldsAttributesRef","displayName2","verifyCredentials","fieldsAttributes","field","note2","FieldsAttributesRow","hasValue","setHasValue","AccountHandleInfo","server","maxLength","relationshipsMap","uniqueAccountIds","reduce","acc","groupBoosts","newValues","boostStash","serialBoosts","item","boostStashID","items","half","floor","slice","dedupeBoosts","boostedStatusIDs","filteredItems","boosterID","statusKey2","groupContext","contextIndex","contexts","t","repliedItem","j","self","splice","context","inReplyToId","firstItemAccountID","newItems","appliedContextIndices","contextItems","aDate","bDate","i2","sKey","queueMicrotask","replyToStatus","fetchStatus","saveStatus","skipThreading","statusReply","assignFollowedTags","statusFollowedTags","statusWithFollowedTags","itemFollowedTags","extractedTags","clearFollowedTagsState","useScroll","scrollableRef","distanceFromStart","distanceFromEnd","scrollThresholdStart","scrollThresholdEnd","direction","distanceFromStartPx","_distanceFromStartPx","distanceFromEndPx","_distanceFromEndPx","scrollDirection","setScrollDirection","reachStart","setReachStart","reachEnd","setReachEnd","nearReachStart","setNearReachStart","nearReachEnd","setNearReachEnd","isVertical","scrollableElement","previousScrollStart","scrollTop","scrollLeft","onScroll","scrollHeight","scrollWidth","clientHeight","clientWidth","scrollStart","scrollDimension","clientDimension","scrollDistance","abs","min","addEventListener","passive","removeEventListener","init","Event","useScrollFn","callback","useThrottledCallback","MediaPost","parent","onMediaClick","accountId","accountURL","accountEmojis","repliesCount","reblogged","favourited","favouritesCount","bookmarked","muted","sensitive","spoilerText","visibility","language","editedAt","filtered","card","mediaAttachments","uri","_deleted","_pinned","debugHover","filterContext","useContext","FilterContext","isFiltered","filterInfo","hasSpoiler","readingExpandMedia","prefs","filterTitleStr","titlesStr","showSpoilerMedia","Media","NavMenu","moreThanOneAccount","showFollowing","bindLongPress","useLongPress","showAccounts","threshold","detect","cancelOnMovement","buttonRef","menuState","setMenuState","boundingBoxPadding","safeBoundingBoxPadding","mutesIterator","fetchMutes","mutes","blocksIterator","fetchBlocks","blocks","buttonClickTS","ControlledMenu","anchorRef","containerProps","zIndex","portal","align","unmountOnClose","appVersion","commitHash","__COMMIT_HASH__","confirm","showSettings","scrollIntoViewOptions","block","inline","behavior","Timeline","titleComponent","emptyText","errorText","useItemID","boostsCarousel","fetchItems","checkForUpdatesInterval","headerStart","headerEnd","timelineStart","refresh","view","showFollowedTags","showReplyParent","setItems","showMore","setShowMore","showNew","setShowNew","allowGrouping","loadItems","useDebouncedCallback","otherPosts","pinnedPosts","items2","itemsSelector","jRef","activeItem","activeItemRect","closest","getBoundingClientRect","allItems","querySelectorAll","activeItemIndex","indexOf","itemRect","topmostItem","kRef","findLast","oRef","handleLoadNewPosts","showNewPostsIndicator","dotRef","headerRef","nearReachStart2","hiddenUI","prevView","disableIdleCheck","loadOrCheckUpdates","inBackground","noPointers","__IDLE__","timeDiff","hasUpdate","useInterval","lastHiddenTime","node","TimelineItem","InView","inView","fItems","bFiltered","isCarousel","aFiltered","reblog2","_pinned2","actualStatusID2","statusID2","url2","StatusCarousel","manyItems","isMiddle","isSpoiler","showCompact","_differentAuthor","isStart","isEnd","TimelineStatusCompact","itemKey","enableCommentHint","endButtonRef","render","setRender","newID","oldID","carouselRef","startButtonRef","statusPeekText","statusPeek","statusThreadNumber","MIN_YEAR","MIN_YEAR_MONTH","supportsInputMonth","setAttribute","_isSearchEnabled","isSearchEnabled","AccountStatuses","useParams","month","excludeReplies","excludeBoosts","tagged","accountStatusesIterator","allSearchParams","searchOffsetRef","searchEnabled","setSearchEnabled","isValidMonth","_year","_month","monthIndex","after","afterStr","before","beforeStr","searchResults","value2","offset","pinnedStatuses","pinnedStatusesIds","exclude_replies","fetchPromise","fetchAccountPromiseRef","setFeaturedTags","AccountInfo","featuredTags","cachedAccount","filterBarRef","TimelineStart","month2","date","year","validity","valid","max","active","allowSwitch","offsetLeft","fetchAccountStatuses","masto2","monthFieldRef","checkValidity","minYear","maxYear","maxMonth","minMonth","yearFieldRef","Bookmarks","useTitle","bookmarksIterator","fetchBookmarks","Favourites","favouritesIterator","fetchFavourites","FILTER_CONTEXT","FILTER_CONTEXT_UNIMPLEMENTED","FILTER_CONTEXT_LABELS","home","thread","EXPIRY_DURATIONS","EXPIRY_DURATIONS_LABELS","Filters","showFiltersAddEditModal","setShowFiltersAddEditModal","filters","setFilters","keywords","expiresAt","k","keyword","ExpiryStatus","_id","incID","FiltersAddEdit","filterAction","hasExpiry","expiresAtDate","editKeywords","setEditKeywords","keywordsRef","setRemovedKeyword_IDs","filteredEditKeywords","setRemovedKeywordIDs","removedKeyword_IDs","title2","keywordIDs","getAll","keywordKeywords","keywordWholeWords","wholeWord","removedKeywordIDs","keywordsAttributes","context2","expiresIn","filterResult","_id2","defaultChecked","showNeverExpires","expired","rerender","FollowedHashtags","Following","homeIterator","latestItem","latestItemChanged","payload","fetchHome","TAGS_LIMIT_PER_MODE","TOTAL_TAGS_LIMIT","Hashtags","mediaView","columnMode","hashtags","trim","linkParams","hashtagTitle","hashtagPostTitle","maxID","fetchHashtags","timelines","any","maxId","onlyMedia","since_id","followUIState","setFollowUIState","reachLimit","setDownOverflow","subMenu","catch","finally","MenuHeader","FocusableItem","newHashtag","MenuGroup","exists","newInstance","List","listIterator","setList","showManageMembersModal","setShowManageMembersModal","list2","ListManageMembers","MEMBERS_LIMIT","members","setMembers","membersIterator","fetchMembers","member","as","RemoveAddButton","removed","setRemoved","emptySearchParams","URLSearchParams","Mentions","stateType","setStateType","mentionsIterator","fetchMentions","types","conversationsIterator","latestConversationItem","lastStatus","fetchConversations","args","notificationTypeKeys","fixNotifications","groupNotifications","notificationsMap","cleanNotifications","virtualType","mappedNotification","mappedAccount","n","cleanNotifications2","notificationsMap2","createBackendPushSubscription","subscription","create","fetchBackendPushSubscription","updateBackendPushSubscription","removeBackendPushSubscription","isPushSupported","getRegistration","getSubscription","registration","pushManager","urlBase64ToUint8Array","base64String","padding","repeat","base64","rawData","atob","outputArray","Uint8Array","charCodeAt","initSubscription","backendSubscription","err","message","sameEndpoint","vapidKey","sameKey","getCurrentAccount","applicationServerKey","vapidKeyStr","applicationServerKeyStr","updateSubscription","policy","removeSubscription","userVisibleOnly","Notifications","notificationID","notificationAccessToken","onlyMentions","setOnlyMentions","setFollowRequests","announcements","setAnnouncements","excludeTypes","allNotifications","groupedNotifications","notificationsLastFetchTime","fetchFollowRequests","loadFollowRequests","requests","fetchAnnouncements","supportsFilteredNotifications","showNotificationsSettings","setNotificationsPolicy","fetchNotificationsPolicy","loadNotificationsPolicy","notificationsRequests","setNotificationsRequests","fetchNotificationsRequest","loadNotifications","fetchNotificationsPromise","fetchNotifications","loadUpdates","autoRefresh","unsub","subscribeKey","todayDate","yesterdayDate","showTodayEmpty","announcementsListRef","statusLink","setShowNotificationsSettings","announcement","scrollIntoView","AnnouncementBlock","notificationsPolicy","onToggle","open","request","NotificationRequestModalButton","NotificationRequestButtons","notificationDay","differentDay","currentDay","filterNewAccounts","filterPrivateMentions","filterNotFollowing","filterNotFollowers","allFilters","contact","getCurrentInstance","contactAccount","startsAt","endsAt","published","publishedAt","reactions","allDay","read","publishedAtDate","publishedDateText","updatedAtDate","updatedAtText","reaction","me","fetchNotficationsByAccount","setShowModal","showModal","setNotifications","notifs","abrupt","hasRequestState","Public","isLocal","publicIterator","fetchPublic","prompt","toLowerCase","SHORT_LIMIT","Search","offsetRef","scrollTo","statusResults","setStatusResults","accountResults","setAccountResults","hashtagResults","setHashtagResults","setTypeResultsFunc","setRelationshipsMap","loadRelationships","loadResults","prev","filterBarParent","link","history","clamp","gammaToLinear","pow","linearToGamma","rgb2oklab","m","cbrt","oklab2rgb","L","round","fetchLinks","trends","links","Trending","setHashtags","setLinks","trendIterator","fetchTrend","links2","cur","description","image","authorName","authorUrl","blurhash","imageDescription","providerName","providerUrl","accentColor","averageColor","labAverageColor","Columns","components","Hashtag","Component","Home","db","drafts","ns","getCurrentAccountNS","startsWith","showDrafts","NotificationsLink","notificationLinkRef","matchMedia","matches","NotificationsMenu","NOTIFICATIONS_LIMIT","NOTIFICATIONS_DISPLAY_LIMIT","hasFollowRequests","setHasFollowRequests","statusPostRegexes","getInstanceStatusObject","hostname","URL","regex","match","getInstanceStatusURL","HttpRoute","useLocation","statusObject","statusURL","Lists","logo","instancesListURL","define_import_meta_env_default","SUBCOMMENTS_OPEN_ALL_LIMIT","MAX_WEIGHT","cachedRepliesToggle","cachedStatusesMap","scrollPositions","resetScrollPosition","STATUSES_SELECTOR","STATUS_URL_REGEX","StatusPage","mediaParam","mediaOnlyParam","mediaIndex","showMedia","mediaStatusID","mediaStatus","getStatus","showMediaOnly","heroStatus","setHeroStatus","closeLink","prevLocation","matchStatusPath","matchPath","handleMediaClose","delete","$carousel","MediaModal","lang","StatusParent","linkable","restProps","StatusThread","propInstance","navigation","translate","setStatuses","heroStatusRef","totalDescendants","debounce","scrollOffsets","lastInitContextTS","reloadHero","heroTimer","cachedStatuses","reallyCachedStatuses","heroFetch","pRetry","contextFetch","hasStatus","heroStatus2","_replies","_r","expandReplies","weight","descendants","missingStatuses","ancestors2","ancestors","ancestorsIsThread","nestedDescendants","__replies","ancestor","isThread","allStatuses","offsetTop","setLimit","showRefresh","setShowRefresh","interval","scrollPosition","newScrollOffsets","setInterval","newScrollTop","contextURL","initContext","statusWeightCache","div","apiCache","heroDisplayName","heroContentText","postInstance","reloadStatusPage","hasDescendants","innerHTML","postSameInstance","activeStatus","activeStatusRect","activeStatusIndex","nextStatus","heroInView","heroPointer","statusLinkRect","topmostStatusLink","allStatusLinks","prevStatus","details","reachTopPost","initialPageState","handleMediaClick","renderStatus","descendant","isHero","requestAnimationFrame","setHeroInView","setReachTopPost","isLinkable","SubComments","handleStatusLinkClick","enableTranslate","showActionsBar","prevEntry","level","openAll","parentLink","getIDs","viewMode","prevLocationIsStatusPage","moreStatusesKeys","arr","setViewMode","button","buttons","statusesList","diveDeep","replies2","reply","replies3","totalComments","totalWeight","accWeight","hasParentThread","calcStatusWeight","openBefore","detailsRef","handleScroll","sameCount","open2","shortReply","dataset","MEDIA_VIRTUAL_LENGTH","cachedWeight","mediaLength","pollLength","POLL_VIRTUAL_LENGTH","cardLength","WEIGHT_SEGMENT","StatusRoute","boostsCarouselUrl","groupedNotificationsUrl","multiHashtagTimelineUrl","nestedCommentsThreadUrl","logoText","focusDeck","columns","modals","modal","modalFocusElement","backDrop","pages","nativeAlert","__nativeAlert","toast","Toastify","gravity","y","Catchup","lazy","Modals","__STATES__","__STATES_STATS__","counts","unmountedPosts","unfurledLinks","$post","postInNotifications","unfurled","keysCount","ICONS","nonIdleEvents","setIdle","debouncedSetIdle","onNonIdle","documentElement","isIOS","theme","$meta","tempColor","colorScheme","$manualMeta","themeDarkColor","$autoMetas","textSize","changes","setProperty","$app","prevValue","$body","setIsLoggedIn","code","decodeURIComponent","clientID","clientSecret","initPreferences","client","initInstance","initStates","PrimaryRoutes","Routes","Route","Suspense","nonRootLocation","Welcome","element","backgroundLocation","getPrevLocation","isModalPage","timeout","AbortSignal","controller","AbortController","abort","signal","HashRouter","App","localStorage","removeItem","sessionStorage","__CLOAK__","toggle"],"ignoreList":[],"sources":["../../src/utils/usePageVisibility.js","../../src/components/background-service.jsx","../../src/utils/open-osk.jsx","../../src/components/compose-button.jsx","../../src/components/keyboard-shortcuts-help.jsx","../../src/components/follow-request-buttons.jsx","../../src/components/notification.jsx","../../src/components/notification-service.jsx","../../src/components/search-form.jsx","../../src/components/search-command.jsx","../../src/assets/floating-button.svg","../../src/assets/multi-column.svg","../../src/assets/tab-menu-bar.svg","../../src/utils/followed-tags.js","../../src/utils/lists.js","../../src/components/AsyncText.jsx","../../src/components/shortcuts-settings.jsx","../../src/components/shortcuts.jsx","../../src/components/list-add-edit.jsx","../../src/components/account-info.jsx","../../src/utils/relationships.js","../../src/utils/timeline-utils.jsx","../../src/utils/useScroll.js","../../src/utils/useScrollFn.js","../../src/components/media-post.jsx","../../src/components/nav-menu.jsx","../../src/components/timeline.jsx","../../src/pages/account-statuses.jsx","../../src/pages/bookmarks.jsx","../../src/pages/favourites.jsx","../../src/pages/filters.jsx","../../src/pages/followed-hashtags.jsx","../../src/pages/following.jsx","../../src/pages/hashtag.jsx","../../src/pages/list.jsx","../../src/pages/mentions.jsx","../../src/utils/group-notifications.jsx","../../src/utils/push-notifications.js","../../src/pages/notifications.jsx","../../src/pages/public.jsx","../../src/pages/search.jsx","../../src/utils/color-utils.js","../../src/pages/trending.jsx","../../src/components/columns.jsx","../../src/pages/home.jsx","../../src/utils/get-instance-status-url.js","../../src/pages/http-route.jsx","../../src/pages/lists.jsx","../../src/assets/logo.svg","../../src/data/instances.json?url","../../src/utils/auth.js","../../src/pages/login.jsx","../../src/components/media-modal.jsx","../../src/pages/status.jsx","../../src/pages/status-route.jsx","../../src/assets/features/boosts-carousel.jpg","../../src/assets/features/grouped-notifications.jpg","../../src/assets/features/multi-column.jpg","../../src/assets/features/multi-hashtag-timeline.jpg","../../src/assets/features/nested-comments-thread.jpg","../../src/assets/logo-text.svg","../../src/pages/welcome.jsx","../../src/utils/focus-deck.jsx","../../src/utils/toast-alert.js","../../src/app.jsx","../../src/main.jsx"],"sourcesContent":["import { useEffect, useRef } from 'preact/hooks';\n\nexport default function usePageVisibility(fn = () => {}, deps = []) {\n  const savedCallback = useRef(fn);\n  useEffect(() => {\n    savedCallback.current = fn;\n  }, [deps]);\n\n  useEffect(() => {\n    const handleVisibilityChange = () => {\n      const hidden = document.hidden || document.visibilityState === 'hidden';\n      console.log('👀 Page visibility changed', hidden ? 'hidden' : 'visible');\n      savedCallback.current(!hidden);\n    };\n\n    document.addEventListener('visibilitychange', handleVisibilityChange);\n    return () =>\n      document.removeEventListener('visibilitychange', handleVisibilityChange);\n  }, []);\n}\n","import { memo } from 'preact/compat';\nimport { useEffect, useRef, useState } from 'preact/hooks';\nimport { useHotkeys } from 'react-hotkeys-hook';\n\nimport { api } from '../utils/api';\nimport showToast from '../utils/show-toast';\nimport states, { saveStatus } from '../utils/states';\nimport useInterval from '../utils/useInterval';\nimport usePageVisibility from '../utils/usePageVisibility';\n\nconst STREAMING_TIMEOUT = 1000 * 3; // 3 seconds\nconst POLL_INTERVAL = 15_000; // 15 seconds\n\nexport default memo(function BackgroundService({ isLoggedIn }) {\n  // Notifications service\n  // - WebSocket to receive notifications when page is visible\n  const [visible, setVisible] = useState(true);\n  usePageVisibility(setVisible);\n  const checkLatestNotification = async (masto, instance, skipCheckMarkers) => {\n    if (states.notificationsLast) {\n      const notificationsIterator = masto.v1.notifications.list({\n        limit: 1,\n        sinceId: states.notificationsLast.id,\n      });\n      const { value: notifications } = await notificationsIterator.next();\n      if (notifications?.length) {\n        if (skipCheckMarkers) {\n          states.notificationsShowNew = true;\n        } else {\n          let lastReadId;\n          try {\n            const markers = await masto.v1.markers.fetch({\n              timeline: 'notifications',\n            });\n            lastReadId = markers?.notifications?.lastReadId;\n          } catch (e) {}\n          if (lastReadId) {\n            states.notificationsShowNew = notifications[0].id !== lastReadId;\n          } else {\n            states.notificationsShowNew = true;\n          }\n        }\n      }\n    }\n  };\n\n  useEffect(() => {\n    let sub;\n    let pollNotifications;\n    if (isLoggedIn && visible) {\n      const { masto, streaming, instance } = api();\n      (async () => {\n        // 1. Get the latest notification\n        await checkLatestNotification(masto, instance);\n\n        let hasStreaming = false;\n        // 2. Start streaming\n        if (streaming) {\n          pollNotifications = setTimeout(() => {\n            (async () => {\n              try {\n                hasStreaming = true;\n                sub = streaming.user.notification.subscribe();\n                console.log('🎏 Streaming notification', sub);\n                for await (const entry of sub) {\n                  if (!sub) break;\n                  if (!visible) break;\n                  console.log('🔔🔔 Notification entry', entry);\n                  if (entry.event === 'notification') {\n                    console.log('🔔🔔 Notification', entry);\n                    saveStatus(entry.payload, instance, {\n                      skipThreading: true,\n                    });\n                  }\n                  states.notificationsShowNew = true;\n                }\n                console.log('💥 Streaming notification loop STOPPED');\n              } catch (e) {\n                hasStreaming = false;\n                console.error(e);\n              }\n\n              if (!hasStreaming) {\n                console.log('🎏 Streaming failed, fallback to polling');\n                pollNotifications = setInterval(() => {\n                  checkLatestNotification(masto, instance, true);\n                }, POLL_INTERVAL);\n              }\n            })();\n          }, STREAMING_TIMEOUT);\n        }\n      })();\n    }\n    return () => {\n      sub?.unsubscribe?.();\n      sub = null;\n      clearTimeout(pollNotifications);\n      clearInterval(pollNotifications);\n    };\n  }, [visible, isLoggedIn]);\n\n  // Check for updates service\n  const lastCheckDate = useRef();\n  const checkForUpdates = () => {\n    lastCheckDate.current = Date.now();\n    console.log('✨ Check app update');\n    fetch('./version.json')\n      .then((r) => r.json())\n      .then((info) => {\n        if (info) states.appVersion = info;\n      })\n      .catch((e) => {\n        console.error(e);\n      });\n  };\n  useInterval(checkForUpdates, visible && 1000 * 60 * 30); // 30 minutes\n  usePageVisibility((visible) => {\n    if (visible) {\n      if (!lastCheckDate.current) {\n        checkForUpdates();\n      } else {\n        const diff = Date.now() - lastCheckDate.current;\n        if (diff > 1000 * 60 * 60) {\n          // 1 hour\n          checkForUpdates();\n        }\n      }\n    }\n  });\n\n  // Global keyboard shortcuts \"service\"\n  useHotkeys('shift+alt+k', () => {\n    const currentCloakMode = states.settings.cloakMode;\n    states.settings.cloakMode = !currentCloakMode;\n    showToast({\n      text: `Cloak mode ${currentCloakMode ? 'disabled' : 'enabled'}`,\n    });\n  });\n\n  return null;\n});\n","const isSafari = /^((?!chrome|android).)*safari/i.test(navigator.userAgent); // https://stackoverflow.com/a/23522755\n\nexport default function openOSK() {\n  if (isSafari) {\n    const fauxEl = document.createElement('input');\n    fauxEl.style.position = 'absolute';\n    fauxEl.style.top = '0';\n    fauxEl.style.left = '0';\n    fauxEl.style.opacity = '0';\n    document.body.appendChild(fauxEl);\n    fauxEl.focus();\n    setTimeout(() => {\n      document.body.removeChild(fauxEl);\n    }, 500);\n  }\n}\n","import { useHotkeys } from 'react-hotkeys-hook';\n\nimport openCompose from '../utils/open-compose';\nimport openOSK from '../utils/open-osk';\nimport states from '../utils/states';\n\nimport Icon from './icon';\n\nexport default function ComposeButton() {\n  function handleButton(e) {\n    if (e.shiftKey) {\n      const newWin = openCompose();\n\n      if (!newWin) {\n        states.showCompose = true;\n      }\n    } else {\n      openOSK();\n      states.showCompose = true;\n    }\n  }\n\n  useHotkeys('c, shift+c', handleButton, {\n    ignoreEventWhen: (e) => {\n      const hasModal = !!document.querySelector('#modal-container > *');\n      return hasModal;\n    },\n  });\n\n  return (\n    <button type=\"button\" id=\"compose-button\" onClick={handleButton}>\n      <Icon icon=\"quill\" size=\"xl\" alt=\"Compose\" />\n    </button>\n  );\n}\n","import './keyboard-shortcuts-help.css';\n\nimport { memo } from 'preact/compat';\nimport { useHotkeys } from 'react-hotkeys-hook';\nimport { useSnapshot } from 'valtio';\n\nimport states from '../utils/states';\n\nimport Icon from './icon';\nimport Modal from './modal';\n\nexport default memo(function KeyboardShortcutsHelp() {\n  const snapStates = useSnapshot(states);\n\n  function onClose() {\n    states.showKeyboardShortcutsHelp = false;\n  }\n\n  useHotkeys(\n    '?, shift+?, shift+slash',\n    (e) => {\n      console.log('help');\n      states.showKeyboardShortcutsHelp = true;\n    },\n    {\n      ignoreEventWhen: (e) => {\n        const hasModal = !!document.querySelector('#modal-container > *');\n        return hasModal;\n      },\n    },\n  );\n\n  return (\n    !!snapStates.showKeyboardShortcutsHelp && (\n      <Modal onClose={onClose}>\n        <div id=\"keyboard-shortcuts-help-container\" class=\"sheet\" tabindex=\"-1\">\n          <button type=\"button\" class=\"sheet-close\" onClick={onClose}>\n            <Icon icon=\"x\" />\n          </button>\n          <header>\n            <h2>Keyboard shortcuts</h2>\n          </header>\n          <main>\n            <table>\n              {[\n                {\n                  action: 'Keyboard shortcuts help',\n                  keys: <kbd>?</kbd>,\n                },\n                {\n                  action: 'Next post',\n                  keys: <kbd>j</kbd>,\n                },\n                {\n                  action: 'Previous post',\n                  keys: <kbd>k</kbd>,\n                },\n                {\n                  action: 'Skip carousel to next post',\n                  keys: (\n                    <>\n                      <kbd>Shift</kbd> + <kbd>j</kbd>\n                    </>\n                  ),\n                },\n                {\n                  action: 'Skip carousel to previous post',\n                  keys: (\n                    <>\n                      <kbd>Shift</kbd> + <kbd>k</kbd>\n                    </>\n                  ),\n                },\n                {\n                  action: 'Load new posts',\n                  keys: <kbd>.</kbd>,\n                },\n                {\n                  action: 'Open post details',\n                  keys: (\n                    <>\n                      <kbd>Enter</kbd> or <kbd>o</kbd>\n                    </>\n                  ),\n                },\n                {\n                  action: (\n                    <>\n                      Expand content warning or\n                      <br />\n                      toggle expanded/collapsed thread\n                    </>\n                  ),\n                  keys: <kbd>x</kbd>,\n                },\n                {\n                  action: 'Close post or dialogs',\n                  keys: (\n                    <>\n                      <kbd>Esc</kbd> or <kbd>Backspace</kbd>\n                    </>\n                  ),\n                },\n                {\n                  action: 'Focus column in multi-column mode',\n                  keys: (\n                    <>\n                      <kbd>1</kbd> to <kbd>9</kbd>\n                    </>\n                  ),\n                },\n                {\n                  action: 'Compose new post',\n                  keys: <kbd>c</kbd>,\n                },\n                {\n                  action: 'Compose new post (new window)',\n                  className: 'insignificant',\n                  keys: (\n                    <>\n                      <kbd>Shift</kbd> + <kbd>c</kbd>\n                    </>\n                  ),\n                },\n                {\n                  action: 'Send post',\n                  keys: (\n                    <>\n                      <kbd>Ctrl</kbd> + <kbd>Enter</kbd> or <kbd>⌘</kbd> +{' '}\n                      <kbd>Enter</kbd>\n                    </>\n                  ),\n                },\n                {\n                  action: 'Search',\n                  keys: <kbd>/</kbd>,\n                },\n                {\n                  action: 'Reply',\n                  keys: <kbd>r</kbd>,\n                },\n                {\n                  action: 'Reply (new window)',\n                  className: 'insignificant',\n                  keys: (\n                    <>\n                      <kbd>Shift</kbd> + <kbd>r</kbd>\n                    </>\n                  ),\n                },\n                {\n                  action: 'Like (favourite)',\n                  keys: (\n                    <>\n                      <kbd>l</kbd> or <kbd>f</kbd>\n                    </>\n                  ),\n                },\n                {\n                  action: 'Boost',\n                  keys: (\n                    <>\n                      <kbd>Shift</kbd> + <kbd>b</kbd>\n                    </>\n                  ),\n                },\n                {\n                  action: 'Bookmark',\n                  keys: <kbd>d</kbd>,\n                },\n                {\n                  action: 'Toggle Cloak mode',\n                  keys: (\n                    <>\n                      <kbd>Shift</kbd> + <kbd>Alt</kbd> + <kbd>k</kbd>\n                    </>\n                  ),\n                },\n              ].map(({ action, className, keys }) => (\n                <tr key={action}>\n                  <th class={className}>{action}</th>\n                  <td>{keys}</td>\n                </tr>\n              ))}\n            </table>\n          </main>\n        </div>\n      </Modal>\n    )\n  );\n});\n","import { useState } from 'preact/hooks';\n\nimport { api } from '../utils/api';\n\nimport Icon from './icon';\nimport Loader from './loader';\n\nfunction FollowRequestButtons({ accountID, onChange }) {\n  const { masto } = api();\n  const [uiState, setUIState] = useState('default');\n  const [requestState, setRequestState] = useState(null); // accept, reject\n  const [relationship, setRelationship] = useState(null);\n\n  const hasRelationship = relationship !== null;\n\n  return (\n    <p class=\"follow-request-buttons\">\n      <button\n        type=\"button\"\n        disabled={uiState === 'loading' || hasRelationship}\n        onClick={() => {\n          setUIState('loading');\n          setRequestState('accept');\n          (async () => {\n            try {\n              const rel = await masto.v1.followRequests\n                .$select(accountID)\n                .authorize();\n              if (!rel?.followedBy) {\n                throw new Error('Follow request not accepted');\n              }\n              setRelationship(rel);\n              onChange();\n            } catch (e) {\n              console.error(e);\n            }\n            setUIState('default');\n          })();\n        }}\n      >\n        Accept\n      </button>{' '}\n      <button\n        type=\"button\"\n        disabled={uiState === 'loading' || hasRelationship}\n        class=\"light danger\"\n        onClick={() => {\n          setUIState('loading');\n          setRequestState('reject');\n          (async () => {\n            try {\n              const rel = await masto.v1.followRequests\n                .$select(accountID)\n                .reject();\n              if (rel?.followedBy) {\n                throw new Error('Follow request not rejected');\n              }\n              setRelationship(rel);\n              onChange();\n            } catch (e) {\n              console.error(e);\n              setUIState('default');\n            }\n          })();\n        }}\n      >\n        Reject\n      </button>\n      <span class=\"follow-request-states\">\n        {hasRelationship && requestState ? (\n          requestState === 'accept' ? (\n            <Icon icon=\"check-circle\" alt=\"Accepted\" class=\"follow-accepted\" />\n          ) : (\n            <Icon icon=\"x-circle\" alt=\"Rejected\" class=\"follow-rejected\" />\n          )\n        ) : (\n          <Loader hidden={uiState !== 'loading'} />\n        )}\n      </span>\n    </p>\n  );\n}\n\nexport default FollowRequestButtons;\n","import { Fragment } from 'preact';\nimport { memo } from 'preact/compat';\n\nimport shortenNumber from '../utils/shorten-number';\nimport states, { statusKey } from '../utils/states';\nimport store from '../utils/store';\nimport useTruncated from '../utils/useTruncated';\n\nimport Avatar from './avatar';\nimport CustomEmoji from './custom-emoji';\nimport FollowRequestButtons from './follow-request-buttons';\nimport Icon from './icon';\nimport Link from './link';\nimport NameText from './name-text';\nimport RelativeTime from './relative-time';\nimport Status from './status';\n\nconst NOTIFICATION_ICONS = {\n  mention: 'comment',\n  status: 'notification',\n  reblog: 'rocket',\n  follow: 'follow',\n  follow_request: 'follow-add',\n  favourite: 'heart',\n  poll: 'poll',\n  update: 'pencil',\n  'admin.signup': 'account-edit',\n  'admin.report': 'account-warning',\n  severed_relationships: 'heart-break',\n  emoji_reaction: 'emoji2',\n  'pleroma:emoji_reaction': 'emoji2',\n};\n\n/*\nNotification types\n==================\nmention = Someone mentioned you in their status\nstatus = Someone you enabled notifications for has posted a status\nreblog = Someone boosted one of your statuses\nfollow = Someone followed you\nfollow_request = Someone requested to follow you\nfavourite = Someone favourited one of your statuses\npoll = A poll you have voted in or created has ended\nupdate = A status you interacted with has been edited\nadmin.sign_up = Someone signed up (optionally sent to admins)\nadmin.report = A new report has been filed\n*/\n\nfunction emojiText(emoji, emoji_url) {\n  let url;\n  let staticUrl;\n  if (typeof emoji_url === 'string') {\n    url = emoji_url;\n  } else {\n    url = emoji_url?.url;\n    staticUrl = emoji_url?.staticUrl;\n  }\n  return url ? (\n    <>\n      reacted to your post with{' '}\n      <CustomEmoji url={url} staticUrl={staticUrl} alt={emoji} />\n    </>\n  ) : (\n    `reacted to your post with ${emoji}.`\n  );\n}\nconst contentText = {\n  mention: 'mentioned you in their post.',\n  status: 'published a post.',\n  reblog: 'boosted your post.',\n  'reblog+account': (count) => `boosted ${count} of your posts.`,\n  reblog_reply: 'boosted your reply.',\n  follow: 'followed you.',\n  follow_request: 'requested to follow you.',\n  favourite: 'liked your post.',\n  'favourite+account': (count) => `liked ${count} of your posts.`,\n  favourite_reply: 'liked your reply.',\n  poll: 'A poll you have voted in or created has ended.',\n  'poll-self': 'A poll you have created has ended.',\n  'poll-voted': 'A poll you have voted in has ended.',\n  update: 'A post you interacted with has been edited.',\n  'favourite+reblog': 'boosted & liked your post.',\n  'favourite+reblog+account': (count) =>\n    `boosted & liked ${count} of your posts.`,\n  'favourite+reblog_reply': 'boosted & liked your reply.',\n  'admin.sign_up': 'signed up.',\n  'admin.report': (targetAccount) => <>reported {targetAccount}</>,\n  severed_relationships: (name) => (\n    <>\n      Lost connections with <i>{name}</i>.\n    </>\n  ),\n  emoji_reaction: emojiText,\n  'pleroma:emoji_reaction': emojiText,\n};\n\n// account_suspension, domain_block, user_domain_block\nconst SEVERED_RELATIONSHIPS_TEXT = {\n  account_suspension: ({ from, targetName }) => (\n    <>\n      An admin from <i>{from}</i> has suspended <i>{targetName}</i>, which means\n      you can no longer receive updates from them or interact with them.\n    </>\n  ),\n  domain_block: ({ from, targetName, followersCount, followingCount }) => (\n    <>\n      An admin from <i>{from}</i> has blocked <i>{targetName}</i>. Affected\n      followers: {followersCount}, followings: {followingCount}.\n    </>\n  ),\n  user_domain_block: ({ targetName, followersCount, followingCount }) => (\n    <>\n      You have blocked <i>{targetName}</i>. Removed followers: {followersCount},\n      followings: {followingCount}.\n    </>\n  ),\n};\n\nconst AVATARS_LIMIT = 50;\n\nfunction Notification({\n  notification,\n  instance,\n  isStatic,\n  disableContextMenu,\n}) {\n  const { id, status, account, report, event, _accounts, _statuses } =\n    notification;\n  let { type } = notification;\n\n  // status = Attached when type of the notification is favourite, reblog, status, mention, poll, or update\n  const actualStatus = status?.reblog || status;\n  const actualStatusID = actualStatus?.id;\n\n  const currentAccount = store.session.get('currentAccount');\n  const isSelf = currentAccount === account?.id;\n  const isVoted = status?.poll?.voted;\n  const isReplyToOthers =\n    !!status?.inReplyToAccountId &&\n    status?.inReplyToAccountId !== currentAccount &&\n    status?.account?.id === currentAccount;\n\n  let favsCount = 0;\n  let reblogsCount = 0;\n  if (type === 'favourite+reblog') {\n    for (const account of _accounts) {\n      if (account._types?.includes('favourite')) {\n        favsCount++;\n      }\n      if (account._types?.includes('reblog')) {\n        reblogsCount++;\n      }\n    }\n    if (!reblogsCount && favsCount) type = 'favourite';\n    if (!favsCount && reblogsCount) type = 'reblog';\n  }\n\n  let text;\n  if (type === 'poll') {\n    text = contentText[isSelf ? 'poll-self' : isVoted ? 'poll-voted' : 'poll'];\n  } else if (\n    type === 'reblog' ||\n    type === 'favourite' ||\n    type === 'favourite+reblog'\n  ) {\n    if (_statuses?.length > 1) {\n      text = contentText[`${type}+account`];\n    } else if (isReplyToOthers) {\n      text = contentText[`${type}_reply`];\n    } else {\n      text = contentText[type];\n    }\n  } else if (contentText[type]) {\n    text = contentText[type];\n  } else {\n    // Anticipate unhandled notification types, possibly from Mastodon forks or non-Mastodon instances\n    // This surfaces the error to the user, hoping that users will report it\n    text = `[Unknown notification type: ${type}]`;\n  }\n\n  if (typeof text === 'function') {\n    const count = _statuses?.length || _accounts?.length;\n    if (type === 'admin.report') {\n      const targetAccount = report?.targetAccount;\n      if (targetAccount) {\n        text = text(<NameText account={targetAccount} showAvatar />);\n      }\n    } else if (type === 'severed_relationships') {\n      const targetName = event?.targetName;\n      if (targetName) {\n        text = text(targetName);\n      }\n    } else if (\n      (type === 'emoji_reaction' || type === 'pleroma:emoji_reaction') &&\n      notification.emoji\n    ) {\n      const emojiURL =\n        notification.emoji_url || // This is string\n        status?.emojis?.find?.(\n          (emoji) =>\n            emoji?.shortcode ===\n            notification.emoji.replace(/^:/, '').replace(/:$/, ''),\n        ); // Emoji object instead of string\n      text = text(notification.emoji, emojiURL);\n    } else if (count) {\n      text = text(count);\n    }\n  }\n\n  if (type === 'mention' && !status) {\n    // Could be deleted\n    return null;\n  }\n\n  const formattedCreatedAt =\n    notification.createdAt && new Date(notification.createdAt).toLocaleString();\n\n  const genericAccountsHeading =\n    {\n      'favourite+reblog': 'Boosted/Liked by…',\n      favourite: 'Liked by…',\n      reblog: 'Boosted by…',\n      follow: 'Followed by…',\n    }[type] || 'Accounts';\n  const handleOpenGenericAccounts = () => {\n    states.showGenericAccounts = {\n      heading: genericAccountsHeading,\n      accounts: _accounts,\n      showReactions: type === 'favourite+reblog',\n      excludeRelationshipAttrs: type === 'follow' ? ['followedBy'] : [],\n      postID: statusKey(actualStatusID, instance),\n    };\n  };\n\n  console.debug('RENDER Notification', notification.id);\n\n  return (\n    <div\n      class={`notification notification-${type}`}\n      data-notification-id={id}\n      tabIndex=\"0\"\n    >\n      <div\n        class={`notification-type notification-${type}`}\n        title={formattedCreatedAt}\n      >\n        {type === 'favourite+reblog' ? (\n          <>\n            <Icon icon=\"rocket\" size=\"xl\" alt={type} class=\"reblog-icon\" />\n            <Icon icon=\"heart\" size=\"xl\" alt={type} class=\"favourite-icon\" />\n          </>\n        ) : (\n          <Icon\n            icon={NOTIFICATION_ICONS[type] || 'notification'}\n            size=\"xl\"\n            alt={type}\n          />\n        )}\n      </div>\n      <div class=\"notification-content\">\n        {type !== 'mention' && (\n          <>\n            <p>\n              {!/poll|update/i.test(type) && (\n                <>\n                  {_accounts?.length > 1 ? (\n                    <>\n                      <b tabIndex=\"0\" onClick={handleOpenGenericAccounts}>\n                        <span title={_accounts.length}>\n                          {shortenNumber(_accounts.length)}\n                        </span>{' '}\n                        people\n                      </b>{' '}\n                    </>\n                  ) : (\n                    account && (\n                      <>\n                        <NameText account={account} showAvatar />{' '}\n                      </>\n                    )\n                  )}\n                </>\n              )}\n              {text}\n              {type === 'mention' && (\n                <span class=\"insignificant\">\n                  {' '}\n                  •{' '}\n                  <RelativeTime\n                    datetime={notification.createdAt}\n                    format=\"micro\"\n                  />\n                </span>\n              )}\n            </p>\n            {type === 'follow_request' && (\n              <FollowRequestButtons accountID={account.id} />\n            )}\n            {type === 'severed_relationships' && (\n              <div>\n                {SEVERED_RELATIONSHIPS_TEXT[event.type]({\n                  from: instance,\n                  ...event,\n                })}\n                <br />\n                <a\n                  href={`https://${instance}/severed_relationships`}\n                  target=\"_blank\"\n                  rel=\"noopener noreferrer\"\n                >\n                  Learn more <Icon icon=\"external\" size=\"s\" />\n                </a>\n                .\n              </div>\n            )}\n          </>\n        )}\n        {_accounts?.length > 1 && (\n          <p class=\"avatars-stack\">\n            {_accounts.slice(0, AVATARS_LIMIT).map((account) => (\n              <Fragment key={account.id}>\n                <a\n                  key={account.id}\n                  href={account.url}\n                  rel=\"noopener noreferrer\"\n                  class=\"account-avatar-stack\"\n                  onClick={(e) => {\n                    e.preventDefault();\n                    states.showAccount = account;\n                  }}\n                >\n                  <Avatar\n                    url={account.avatarStatic}\n                    size={\n                      _accounts.length <= 10\n                        ? 'xxl'\n                        : _accounts.length < 20\n                        ? 'xl'\n                        : _accounts.length < 30\n                        ? 'l'\n                        : _accounts.length < 40\n                        ? 'm'\n                        : 's' // My god, this person is popular!\n                    }\n                    key={account.id}\n                    alt={`${account.displayName} @${account.acct}`}\n                    squircle={account?.bot}\n                  />\n                  {type === 'favourite+reblog' && (\n                    <div class=\"account-sub-icons\">\n                      {account._types.map((type) => (\n                        <Icon\n                          icon={NOTIFICATION_ICONS[type]}\n                          size=\"s\"\n                          class={`${type}-icon`}\n                        />\n                      ))}\n                    </div>\n                  )}\n                </a>{' '}\n              </Fragment>\n            ))}\n            <button\n              type=\"button\"\n              class=\"small plain\"\n              onClick={handleOpenGenericAccounts}\n            >\n              {_accounts.length > AVATARS_LIMIT &&\n                `+${_accounts.length - AVATARS_LIMIT}`}\n              <Icon icon=\"chevron-down\" />\n            </button>\n          </p>\n        )}\n        {_statuses?.length > 1 && (\n          <ul class=\"notification-group-statuses\">\n            {_statuses.map((status) => (\n              <li key={status.id}>\n                <TruncatedLink\n                  class={`status-link status-type-${type}`}\n                  to={\n                    instance ? `/${instance}/s/${status.id}` : `/s/${status.id}`\n                  }\n                >\n                  <Status\n                    status={status}\n                    size=\"s\"\n                    previewMode\n                    allowContextMenu\n                  />\n                </TruncatedLink>\n              </li>\n            ))}\n          </ul>\n        )}\n        {status && (!_statuses?.length || _statuses?.length <= 1) && (\n          <TruncatedLink\n            class={`status-link status-type-${type}`}\n            to={\n              instance\n                ? `/${instance}/s/${actualStatusID}`\n                : `/s/${actualStatusID}`\n            }\n            onContextMenu={\n              !disableContextMenu\n                ? (e) => {\n                    const post = e.target.querySelector('.status');\n                    if (post) {\n                      // Fire a custom event to open the context menu\n                      if (e.metaKey) return;\n                      e.preventDefault();\n                      post.dispatchEvent(\n                        new MouseEvent('contextmenu', {\n                          clientX: e.clientX,\n                          clientY: e.clientY,\n                        }),\n                      );\n                    }\n                  }\n                : undefined\n            }\n          >\n            {isStatic ? (\n              <Status\n                status={actualStatus}\n                size=\"s\"\n                readOnly\n                allowContextMenu\n              />\n            ) : (\n              <Status\n                statusID={actualStatusID}\n                size=\"s\"\n                readOnly\n                allowContextMenu\n              />\n            )}\n          </TruncatedLink>\n        )}\n      </div>\n    </div>\n  );\n}\n\nfunction TruncatedLink(props) {\n  const ref = useTruncated();\n  return <Link {...props} data-read-more=\"Read more →\" ref={ref} />;\n}\n\nexport default memo(Notification, (oldProps, newProps) => {\n  return oldProps.notification?.id === newProps.notification?.id;\n});\n","import { memo } from 'preact/compat';\nimport { useLayoutEffect, useState } from 'preact/hooks';\nimport { useSnapshot } from 'valtio';\n\nimport { api } from '../utils/api';\nimport states from '../utils/states';\nimport {\n  getAccountByAccessToken,\n  getCurrentAccount,\n} from '../utils/store-utils';\nimport usePageVisibility from '../utils/usePageVisibility';\n\nimport Icon from './icon';\nimport Link from './link';\nimport Modal from './modal';\nimport Notification from './notification';\n\n{\n  if ('serviceWorker' in navigator) {\n    console.log('👂👂👂 Listen to message');\n    navigator.serviceWorker.addEventListener('message', (event) => {\n      console.log('💥💥💥 Message event', event);\n      const { type, id, accessToken } = event?.data || {};\n      if (type === 'notification') {\n        states.routeNotification = {\n          id,\n          accessToken,\n        };\n      }\n    });\n  }\n}\n\nexport default memo(function NotificationService() {\n  if (!('serviceWorker' in navigator)) return null;\n\n  const snapStates = useSnapshot(states);\n  const { routeNotification } = snapStates;\n\n  console.log('🛎️ Notification service', routeNotification);\n\n  const { id, accessToken } = routeNotification || {};\n  const [showNotificationSheet, setShowNotificationSheet] = useState(false);\n\n  useLayoutEffect(() => {\n    if (!id || !accessToken) return;\n    const { instance: currentInstance } = api();\n    const { masto, instance } = api({\n      accessToken,\n    });\n    console.log('API', { accessToken, currentInstance, instance });\n    const sameInstance = currentInstance === instance;\n    const account = accessToken\n      ? getAccountByAccessToken(accessToken)\n      : getCurrentAccount();\n    (async () => {\n      const notification = await masto.v1.notifications.$select(id).fetch();\n      if (notification && account) {\n        console.log('🛎️ Notification', { id, notification, account });\n        const accountInstance = account.instanceURL;\n        const { type, status, account: notificationAccount } = notification;\n        const hasModal = !!document.querySelector('#modal-container > *');\n        const isFollow = type === 'follow' && !!notificationAccount?.id;\n        const hasAccount = !!notificationAccount?.id;\n        const hasStatus = !!status?.id;\n        if (isFollow && sameInstance) {\n          // Show account sheet, can handle different instances\n          states.showAccount = {\n            account: notificationAccount,\n            instance: accountInstance,\n          };\n        } else if (hasModal || !sameInstance || (hasAccount && hasStatus)) {\n          // Show sheet of notification, if\n          // - there is a modal open\n          // - the notification is from another instance\n          // - the notification has both account and status, gives choice for users to go to account or status\n          setShowNotificationSheet({\n            id,\n            account,\n            notification,\n            sameInstance,\n          });\n        } else {\n          if (hasStatus) {\n            // Go to status page\n            location.hash = `/${currentInstance}/s/${status.id}`;\n          } else if (isFollow) {\n            // Go to profile page\n            location.hash = `/${currentInstance}/a/${notificationAccount.id}`;\n          } else {\n            // Go to notifications page\n            location.hash = '/notifications';\n          }\n        }\n      } else {\n        console.warn('🛎️ Notification not found', id);\n      }\n    })();\n  }, [id, accessToken]);\n\n  // useLayoutEffect(() => {\n  //   // Listen to message from service worker\n  //   const handleMessage = (event) => {\n  //     console.log('💥💥💥 Message event', event);\n  //     const { type, id, accessToken } = event?.data || {};\n  //     if (type === 'notification') {\n  //       states.routeNotification = {\n  //         id,\n  //         accessToken,\n  //       };\n  //     }\n  //   };\n  //   console.log('👂👂👂 Listen to message');\n  //   navigator.serviceWorker.addEventListener('message', handleMessage);\n  //   return () => {\n  //     console.log('👂👂👂 Remove listen to message');\n  //     navigator.serviceWorker.removeEventListener('message', handleMessage);\n  //   };\n  // }, []);\n\n  useLayoutEffect(() => {\n    if (navigator?.clearAppBadge) {\n      navigator.clearAppBadge();\n    }\n  }, []);\n  usePageVisibility((visible) => {\n    if (visible && navigator?.clearAppBadge) {\n      console.log('🔰 Clear app badge');\n      navigator.clearAppBadge();\n    }\n  });\n\n  const onClose = () => {\n    setShowNotificationSheet(false);\n    states.routeNotification = null;\n\n    // If url is #/notifications?id=123, go to #/notifications\n    if (/\\/notifications\\?id=/i.test(location.hash)) {\n      location.hash = '/notifications';\n    }\n  };\n\n  if (showNotificationSheet) {\n    const { id, account, notification, sameInstance } = showNotificationSheet;\n    return (\n      <Modal\n        onClick={(e) => {\n          if (e.target === e.currentTarget) {\n            onClose();\n          }\n        }}\n      >\n        <div class=\"sheet\" tabIndex=\"-1\">\n          <button type=\"button\" class=\"sheet-close\" onClick={onClose}>\n            <Icon icon=\"x\" />\n          </button>\n          <header>\n            <b>Notification</b>\n          </header>\n          <main>\n            {!sameInstance && (\n              <p>This notification is from your other account.</p>\n            )}\n            <div\n              class=\"notification-peek\"\n              // style={{\n              //   pointerEvents: sameInstance ? '' : 'none',\n              // }}\n              onClick={(e) => {\n                const { target } = e;\n                // If button or links\n                if (e.target.tagName === 'BUTTON' || e.target.tagName === 'A') {\n                  onClose();\n                }\n              }}\n            >\n              <Notification\n                instance={account.instanceURL}\n                notification={notification}\n                isStatic\n              />\n            </div>\n            <div\n              style={{\n                textAlign: 'end',\n              }}\n            >\n              <Link to=\"/notifications\" class=\"button light\" onClick={onClose}>\n                <span>View all notifications</span> <Icon icon=\"arrow-right\" />\n              </Link>\n            </div>\n          </main>\n        </div>\n      </Modal>\n    );\n  }\n\n  return null;\n});\n","import { forwardRef } from 'preact/compat';\nimport { useImperativeHandle, useRef, useState } from 'preact/hooks';\nimport { useSearchParams } from 'react-router-dom';\n\nimport { api } from '../utils/api';\n\nimport Icon from './icon';\nimport Link from './link';\n\nconst SearchForm = forwardRef((props, ref) => {\n  const { instance } = api();\n  const [searchParams, setSearchParams] = useSearchParams();\n  const [searchMenuOpen, setSearchMenuOpen] = useState(false);\n  const [query, setQuery] = useState(searchParams.get('q') || '');\n  const type = searchParams.get('type');\n  const formRef = useRef(null);\n\n  const searchFieldRef = useRef(null);\n  useImperativeHandle(ref, () => ({\n    setValue: (value) => {\n      setQuery(value);\n    },\n    focus: () => {\n      searchFieldRef.current.focus();\n    },\n    select: () => {\n      searchFieldRef.current.select();\n    },\n    blur: () => {\n      searchFieldRef.current.blur();\n    },\n  }));\n\n  return (\n    <form\n      ref={formRef}\n      class=\"search-popover-container\"\n      onSubmit={(e) => {\n        e.preventDefault();\n\n        const isSearchPage = /\\/search/.test(location.hash);\n        if (isSearchPage) {\n          if (query) {\n            const params = {\n              q: query,\n            };\n            if (type) params.type = type; // Preserve type\n            setSearchParams(params);\n          } else {\n            setSearchParams({});\n          }\n        } else {\n          if (query) {\n            location.hash = `/search?q=${encodeURIComponent(query)}${\n              type ? `&type=${type}` : ''\n            }`;\n          } else {\n            location.hash = `/search`;\n          }\n        }\n\n        props?.onSubmit?.(e);\n      }}\n    >\n      <input\n        ref={searchFieldRef}\n        value={query}\n        name=\"q\"\n        type=\"search\"\n        // autofocus\n        placeholder=\"Search\"\n        dir=\"auto\"\n        autocomplete=\"off\"\n        autocorrect=\"off\"\n        autocapitalize=\"off\"\n        spellCheck=\"false\"\n        onSearch={(e) => {\n          if (!e.target.value) {\n            setSearchParams({});\n          }\n        }}\n        onInput={(e) => {\n          setQuery(e.target.value);\n          setSearchMenuOpen(true);\n        }}\n        onFocus={() => {\n          setSearchMenuOpen(true);\n          formRef.current\n            ?.querySelector('.search-popover-item')\n            ?.classList.add('focus');\n        }}\n        onBlur={() => {\n          setTimeout(() => {\n            setSearchMenuOpen(false);\n          }, 100);\n          formRef.current\n            ?.querySelector('.search-popover-item.focus')\n            ?.classList.remove('focus');\n        }}\n        onKeyDown={(e) => {\n          const { key } = e;\n          switch (key) {\n            case 'Escape':\n              setSearchMenuOpen(false);\n              break;\n            case 'Down':\n            case 'ArrowDown':\n              e.preventDefault();\n              if (searchMenuOpen) {\n                const focusItem = formRef.current.querySelector(\n                  '.search-popover-item.focus',\n                );\n                if (focusItem) {\n                  let nextItem = focusItem.nextElementSibling;\n                  while (nextItem && nextItem.hidden) {\n                    nextItem = nextItem.nextElementSibling;\n                  }\n                  if (nextItem) {\n                    nextItem.classList.add('focus');\n                    const siblings = Array.from(\n                      nextItem.parentElement.children,\n                    ).filter((el) => el !== nextItem);\n                    siblings.forEach((el) => {\n                      el.classList.remove('focus');\n                    });\n                  }\n                } else {\n                  const firstItem = formRef.current.querySelector(\n                    '.search-popover-item',\n                  );\n                  if (firstItem) {\n                    firstItem.classList.add('focus');\n                  }\n                }\n              }\n              break;\n            case 'Up':\n            case 'ArrowUp':\n              e.preventDefault();\n              if (searchMenuOpen) {\n                const focusItem = document.querySelector(\n                  '.search-popover-item.focus',\n                );\n                if (focusItem) {\n                  let prevItem = focusItem.previousElementSibling;\n                  while (prevItem && prevItem.hidden) {\n                    prevItem = prevItem.previousElementSibling;\n                  }\n                  if (prevItem) {\n                    prevItem.classList.add('focus');\n                    const siblings = Array.from(\n                      prevItem.parentElement.children,\n                    ).filter((el) => el !== prevItem);\n                    siblings.forEach((el) => {\n                      el.classList.remove('focus');\n                    });\n                  }\n                } else {\n                  const lastItem = document.querySelector(\n                    '.search-popover-item:last-child',\n                  );\n                  if (lastItem) {\n                    lastItem.classList.add('focus');\n                  }\n                }\n              }\n              break;\n            case 'Enter':\n              if (searchMenuOpen) {\n                const focusItem = document.querySelector(\n                  '.search-popover-item.focus',\n                );\n                if (focusItem) {\n                  e.preventDefault();\n                  focusItem.click();\n                }\n                setSearchMenuOpen(false);\n                props?.onSubmit?.(e);\n              }\n              break;\n          }\n        }}\n      />\n      <div class=\"search-popover\" hidden={!searchMenuOpen || !query}>\n        {/* {!!query && (\n          <Link\n            to={`/search?q=${encodeURIComponent(query)}`}\n            class=\"search-popover-item focus\"\n            onClick={(e) => {\n              props?.onSubmit?.(e);\n            }}\n          >\n            <Icon icon=\"search\" />\n            <span>{query}</span>\n          </Link>\n        )} */}\n        {!!query &&\n          [\n            {\n              label: (\n                <>\n                  {query}{' '}\n                  <small class=\"insignificant\">\n                    ‒ accounts, hashtags &amp; posts\n                  </small>\n                </>\n              ),\n              to: `/search?q=${encodeURIComponent(query)}`,\n              top: !type && !/\\s/.test(query),\n              hidden: !!type,\n            },\n            {\n              label: (\n                <>\n                  Posts with <q>{query}</q>\n                </>\n              ),\n              to: `/search?q=${encodeURIComponent(query)}&type=statuses`,\n              hidden: /^https?:/.test(query),\n              top: /\\s/.test(query),\n              icon: 'document',\n              queryType: 'statuses',\n            },\n            {\n              label: (\n                <>\n                  Posts tagged with <mark>#{query.replace(/^#/, '')}</mark>\n                </>\n              ),\n              to: `/${instance}/t/${query.replace(/^#/, '')}`,\n              hidden:\n                /^@/.test(query) || /^https?:/.test(query) || /\\s/.test(query),\n              top: /^#/.test(query),\n              type: 'link',\n              icon: 'hashtag',\n              queryType: 'hashtags',\n            },\n            {\n              label: (\n                <>\n                  Look up <mark>{query}</mark>\n                </>\n              ),\n              to: `/${query}`,\n              hidden: !/^https?:/.test(query),\n              top: /^https?:/.test(query),\n              type: 'link',\n            },\n            {\n              label: (\n                <>\n                  Accounts with <q>{query}</q>\n                </>\n              ),\n              to: `/search?q=${encodeURIComponent(query)}&type=accounts`,\n              icon: 'group',\n              queryType: 'accounts',\n            },\n          ]\n            .sort((a, b) => {\n              if (type) {\n                if (a.queryType === type) return -1;\n                if (b.queryType === type) return 1;\n              }\n              if (a.top && !b.top) return -1;\n              if (!a.top && b.top) return 1;\n              return 0;\n            })\n            .filter(({ hidden }) => !hidden)\n            .map(({ label, to, icon, type }, i) => (\n              <Link\n                to={to}\n                class={`search-popover-item ${i === 0 ? 'focus' : ''}`}\n                // hidden={hidden}\n                onClick={(e) => {\n                  props?.onSubmit?.(e);\n                }}\n              >\n                <Icon\n                  icon={icon || (type === 'link' ? 'arrow-right' : 'search')}\n                  class=\"more-insignificant\"\n                />\n                <span>{label}</span>{' '}\n              </Link>\n            ))}\n      </div>\n    </form>\n  );\n});\n\nexport default SearchForm;\n","import './search-command.css';\n\nimport { memo } from 'preact/compat';\nimport { useRef, useState } from 'preact/hooks';\nimport { useHotkeys } from 'react-hotkeys-hook';\n\nimport SearchForm from './search-form';\n\nexport default memo(function SearchCommand({ onClose = () => {} }) {\n  const [showSearch, setShowSearch] = useState(false);\n  const searchFormRef = useRef(null);\n\n  useHotkeys(\n    ['Slash', '/'],\n    (e) => {\n      setShowSearch(true);\n      setTimeout(() => {\n        searchFormRef.current?.focus?.();\n        searchFormRef.current?.select?.();\n      }, 0);\n    },\n    {\n      preventDefault: true,\n      ignoreEventWhen: (e) => {\n        const isSearchPage = /\\/search/.test(location.hash);\n        const hasModal = !!document.querySelector('#modal-container > *');\n        return isSearchPage || hasModal;\n      },\n    },\n  );\n\n  const closeSearch = () => {\n    setShowSearch(false);\n    onClose();\n  };\n\n  useHotkeys(\n    'esc',\n    (e) => {\n      searchFormRef.current?.blur?.();\n      closeSearch();\n    },\n    {\n      enabled: showSearch,\n      enableOnFormTags: true,\n      preventDefault: true,\n    },\n  );\n\n  return (\n    <div\n      id=\"search-command-container\"\n      hidden={!showSearch}\n      onClick={(e) => {\n        console.log(e);\n        if (e.target === e.currentTarget) {\n          closeSearch();\n        }\n      }}\n    >\n      <SearchForm\n        ref={searchFormRef}\n        onSubmit={() => {\n          closeSearch();\n        }}\n      />\n    </div>\n  );\n});\n","export default \"data:image/svg+xml,%3csvg%20xmlns='http://www.w3.org/2000/svg'%20fill='none'%20viewBox='0%200%2084%2062'%3e%3crect%20width='64'%20height='48'%20x='18'%20y='2'%20fill='%23fff'%20stroke='%23999'%20stroke-width='3'%20rx='4'/%3e%3crect%20width='32'%20height='48'%20x='2'%20y='12'%20fill='%23fff'%20stroke='%23999'%20stroke-width='3'%20rx='4'/%3e%3cpath%20fill='%234169E1'%20d='M14%2052a4%204%200%201%201-8%200%204%204%200%200%201%208%200Zm64-42a4%204%200%201%201-8%200%204%204%200%200%201%208%200Z'/%3e%3c/svg%3e\"","export default \"data:image/svg+xml,%3csvg%20xmlns='http://www.w3.org/2000/svg'%20fill='none'%20viewBox='0%200%2082%2062'%3e%3crect%20width='78'%20height='58'%20x='2'%20y='2'%20fill='%23999'%20fill-opacity='.3'%20stroke='%23999'%20stroke-width='3'%20rx='4'/%3e%3crect%20width='18'%20height='46'%20x='8'%20y='8'%20fill='%23fff'%20stroke='%23999'%20stroke-width='2'%20rx='1'/%3e%3crect%20width='18'%20height='46'%20x='32'%20y='8'%20fill='%23fff'%20stroke='%23999'%20stroke-width='2'%20rx='1'/%3e%3crect%20width='18'%20height='46'%20x='56'%20y='8'%20fill='%23fff'%20stroke='%23999'%20stroke-width='2'%20rx='1'/%3e%3c/svg%3e\"","export default \"data:image/svg+xml,%3csvg%20xmlns='http://www.w3.org/2000/svg'%20fill='none'%20viewBox='0%200%2084%2062'%3e%3crect%20width='64'%20height='48'%20x='18'%20y='2'%20fill='%23fff'%20stroke='%23999'%20stroke-width='3'%20rx='4'/%3e%3cpath%20fill='%23999'%20fill-opacity='.3'%20d='M19%203h62v10H19z'/%3e%3cpath%20stroke='%234169E1'%20stroke-width='2'%20d='M43%208a2%202%200%201%201-4%200%202%202%200%200%201%204%200Z'/%3e%3cpath%20stroke='%23999'%20stroke-width='2'%20d='M52%208a2%202%200%201%201-4%200%202%202%200%200%201%204%200Zm9%200a2%202%200%201%201-4%200%202%202%200%200%201%204%200Z'/%3e%3crect%20width='32'%20height='48'%20x='2'%20y='12'%20fill='%23fff'%20stroke='%23999'%20stroke-width='3'%20rx='4'/%3e%3cpath%20fill='%23999'%20fill-opacity='.3'%20d='M3%2049h30v10H3z'/%3e%3cpath%20stroke='%234169E1'%20stroke-width='2'%20d='M11%2054a2%202%200%201%201-4%200%202%202%200%200%201%204%200Z'/%3e%3cpath%20stroke='%23999'%20stroke-width='2'%20d='M20%2054a2%202%200%201%201-4%200%202%202%200%200%201%204%200Zm9%200a2%202%200%201%201-4%200%202%202%200%200%201%204%200Z'/%3e%3c/svg%3e\"","import { api } from '../utils/api';\nimport store from '../utils/store';\n\nconst LIMIT = 200;\nconst MAX_FETCH = 10;\n\nexport async function fetchFollowedTags() {\n  const { masto } = api();\n  const iterator = masto.v1.followedTags.list({\n    limit: LIMIT,\n  });\n  const tags = [];\n  let fetchCount = 0;\n  do {\n    const { value, done } = await iterator.next();\n    if (done || value?.length === 0) break;\n    tags.push(...value);\n    fetchCount++;\n  } while (fetchCount < MAX_FETCH);\n  tags.sort((a, b) => a.name.localeCompare(b.name));\n  console.log(tags);\n\n  if (tags.length) {\n    setTimeout(() => {\n      // Save to local storage, with saved timestamp\n      store.account.set('followedTags', {\n        tags,\n        updatedAt: Date.now(),\n      });\n    }, 1);\n  }\n\n  return tags;\n}\n\nconst MAX_AGE = 24 * 60 * 60 * 1000; // 1 day\nexport async function getFollowedTags() {\n  try {\n    const { tags, updatedAt } = store.account.get('followedTags') || {};\n    if (!tags?.length) return await fetchFollowedTags();\n    if (Date.now() - updatedAt > MAX_AGE) {\n      // Stale-while-revalidate\n      fetchFollowedTags();\n      return tags;\n    }\n    return tags;\n  } catch (e) {\n    return [];\n  }\n}\n\nconst fauxDiv = document.createElement('div');\nexport const extractTagsFromStatus = (content) => {\n  if (!content) return [];\n  if (content.indexOf('#') === -1) return [];\n  fauxDiv.innerHTML = content;\n  const hashtagLinks = fauxDiv.querySelectorAll('a.hashtag');\n  if (!hashtagLinks.length) return [];\n  return Array.from(hashtagLinks).map((a) =>\n    a.innerText.trim().replace(/^[^#]*#+/, ''),\n  );\n};\n","import { api } from './api';\nimport pmem from './pmem';\nimport store from './store';\n\nconst FETCH_MAX_AGE = 1000 * 60; // 1 minute\nconst MAX_AGE = 24 * 60 * 60 * 1000; // 1 day\n\nexport const fetchLists = pmem(\n  async () => {\n    const { masto } = api();\n    const lists = await masto.v1.lists.list();\n    lists.sort((a, b) => a.title.localeCompare(b.title));\n\n    if (lists.length) {\n      setTimeout(() => {\n        // Save to local storage, with saved timestamp\n        store.account.set('lists', {\n          lists,\n          updatedAt: Date.now(),\n        });\n      }, 1);\n    }\n\n    return lists;\n  },\n  {\n    maxAge: FETCH_MAX_AGE,\n  },\n);\n\nexport async function getLists() {\n  try {\n    const { lists, updatedAt } = store.account.get('lists') || {};\n    if (!lists?.length) return await fetchLists();\n    if (Date.now() - updatedAt > MAX_AGE) {\n      // Stale-while-revalidate\n      fetchLists();\n      return lists;\n    }\n    return lists;\n  } catch (e) {\n    return [];\n  }\n}\n\nexport const fetchList = pmem(\n  (id) => {\n    const { masto } = api();\n    return masto.v1.lists.$select(id).fetch();\n  },\n  {\n    maxAge: FETCH_MAX_AGE,\n  },\n);\n\nexport async function getList(id) {\n  const { lists } = store.account.get('lists') || {};\n  console.log({ lists });\n  if (lists?.length) {\n    const theList = lists.find((l) => l.id === id);\n    if (theList) return theList;\n  }\n  try {\n    return fetchList(id);\n  } catch (e) {\n    return null;\n  }\n}\n\nexport async function getListTitle(id) {\n  const list = await getList(id);\n  return list?.title || '';\n}\n\nexport function addListStore(list) {\n  const { lists } = store.account.get('lists') || {};\n  if (lists?.length) {\n    lists.push(list);\n    lists.sort((a, b) => a.title.localeCompare(b.title));\n    store.account.set('lists', {\n      lists,\n      updatedAt: Date.now(),\n    });\n  }\n}\n\nexport function updateListStore(list) {\n  const { lists } = store.account.get('lists') || {};\n  if (lists?.length) {\n    const index = lists.findIndex((l) => l.id === list.id);\n    if (index !== -1) {\n      lists[index] = list;\n      lists.sort((a, b) => a.title.localeCompare(b.title));\n      store.account.set('lists', {\n        lists,\n        updatedAt: Date.now(),\n      });\n    }\n  }\n}\n\nexport function deleteListStore(listID) {\n  const { lists } = store.account.get('lists') || {};\n  if (lists?.length) {\n    const index = lists.findIndex((l) => l.id === listID);\n    if (index !== -1) {\n      lists.splice(index, 1);\n      store.account.set('lists', {\n        lists,\n        updatedAt: Date.now(),\n      });\n    }\n  }\n}\n","import { useEffect, useState } from 'preact/hooks';\n\nfunction AsyncText({ children }) {\n  if (typeof children === 'string') return children;\n  const [text, setText] = useState('');\n  useEffect(() => {\n    Promise.resolve(children).then(setText);\n  }, [children]);\n  return text;\n}\n\nexport default AsyncText;\n","import './shortcuts-settings.css';\n\nimport { useAutoAnimate } from '@formkit/auto-animate/preact';\nimport {\n  compressToEncodedURIComponent,\n  decompressFromEncodedURIComponent,\n} from 'lz-string';\nimport { useEffect, useMemo, useRef, useState } from 'preact/hooks';\nimport { useSnapshot } from 'valtio';\n\nimport floatingButtonUrl from '../assets/floating-button.svg';\nimport multiColumnUrl from '../assets/multi-column.svg';\nimport tabMenuBarUrl from '../assets/tab-menu-bar.svg';\n\nimport { api } from '../utils/api';\nimport { fetchFollowedTags } from '../utils/followed-tags';\nimport { getLists, getListTitle } from '../utils/lists';\nimport pmem from '../utils/pmem';\nimport showToast from '../utils/show-toast';\nimport states from '../utils/states';\nimport store from '../utils/store';\n\nimport AsyncText from './AsyncText';\nimport Icon from './icon';\nimport MenuConfirm from './menu-confirm';\nimport Modal from './modal';\n\nexport const SHORTCUTS_LIMIT = 9;\n\nconst TYPES = [\n  'following',\n  'mentions',\n  'notifications',\n  'list',\n  'public',\n  'trending',\n  'search',\n  'hashtag',\n  'bookmarks',\n  'favourites',\n  // NOTE: Hide for now\n  // 'account-statuses', // Need @acct search first\n];\nconst TYPE_TEXT = {\n  following: 'Home / Following',\n  notifications: 'Notifications',\n  list: 'Lists',\n  public: 'Public (Local / Federated)',\n  search: 'Search',\n  'account-statuses': 'Account',\n  bookmarks: 'Bookmarks',\n  favourites: 'Likes',\n  hashtag: 'Hashtag',\n  trending: 'Trending',\n  mentions: 'Mentions',\n};\nconst TYPE_PARAMS = {\n  list: [\n    {\n      text: 'List ID',\n      name: 'id',\n      notRequired: true,\n    },\n  ],\n  public: [\n    {\n      text: 'Local only',\n      name: 'local',\n      type: 'checkbox',\n    },\n    {\n      text: 'Instance',\n      name: 'instance',\n      type: 'text',\n      placeholder: 'Optional, e.g. mastodon.social',\n      notRequired: true,\n    },\n  ],\n  trending: [\n    {\n      text: 'Instance',\n      name: 'instance',\n      type: 'text',\n      placeholder: 'Optional, e.g. mastodon.social',\n      notRequired: true,\n    },\n  ],\n  search: [\n    {\n      text: 'Search term',\n      name: 'query',\n      type: 'text',\n      placeholder: 'Optional, unless for multi-column mode',\n      notRequired: true,\n    },\n  ],\n  'account-statuses': [\n    {\n      text: '@',\n      name: 'id',\n      type: 'text',\n      placeholder: 'cheeaun@mastodon.social',\n    },\n  ],\n  hashtag: [\n    {\n      text: '#',\n      name: 'hashtag',\n      type: 'text',\n      placeholder: 'e.g. PixelArt (Max 5, space-separated)',\n      pattern: '[^#]+',\n    },\n    {\n      text: 'Media only',\n      name: 'media',\n      type: 'checkbox',\n    },\n    {\n      text: 'Instance',\n      name: 'instance',\n      type: 'text',\n      placeholder: 'Optional, e.g. mastodon.social',\n      notRequired: true,\n    },\n  ],\n};\nconst fetchAccountTitle = pmem(async ({ id }) => {\n  const account = await api().masto.v1.accounts.$select(id).fetch();\n  return account.username || account.acct || account.displayName;\n});\nexport const SHORTCUTS_META = {\n  following: {\n    id: 'home',\n    title: (_, index) => (index === 0 ? 'Home' : 'Following'),\n    path: '/',\n    icon: 'home',\n  },\n  mentions: {\n    id: 'mentions',\n    title: 'Mentions',\n    path: '/mentions',\n    icon: 'at',\n  },\n  notifications: {\n    id: 'notifications',\n    title: 'Notifications',\n    path: '/notifications',\n    icon: 'notification',\n  },\n  list: {\n    id: ({ id }) => (id ? 'list' : 'lists'),\n    title: ({ id }) => (id ? getListTitle(id) : 'Lists'),\n    path: ({ id }) => (id ? `/l/${id}` : '/l'),\n    icon: 'list',\n    excludeViewMode: ({ id }) => (!id ? ['multi-column'] : []),\n  },\n  public: {\n    id: 'public',\n    title: ({ local }) => (local ? 'Local' : 'Federated'),\n    subtitle: ({ instance }) => instance || api().instance,\n    path: ({ local, instance }) => `/${instance}/p${local ? '/l' : ''}`,\n    icon: ({ local }) => (local ? 'building' : 'earth'),\n  },\n  trending: {\n    id: 'trending',\n    title: 'Trending',\n    subtitle: ({ instance }) => instance || api().instance,\n    path: ({ instance }) => `/${instance}/trending`,\n    icon: 'chart',\n  },\n  search: {\n    id: 'search',\n    title: ({ query }) => (query ? `“${query}”` : 'Search'),\n    path: ({ query }) =>\n      query\n        ? `/search?q=${encodeURIComponent(query)}&type=statuses`\n        : '/search',\n    icon: 'search',\n    excludeViewMode: ({ query }) => (!query ? ['multi-column'] : []),\n  },\n  'account-statuses': {\n    id: 'account-statuses',\n    title: fetchAccountTitle,\n    path: ({ id }) => `/a/${id}`,\n    icon: 'user',\n  },\n  bookmarks: {\n    id: 'bookmarks',\n    title: 'Bookmarks',\n    path: '/b',\n    icon: 'bookmark',\n  },\n  favourites: {\n    id: 'favourites',\n    title: 'Likes',\n    path: '/f',\n    icon: 'heart',\n  },\n  hashtag: {\n    id: 'hashtag',\n    title: ({ hashtag }) => hashtag,\n    subtitle: ({ instance }) => instance || api().instance,\n    path: ({ hashtag, instance, media }) =>\n      `${instance ? `/${instance}` : ''}/t/${hashtag.split(/\\s+/).join('+')}${\n        media ? '?media=1' : ''\n      }`,\n    icon: 'hashtag',\n  },\n};\n\nfunction ShortcutsSettings({ onClose }) {\n  const snapStates = useSnapshot(states);\n  const { shortcuts } = snapStates;\n  const [showForm, setShowForm] = useState(false);\n  const [showImportExport, setShowImportExport] = useState(false);\n\n  const [shortcutsListParent] = useAutoAnimate();\n\n  return (\n    <div id=\"shortcuts-settings-container\" class=\"sheet\" tabindex=\"-1\">\n      {!!onClose && (\n        <button type=\"button\" class=\"sheet-close\" onClick={onClose}>\n          <Icon icon=\"x\" />\n        </button>\n      )}\n      <header>\n        <h2>\n          <Icon icon=\"shortcut\" /> Shortcuts{' '}\n          <sup\n            style={{\n              fontSize: 12,\n              opacity: 0.5,\n              textTransform: 'uppercase',\n            }}\n          >\n            beta\n          </sup>\n        </h2>\n      </header>\n      <main>\n        <p>Specify a list of shortcuts that'll appear&nbsp;as:</p>\n        <div class=\"shortcuts-view-mode\">\n          {[\n            {\n              value: 'float-button',\n              label: 'Floating button',\n              imgURL: floatingButtonUrl,\n            },\n            {\n              value: 'tab-menu-bar',\n              label: 'Tab/Menu bar',\n              imgURL: tabMenuBarUrl,\n            },\n            {\n              value: 'multi-column',\n              label: 'Multi-column',\n              imgURL: multiColumnUrl,\n            },\n          ].map(({ value, label, imgURL }) => {\n            const checked =\n              snapStates.settings.shortcutsViewMode === value ||\n              (value === 'float-button' &&\n                !snapStates.settings.shortcutsViewMode);\n            return (\n              <label key={value} class={checked ? 'checked' : ''}>\n                <input\n                  type=\"radio\"\n                  name=\"shortcuts-view-mode\"\n                  value={value}\n                  checked={checked}\n                  onChange={(e) => {\n                    states.settings.shortcutsViewMode = e.target.value;\n                  }}\n                />{' '}\n                <img src={imgURL} alt=\"\" width=\"80\" height=\"58\" />{' '}\n                <span>{label}</span>\n              </label>\n            );\n          })}\n        </div>\n        {shortcuts.length > 0 ? (\n          <>\n            <ol class=\"shortcuts-list\" ref={shortcutsListParent}>\n              {shortcuts.filter(Boolean).map((shortcut, i) => {\n                // const key = i + Object.values(shortcut);\n                const key = Object.values(shortcut).join('-');\n                const { type } = shortcut;\n                if (!SHORTCUTS_META[type]) return null;\n                let { icon, title, subtitle, excludeViewMode } =\n                  SHORTCUTS_META[type];\n                if (typeof title === 'function') {\n                  title = title(shortcut, i);\n                }\n                if (typeof subtitle === 'function') {\n                  subtitle = subtitle(shortcut, i);\n                }\n                if (typeof icon === 'function') {\n                  icon = icon(shortcut, i);\n                }\n                if (typeof excludeViewMode === 'function') {\n                  excludeViewMode = excludeViewMode(shortcut, i);\n                }\n                const excludedViewMode = excludeViewMode?.includes(\n                  snapStates.settings.shortcutsViewMode,\n                );\n                return (\n                  <li key={key}>\n                    <Icon icon={icon} />\n                    <span class=\"shortcut-text\">\n                      <AsyncText>{title}</AsyncText>\n                      {subtitle && (\n                        <>\n                          {' '}\n                          <small class=\"ib insignificant\">{subtitle}</small>\n                        </>\n                      )}\n                      {excludedViewMode && (\n                        <span class=\"tag\">\n                          Not available in current view mode\n                        </span>\n                      )}\n                    </span>\n                    <span class=\"shortcut-actions\">\n                      <button\n                        type=\"button\"\n                        class=\"plain small\"\n                        disabled={i === 0}\n                        onClick={() => {\n                          const shortcutsArr = Array.from(states.shortcuts);\n                          if (i > 0) {\n                            const temp = states.shortcuts[i - 1];\n                            shortcutsArr[i - 1] = shortcut;\n                            shortcutsArr[i] = temp;\n                            states.shortcuts = shortcutsArr;\n                          }\n                        }}\n                      >\n                        <Icon icon=\"arrow-up\" alt=\"Move up\" />\n                      </button>\n                      <button\n                        type=\"button\"\n                        class=\"plain small\"\n                        disabled={i === shortcuts.length - 1}\n                        onClick={() => {\n                          const shortcutsArr = Array.from(states.shortcuts);\n                          if (i < states.shortcuts.length - 1) {\n                            const temp = states.shortcuts[i + 1];\n                            shortcutsArr[i + 1] = shortcut;\n                            shortcutsArr[i] = temp;\n                            states.shortcuts = shortcutsArr;\n                          }\n                        }}\n                      >\n                        <Icon icon=\"arrow-down\" alt=\"Move down\" />\n                      </button>\n                      <button\n                        type=\"button\"\n                        class=\"plain small\"\n                        onClick={() => {\n                          setShowForm({\n                            shortcut,\n                            shortcutIndex: i,\n                          });\n                        }}\n                      >\n                        <Icon icon=\"pencil\" alt=\"Edit\" />\n                      </button>\n                      {/* <button\n                      type=\"button\"\n                      class=\"plain small\"\n                      onClick={() => {\n                        states.shortcuts.splice(i, 1);\n                      }}\n                    >\n                      <Icon icon=\"x\" alt=\"Remove\" />\n                    </button> */}\n                    </span>\n                  </li>\n                );\n              })}\n            </ol>\n            {shortcuts.length === 1 &&\n              snapStates.settings.shortcutsViewMode !== 'float-button' && (\n                <div class=\"ui-state insignificant\">\n                  <Icon icon=\"info\" />{' '}\n                  <small>\n                    Add more than one shortcut/column to make this work.\n                  </small>\n                </div>\n              )}\n          </>\n        ) : (\n          <div class=\"ui-state insignificant\">\n            <p>\n              {snapStates.settings.shortcutsViewMode === 'multi-column'\n                ? 'No columns yet. Tap on the Add column button.'\n                : 'No shortcuts yet. Tap on the Add shortcut button.'}\n            </p>\n            <p>\n              Not sure what to add?\n              <br />\n              Try adding{' '}\n              <a\n                href=\"#\"\n                onClick={(e) => {\n                  e.preventDefault();\n                  states.shortcuts = [\n                    {\n                      type: 'following',\n                    },\n                    {\n                      type: 'notifications',\n                    },\n                  ];\n                }}\n              >\n                Home / Following and Notifications\n              </a>{' '}\n              first.\n            </p>\n          </div>\n        )}\n        <p class=\"insignificant\">\n          {shortcuts.length >= SHORTCUTS_LIMIT &&\n            (snapStates.settings.shortcutsViewMode === 'multi-column'\n              ? `Max ${SHORTCUTS_LIMIT} columns`\n              : `Max ${SHORTCUTS_LIMIT} shortcuts`)}\n        </p>\n        <p\n          style={{\n            display: 'flex',\n            justifyContent: 'space-between',\n            alignItems: 'center',\n          }}\n        >\n          <button\n            type=\"button\"\n            class=\"light\"\n            onClick={() => setShowImportExport(true)}\n          >\n            Import/export\n          </button>\n          <button\n            type=\"button\"\n            disabled={shortcuts.length >= SHORTCUTS_LIMIT}\n            onClick={() => setShowForm(true)}\n          >\n            <Icon icon=\"plus\" />{' '}\n            <span>\n              {snapStates.settings.shortcutsViewMode === 'multi-column'\n                ? 'Add column…'\n                : 'Add shortcut…'}\n            </span>\n          </button>\n        </p>\n      </main>\n      {showForm && (\n        <Modal\n          onClick={(e) => {\n            if (e.target === e.currentTarget) {\n              setShowForm(false);\n            }\n          }}\n        >\n          <ShortcutForm\n            shortcut={showForm.shortcut}\n            shortcutIndex={showForm.shortcutIndex}\n            onSubmit={({ result, mode }) => {\n              console.log('onSubmit', result);\n              if (mode === 'edit') {\n                states.shortcuts[showForm.shortcutIndex] = result;\n              } else {\n                states.shortcuts.push(result);\n              }\n            }}\n            onClose={() => setShowForm(false)}\n          />\n        </Modal>\n      )}\n      {showImportExport && (\n        <Modal\n          onClick={(e) => {\n            if (e.target === e.currentTarget) {\n              setShowImportExport(false);\n            }\n          }}\n        >\n          <ImportExport\n            shortcuts={shortcuts}\n            onClose={() => setShowImportExport(false)}\n          />\n        </Modal>\n      )}\n    </div>\n  );\n}\n\nconst FORM_NOTES = {\n  list: `Specific list is optional. For multi-column mode, list is required, else the column will not be shown.`,\n  search: `For multi-column mode, search term is required, else the column will not be shown.`,\n  hashtag: 'Multiple hashtags are supported. Space-separated.',\n};\n\nfunction ShortcutForm({\n  onSubmit,\n  disabled,\n  shortcut,\n  shortcutIndex,\n  onClose,\n}) {\n  console.log('shortcut', shortcut);\n  const editMode = !!shortcut;\n  const [currentType, setCurrentType] = useState(shortcut?.type || null);\n  const { masto } = api();\n\n  const [uiState, setUIState] = useState('default');\n  const [lists, setLists] = useState([]);\n  const [followedHashtags, setFollowedHashtags] = useState([]);\n  useEffect(() => {\n    (async () => {\n      if (currentType !== 'list') return;\n      try {\n        setUIState('loading');\n        const lists = await getLists();\n        setLists(lists);\n        setUIState('default');\n      } catch (e) {\n        console.error(e);\n        setUIState('error');\n      }\n    })();\n\n    (async () => {\n      if (currentType !== 'hashtag') return;\n      try {\n        const tags = await fetchFollowedTags();\n        setFollowedHashtags(tags);\n      } catch (e) {\n        console.error(e);\n      }\n    })();\n  }, [currentType]);\n\n  const formRef = useRef();\n  useEffect(() => {\n    if (editMode && currentType && TYPE_PARAMS[currentType]) {\n      // Populate form\n      const form = formRef.current;\n      TYPE_PARAMS[currentType].forEach(({ name, type }) => {\n        const input = form.querySelector(`[name=\"${name}\"]`);\n        if (input && shortcut[name]) {\n          if (type === 'checkbox') {\n            input.checked = shortcut[name] === 'on' ? true : false;\n          } else {\n            input.value = shortcut[name];\n          }\n        }\n      });\n    }\n  }, [editMode, currentType]);\n\n  return (\n    <div id=\"shortcut-settings-form\" class=\"sheet\">\n      {!!onClose && (\n        <button type=\"button\" class=\"sheet-close\" onClick={onClose}>\n          <Icon icon=\"x\" />\n        </button>\n      )}\n      <header>\n        <h2>{editMode ? 'Edit' : 'Add'} shortcut</h2>\n      </header>\n      <main tabindex=\"-1\">\n        <form\n          ref={formRef}\n          onSubmit={(e) => {\n            // Construct a nice object from form\n            e.preventDefault();\n            const data = new FormData(e.target);\n            const result = {};\n            data.forEach((value, key) => {\n              result[key] = value?.trim();\n              if (key === 'instance') {\n                // Remove protocol and trailing slash\n                result[key] = result[key]\n                  .replace(/^https?:\\/\\//, '')\n                  .replace(/\\/+$/, '');\n                // Remove @acct@ or acct@ from instance URL\n                result[key] = result[key].replace(/^@?[^@]+@/, '');\n              }\n            });\n            console.log('result', result);\n            if (!result.type) return;\n            onSubmit({\n              result,\n              mode: editMode ? 'edit' : 'add',\n            });\n            // Reset\n            e.target.reset();\n            setCurrentType(null);\n            onClose?.();\n          }}\n        >\n          <p>\n            <label>\n              <span>Timeline</span>\n              <select\n                required\n                disabled={disabled}\n                onChange={(e) => {\n                  setCurrentType(e.target.value);\n                }}\n                defaultValue={editMode ? shortcut.type : undefined}\n                name=\"type\"\n              >\n                <option></option>\n                {TYPES.map((type) => (\n                  <option value={type}>{TYPE_TEXT[type]}</option>\n                ))}\n              </select>\n            </label>\n          </p>\n          {TYPE_PARAMS[currentType]?.map?.(\n            ({ text, name, type, placeholder, pattern, notRequired }) => {\n              if (currentType === 'list') {\n                return (\n                  <p>\n                    <label>\n                      <span>List</span>\n                      <select\n                        name=\"id\"\n                        required={!notRequired}\n                        disabled={disabled || uiState === 'loading'}\n                        defaultValue={editMode ? shortcut.id : undefined}\n                      >\n                        <option value=\"\"></option>\n                        {lists.map((list) => (\n                          <option value={list.id}>{list.title}</option>\n                        ))}\n                      </select>\n                    </label>\n                  </p>\n                );\n              }\n\n              return (\n                <p>\n                  <label>\n                    <span>{text}</span>{' '}\n                    <input\n                      type={type}\n                      switch={type === 'checkbox' || undefined}\n                      name={name}\n                      placeholder={placeholder}\n                      required={type === 'text' && !notRequired}\n                      disabled={disabled}\n                      list={\n                        currentType === 'hashtag'\n                          ? 'followed-hashtags-datalist'\n                          : null\n                      }\n                      autocorrect=\"off\"\n                      autocapitalize=\"off\"\n                      spellCheck={false}\n                      pattern={pattern}\n                    />\n                    {currentType === 'hashtag' &&\n                      followedHashtags.length > 0 && (\n                        <datalist id=\"followed-hashtags-datalist\">\n                          {followedHashtags.map((tag) => (\n                            <option value={tag.name} />\n                          ))}\n                        </datalist>\n                      )}\n                  </label>\n                </p>\n              );\n            },\n          )}\n          {!!FORM_NOTES[currentType] && (\n            <p class=\"form-note insignificant\">\n              <Icon icon=\"info\" />\n              {FORM_NOTES[currentType]}\n            </p>\n          )}\n          <footer>\n            <button\n              type=\"submit\"\n              class=\"block\"\n              disabled={disabled || uiState === 'loading'}\n            >\n              {editMode ? 'Save' : 'Add'}\n            </button>\n            {editMode && (\n              <button\n                type=\"button\"\n                class=\"light danger\"\n                onClick={() => {\n                  states.shortcuts.splice(shortcutIndex, 1);\n                  onClose?.();\n                }}\n              >\n                Remove\n              </button>\n            )}\n          </footer>\n        </form>\n      </main>\n    </div>\n  );\n}\n\nfunction ImportExport({ shortcuts, onClose }) {\n  const { masto } = api();\n  const shortcutsStr = useMemo(() => {\n    if (!shortcuts) return '';\n    if (!shortcuts.filter(Boolean).length) return '';\n    return compressToEncodedURIComponent(\n      JSON.stringify(shortcuts.filter(Boolean)),\n    );\n  }, [shortcuts]);\n  const [importShortcutStr, setImportShortcutStr] = useState('');\n  const [importUIState, setImportUIState] = useState('default');\n  const parsedImportShortcutStr = useMemo(() => {\n    if (!importShortcutStr) {\n      setImportUIState('default');\n      return null;\n    }\n    try {\n      const parsed = JSON.parse(\n        decompressFromEncodedURIComponent(importShortcutStr),\n      );\n      // Very basic validation, I know\n      if (!Array.isArray(parsed)) throw new Error('Not an array');\n      setImportUIState('default');\n      return parsed;\n    } catch (err) {\n      // Fallback to JSON string parsing\n      // There's a chance that someone might want to import a JSON string instead of the compressed version\n      try {\n        const parsed = JSON.parse(importShortcutStr);\n        if (!Array.isArray(parsed)) throw new Error('Not an array');\n        setImportUIState('default');\n        return parsed;\n      } catch (err) {\n        setImportUIState('error');\n        return null;\n      }\n    }\n  }, [importShortcutStr]);\n  const hasCurrentSettings = states.shortcuts.length > 0;\n\n  const shortcutsImportFieldRef = useRef();\n\n  return (\n    <div id=\"import-export-container\" class=\"sheet\">\n      {!!onClose && (\n        <button type=\"button\" class=\"sheet-close\" onClick={onClose}>\n          <Icon icon=\"x\" />\n        </button>\n      )}\n      <header>\n        <h2>\n          Import/Export <small class=\"ib insignificant\">Shortcuts</small>\n        </h2>\n      </header>\n      <main tabindex=\"-1\">\n        <section>\n          <h3>\n            <Icon icon=\"arrow-down-circle\" size=\"l\" class=\"insignificant\" />{' '}\n            <span>Import</span>\n          </h3>\n          <p class=\"field-button\">\n            <input\n              ref={shortcutsImportFieldRef}\n              type=\"text\"\n              name=\"import\"\n              placeholder=\"Paste shortcuts here\"\n              class=\"block\"\n              onInput={(e) => {\n                setImportShortcutStr(e.target.value);\n              }}\n            />\n            {states.settings.shortcutSettingsCloudImportExport && (\n              <button\n                type=\"button\"\n                class=\"plain2 small\"\n                disabled={importUIState === 'cloud-downloading'}\n                onClick={async () => {\n                  setImportUIState('cloud-downloading');\n                  const currentAccount = store.session.get('currentAccount');\n                  showToast(\n                    'Downloading saved shortcuts from instance server…',\n                  );\n                  try {\n                    const relationships =\n                      await masto.v1.accounts.relationships.fetch({\n                        id: [currentAccount],\n                      });\n                    const relationship = relationships[0];\n                    if (relationship) {\n                      const { note = '' } = relationship;\n                      if (\n                        /<phanpy-shortcuts-settings>(.*)<\\/phanpy-shortcuts-settings>/.test(\n                          note,\n                        )\n                      ) {\n                        const settings = note.match(\n                          /<phanpy-shortcuts-settings>(.*)<\\/phanpy-shortcuts-settings>/,\n                        )[1];\n                        const { v, dt, data } = JSON.parse(settings);\n                        shortcutsImportFieldRef.current.value = data;\n                        shortcutsImportFieldRef.current.dispatchEvent(\n                          new Event('input'),\n                        );\n                      }\n                    }\n                    setImportUIState('default');\n                  } catch (e) {\n                    console.error(e);\n                    setImportUIState('error');\n                    showToast('Unable to download shortcuts');\n                  }\n                }}\n                title=\"Download shortcuts from instance server\"\n              >\n                <Icon icon=\"cloud\" />\n                <Icon icon=\"arrow-down\" />\n              </button>\n            )}\n          </p>\n          {!!parsedImportShortcutStr &&\n            Array.isArray(parsedImportShortcutStr) && (\n              <>\n                <p>\n                  <b>{parsedImportShortcutStr.length}</b> shortcut\n                  {parsedImportShortcutStr.length > 1 ? 's' : ''}{' '}\n                  <small class=\"insignificant\">\n                    ({importShortcutStr.length} characters)\n                  </small>\n                </p>\n                <ol class=\"import-settings-list\">\n                  {parsedImportShortcutStr.map((shortcut) => (\n                    <li>\n                      <span\n                        style={{\n                          opacity: shortcuts.some((s) =>\n                            // Compare all properties\n                            Object.keys(s).every(\n                              (key) => s[key] === shortcut[key],\n                            ),\n                          )\n                            ? 1\n                            : 0,\n                        }}\n                      >\n                        *\n                      </span>\n                      <span>\n                        {TYPE_TEXT[shortcut.type]}\n                        {shortcut.type === 'list' && ' ⚠️'}{' '}\n                        {TYPE_PARAMS[shortcut.type]?.map?.(\n                          ({ text, name, type }) =>\n                            shortcut[name] ? (\n                              <>\n                                <span class=\"tag collapsed insignificant\">\n                                  {text}:{' '}\n                                  {type === 'checkbox'\n                                    ? shortcut[name] === 'on'\n                                      ? '✅'\n                                      : '❌'\n                                    : shortcut[name]}\n                                </span>{' '}\n                              </>\n                            ) : null,\n                        )}\n                      </span>\n                    </li>\n                  ))}\n                </ol>\n                <p>\n                  <small>* Exists in current shortcuts</small>\n                  <br />\n                  <small>\n                    ⚠️ List may not work if it's from a different account.\n                  </small>\n                </p>\n              </>\n            )}\n          {importUIState === 'error' && (\n            <p class=\"error\">\n              <small>⚠️ Invalid settings format</small>\n            </p>\n          )}\n          <p>\n            {hasCurrentSettings && (\n              <>\n                <MenuConfirm\n                  confirmLabel=\"Append to current shortcuts?\"\n                  menuFooter={\n                    <div class=\"footer\">\n                      Only shortcuts that don’t exist in current shortcuts will\n                      be appended.\n                    </div>\n                  }\n                  onClick={() => {\n                    // states.shortcuts = [\n                    //   ...states.shortcuts,\n                    //   ...parsedImportShortcutStr,\n                    // ];\n                    // Append non-unique shortcuts only\n                    const nonUniqueShortcuts = parsedImportShortcutStr.filter(\n                      (shortcut) =>\n                        !states.shortcuts.some((s) =>\n                          // Compare all properties\n                          Object.keys(s).every(\n                            (key) => s[key] === shortcut[key],\n                          ),\n                        ),\n                    );\n                    if (!nonUniqueShortcuts.length) {\n                      showToast('No new shortcuts to import');\n                      return;\n                    }\n                    let newShortcuts = [\n                      ...states.shortcuts,\n                      ...nonUniqueShortcuts,\n                    ];\n                    const exceededLimit = newShortcuts.length > SHORTCUTS_LIMIT;\n                    if (exceededLimit) {\n                      // If exceeded, trim it\n                      newShortcuts = newShortcuts.slice(0, SHORTCUTS_LIMIT);\n                    }\n                    states.shortcuts = newShortcuts;\n                    showToast(\n                      exceededLimit\n                        ? `Shortcuts imported. Exceeded max ${SHORTCUTS_LIMIT}, so the rest are not imported.`\n                        : 'Shortcuts imported',\n                    );\n                    onClose?.();\n                  }}\n                >\n                  <button\n                    type=\"button\"\n                    class=\"plain2\"\n                    disabled={!parsedImportShortcutStr}\n                  >\n                    Import & append…\n                  </button>\n                </MenuConfirm>{' '}\n              </>\n            )}\n            <MenuConfirm\n              confirmLabel={\n                hasCurrentSettings\n                  ? 'Override current shortcuts?'\n                  : 'Import shortcuts?'\n              }\n              menuItemClassName={hasCurrentSettings ? 'danger' : undefined}\n              onClick={() => {\n                states.shortcuts = parsedImportShortcutStr;\n                showToast('Shortcuts imported');\n                onClose?.();\n              }}\n            >\n              <button\n                type=\"button\"\n                class=\"plain2\"\n                disabled={!parsedImportShortcutStr}\n              >\n                {hasCurrentSettings ? 'or override…' : 'Import…'}\n              </button>\n            </MenuConfirm>\n          </p>\n        </section>\n        <section>\n          <h3>\n            <Icon icon=\"arrow-up-circle\" size=\"l\" class=\"insignificant\" />{' '}\n            <span>Export</span>\n          </h3>\n          <p>\n            <input\n              style={{ width: '100%' }}\n              type=\"text\"\n              value={shortcutsStr}\n              readOnly\n              onClick={(e) => {\n                if (!e.target.value) return;\n                e.target.select();\n                // Copy url to clipboard\n                try {\n                  navigator.clipboard.writeText(e.target.value);\n                  showToast('Shortcuts copied');\n                } catch (e) {\n                  console.error(e);\n                  showToast('Unable to copy shortcuts');\n                }\n              }}\n            />\n          </p>\n          <p>\n            <button\n              type=\"button\"\n              class=\"plain2\"\n              disabled={!shortcutsStr}\n              onClick={() => {\n                try {\n                  navigator.clipboard.writeText(shortcutsStr);\n                  showToast('Shortcut settings copied');\n                } catch (e) {\n                  console.error(e);\n                  showToast('Unable to copy shortcut settings');\n                }\n              }}\n            >\n              <Icon icon=\"clipboard\" /> <span>Copy</span>\n            </button>{' '}\n            {navigator?.share &&\n              navigator?.canShare?.({\n                text: shortcutsStr,\n              }) && (\n                <button\n                  type=\"button\"\n                  class=\"plain2\"\n                  disabled={!shortcutsStr}\n                  onClick={() => {\n                    try {\n                      navigator.share({\n                        text: shortcutsStr,\n                      });\n                    } catch (e) {\n                      console.error(e);\n                      alert(\"Sharing doesn't seem to work.\");\n                    }\n                  }}\n                >\n                  <Icon icon=\"share\" /> <span>Share</span>\n                </button>\n              )}{' '}\n            {states.settings.shortcutSettingsCloudImportExport && (\n              <button\n                type=\"button\"\n                class=\"plain2\"\n                disabled={importUIState === 'cloud-uploading'}\n                onClick={async () => {\n                  setImportUIState('cloud-uploading');\n                  const currentAccount = store.session.get('currentAccount');\n                  try {\n                    const relationships =\n                      await masto.v1.accounts.relationships.fetch({\n                        id: [currentAccount],\n                      });\n                    const relationship = relationships[0];\n                    if (relationship) {\n                      const { note = '' } = relationship;\n                      // const newNote = `${note}\\n\\n\\n$<phanpy-shortcuts-settings>{shortcutsStr}</phanpy-shortcuts-settings>`;\n                      let newNote = '';\n                      if (\n                        /<phanpy-shortcuts-settings>(.*)<\\/phanpy-shortcuts-settings>/.test(\n                          note,\n                        )\n                      ) {\n                        const settingsJSON = JSON.stringify({\n                          v: '1', // version\n                          dt: Date.now(), // datetime stamp\n                          data: shortcutsStr, // shortcuts settings string\n                        });\n                        newNote = note.replace(\n                          /<phanpy-shortcuts-settings>(.*)<\\/phanpy-shortcuts-settings>/,\n                          `<phanpy-shortcuts-settings>${settingsJSON}</phanpy-shortcuts-settings>`,\n                        );\n                      } else {\n                        newNote = `${note}\\n\\n\\n<phanpy-shortcuts-settings>${settingsJSON}</phanpy-shortcuts-settings>`;\n                      }\n                      showToast('Saving shortcuts to instance server…');\n                      await masto.v1.accounts\n                        .$select(currentAccount)\n                        .note.create({\n                          comment: newNote,\n                        });\n                      setImportUIState('default');\n                      showToast('Shortcuts saved');\n                    }\n                  } catch (e) {\n                    console.error(e);\n                    setImportUIState('error');\n                    showToast('Unable to save shortcuts');\n                  }\n                }}\n                title=\"Sync to instance server\"\n              >\n                <Icon icon=\"cloud\" />\n                <Icon icon=\"arrow-up\" />\n              </button>\n            )}{' '}\n            {shortcutsStr.length > 0 && (\n              <small class=\"insignificant ib\">\n                {shortcutsStr.length} characters\n              </small>\n            )}\n          </p>\n          {!!shortcutsStr && (\n            <details>\n              <summary class=\"insignificant\">\n                <small>Raw Shortcuts JSON</small>\n              </summary>\n              <textarea style={{ width: '100%' }} rows={10} readOnly>\n                {JSON.stringify(shortcuts.filter(Boolean), null, 2)}\n              </textarea>\n            </details>\n          )}\n        </section>\n        {states.settings.shortcutSettingsCloudImportExport && (\n          <footer>\n            <p>\n              <Icon icon=\"cloud\" /> Import/export settings from/to instance\n              server (Very experimental)\n            </p>\n          </footer>\n        )}\n      </main>\n    </div>\n  );\n}\n\nexport default ShortcutsSettings;\n","import './shortcuts.css';\n\nimport { MenuDivider, SubMenu } from '@szhsin/react-menu';\nimport { memo } from 'preact/compat';\nimport { useRef, useState } from 'preact/hooks';\nimport { useHotkeys } from 'react-hotkeys-hook';\nimport { useNavigate } from 'react-router-dom';\nimport { useSnapshot } from 'valtio';\n\nimport { SHORTCUTS_META } from '../components/shortcuts-settings';\nimport { api } from '../utils/api';\nimport { getLists } from '../utils/lists';\nimport states from '../utils/states';\n\nimport AsyncText from './AsyncText';\nimport Icon from './icon';\nimport Link from './link';\nimport Menu2 from './menu2';\nimport MenuLink from './menu-link';\n\nfunction Shortcuts() {\n  const { instance } = api();\n  const snapStates = useSnapshot(states);\n  const { shortcuts, settings } = snapStates;\n\n  if (!shortcuts.length) {\n    return null;\n  }\n  if (\n    settings.shortcutsViewMode === 'multi-column' ||\n    (!settings.shortcutsViewMode && settings.shortcutsColumnsMode)\n  ) {\n    return null;\n  }\n\n  const menuRef = useRef();\n\n  const hasLists = useRef(false);\n  const formattedShortcuts = shortcuts\n    .map((pin, i) => {\n      const { type, ...data } = pin;\n      if (!SHORTCUTS_META[type]) return null;\n      let { id, path, title, subtitle, icon } = SHORTCUTS_META[type];\n\n      if (typeof id === 'function') {\n        id = id(data, i);\n      }\n      if (typeof path === 'function') {\n        path = path(\n          {\n            ...data,\n            instance: data.instance || instance,\n          },\n          i,\n        );\n      }\n      if (typeof title === 'function') {\n        title = title(data, i);\n      }\n      if (typeof subtitle === 'function') {\n        subtitle = subtitle(data, i);\n      }\n      if (typeof icon === 'function') {\n        icon = icon(data, i);\n      }\n\n      if (id === 'lists') {\n        hasLists.current = true;\n      }\n\n      return {\n        id,\n        path,\n        title,\n        subtitle,\n        icon,\n      };\n    })\n    .filter(Boolean);\n\n  const navigate = useNavigate();\n  useHotkeys(['1', '2', '3', '4', '5', '6', '7', '8', '9'], (e, handler) => {\n    const index = parseInt(handler.keys[0], 10) - 1;\n    if (index < formattedShortcuts.length) {\n      const { path } = formattedShortcuts[index];\n      if (path) {\n        navigate(path);\n        menuRef.current?.closeMenu?.();\n      }\n    }\n  });\n\n  const [lists, setLists] = useState([]);\n\n  return (\n    <div id=\"shortcuts\">\n      {snapStates.settings.shortcutsViewMode === 'tab-menu-bar' ? (\n        <nav\n          class=\"tab-bar\"\n          onContextMenu={(e) => {\n            e.preventDefault();\n            states.showShortcutsSettings = true;\n          }}\n        >\n          <ul>\n            {formattedShortcuts.map(\n              ({ id, path, title, subtitle, icon }, i) => {\n                return (\n                  <li key={`${i}-${id}-${title}-${subtitle}-${path}`}>\n                    <Link\n                      class={subtitle ? 'has-subtitle' : ''}\n                      to={path}\n                      onClick={(e) => {\n                        if (e.target.classList.contains('is-active')) {\n                          e.preventDefault();\n                          const page = document.getElementById(`${id}-page`);\n                          console.log(id, page);\n                          if (page) {\n                            page.scrollTop = 0;\n                            const updatesButton =\n                              page.querySelector('.updates-button');\n                            if (updatesButton) {\n                              updatesButton.click();\n                            }\n                          }\n                        }\n                      }}\n                    >\n                      <Icon icon={icon} size=\"xl\" alt={title} />\n                      <span>\n                        <AsyncText>{title}</AsyncText>\n                        {subtitle && (\n                          <>\n                            <br />\n                            <small>{subtitle}</small>\n                          </>\n                        )}\n                      </span>\n                    </Link>\n                  </li>\n                );\n              },\n            )}\n          </ul>\n        </nav>\n      ) : (\n        <Menu2\n          instanceRef={menuRef}\n          overflow=\"auto\"\n          viewScroll=\"close\"\n          menuClassName=\"glass-menu shortcuts-menu\"\n          gap={8}\n          position=\"anchor\"\n          onMenuChange={(e) => {\n            if (e.open && hasLists.current) {\n              getLists().then(setLists);\n            }\n          }}\n          menuButton={\n            <button\n              type=\"button\"\n              id=\"shortcuts-button\"\n              class=\"plain\"\n              onContextMenu={(e) => {\n                e.preventDefault();\n                states.showShortcutsSettings = true;\n              }}\n              onTransitionStart={(e) => {\n                // Close menu if the button disappears\n                try {\n                  const { target } = e;\n                  if (getComputedStyle(target).pointerEvents === 'none') {\n                    menuRef.current?.closeMenu?.();\n                  }\n                } catch (e) {}\n              }}\n            >\n              <Icon icon=\"shortcut\" size=\"xl\" alt=\"Shortcuts\" />\n            </button>\n          }\n        >\n          {formattedShortcuts.map(({ id, path, title, subtitle, icon }, i) => {\n            if (id === 'lists') {\n              return (\n                <SubMenu\n                  menuClassName=\"glass-menu\"\n                  overflow=\"auto\"\n                  gap={-8}\n                  label={\n                    <>\n                      <Icon icon={icon} size=\"l\" />\n                      <span class=\"menu-grow\">\n                        <AsyncText>{title}</AsyncText>\n                      </span>\n                      <Icon icon=\"chevron-right\" />\n                    </>\n                  }\n                >\n                  <MenuLink to=\"/l\">\n                    <span>All Lists</span>\n                  </MenuLink>\n                  <MenuDivider />\n                  {lists?.map((list) => (\n                    <MenuLink key={list.id} to={`/l/${list.id}`}>\n                      <span>{list.title}</span>\n                    </MenuLink>\n                  ))}\n                </SubMenu>\n              );\n            }\n\n            return (\n              <MenuLink\n                to={path}\n                key={`${i}-${id}-${title}-${subtitle}-${path}`}\n                class=\"glass-menu-item\"\n              >\n                <Icon icon={icon} size=\"l\" />{' '}\n                <span class=\"menu-grow\">\n                  <span>\n                    <AsyncText>{title}</AsyncText>\n                  </span>\n                  {subtitle && (\n                    <>\n                      {' '}\n                      <small class=\"more-insignificant\">{subtitle}</small>\n                    </>\n                  )}\n                </span>\n                <span class=\"menu-shortcut hide-until-focus-visible\">\n                  {i + 1}\n                </span>\n              </MenuLink>\n            );\n          })}\n        </Menu2>\n      )}\n    </div>\n  );\n}\n\nexport default memo(Shortcuts);\n","import { useEffect, useRef, useState } from 'preact/hooks';\n\nimport { api } from '../utils/api';\nimport { addListStore, deleteListStore, updateListStore } from '../utils/lists';\nimport supports from '../utils/supports';\n\nimport Icon from './icon';\nimport MenuConfirm from './menu-confirm';\n\nfunction ListAddEdit({ list, onClose }) {\n  const { masto } = api();\n  const [uiState, setUIState] = useState('default');\n  const editMode = !!list;\n  const nameFieldRef = useRef();\n  const repliesPolicyFieldRef = useRef();\n  const exclusiveFieldRef = useRef();\n  useEffect(() => {\n    if (editMode) {\n      nameFieldRef.current.value = list.title;\n      repliesPolicyFieldRef.current.value = list.repliesPolicy;\n      if (exclusiveFieldRef.current) {\n        exclusiveFieldRef.current.checked = list.exclusive;\n      }\n    }\n  }, [editMode]);\n  const supportsExclusive = supports('@mastodon/list-exclusive');\n\n  return (\n    <div class=\"sheet\">\n      {!!onClose && (\n        <button type=\"button\" class=\"sheet-close\" onClick={onClose}>\n          <Icon icon=\"x\" />\n        </button>\n      )}{' '}\n      <header>\n        <h2>{editMode ? 'Edit list' : 'New list'}</h2>\n      </header>\n      <main>\n        <form\n          class=\"list-form\"\n          onSubmit={(e) => {\n            e.preventDefault(); // Get form values\n\n            const formData = new FormData(e.target);\n            const title = formData.get('title');\n            const repliesPolicy = formData.get('replies_policy');\n            const exclusive = formData.get('exclusive') === 'on';\n            console.log({\n              title,\n              repliesPolicy,\n              exclusive,\n            });\n            setUIState('loading');\n\n            (async () => {\n              try {\n                let listResult;\n\n                if (editMode) {\n                  listResult = await masto.v1.lists.$select(list.id).update({\n                    title,\n                    replies_policy: repliesPolicy,\n                    exclusive,\n                  });\n                } else {\n                  listResult = await masto.v1.lists.create({\n                    title,\n                    replies_policy: repliesPolicy,\n                    exclusive,\n                  });\n                }\n\n                console.log(listResult);\n                setUIState('default');\n                onClose?.({\n                  state: 'success',\n                  list: listResult,\n                });\n\n                setTimeout(() => {\n                  if (editMode) {\n                    updateListStore(listResult);\n                  } else {\n                    addListStore(listResult);\n                  }\n                }, 1);\n              } catch (e) {\n                console.error(e);\n                setUIState('error');\n                alert(\n                  editMode ? 'Unable to edit list.' : 'Unable to create list.',\n                );\n              }\n            })();\n          }}\n        >\n          <div class=\"list-form-row\">\n            <label for=\"list-title\">\n              Name{' '}\n              <input\n                ref={nameFieldRef}\n                type=\"text\"\n                id=\"list-title\"\n                name=\"title\"\n                required\n                disabled={uiState === 'loading'}\n                dir=\"auto\"\n              />\n            </label>\n          </div>\n          <div class=\"list-form-row\">\n            <select\n              ref={repliesPolicyFieldRef}\n              name=\"replies_policy\"\n              required\n              disabled={uiState === 'loading'}\n            >\n              <option value=\"list\">Show replies to list members</option>\n              <option value=\"followed\">Show replies to people I follow</option>\n              <option value=\"none\">Don't show replies</option>\n            </select>\n          </div>\n          {supportsExclusive && (\n            <div class=\"list-form-row\">\n              <label class=\"label-block\">\n                <input\n                  ref={exclusiveFieldRef}\n                  type=\"checkbox\"\n                  name=\"exclusive\"\n                  disabled={uiState === 'loading'}\n                />{' '}\n                Hide posts on this list from Home/Following\n              </label>\n            </div>\n          )}\n          <div class=\"list-form-footer\">\n            <button type=\"submit\" disabled={uiState === 'loading'}>\n              {editMode ? 'Save' : 'Create'}\n            </button>\n            {editMode && (\n              <MenuConfirm\n                disabled={uiState === 'loading'}\n                align=\"end\"\n                menuItemClassName=\"danger\"\n                confirmLabel=\"Delete this list?\"\n                onClick={() => {\n                  // const yes = confirm('Delete this list?');\n                  // if (!yes) return;\n                  setUIState('loading');\n\n                  (async () => {\n                    try {\n                      await masto.v1.lists.$select(list.id).remove();\n                      setUIState('default');\n                      onClose?.({\n                        state: 'deleted',\n                      });\n                      setTimeout(() => {\n                        deleteListStore(list.id);\n                      }, 1);\n                    } catch (e) {\n                      console.error(e);\n                      setUIState('error');\n                      alert('Unable to delete list.');\n                    }\n                  })();\n                }}\n              >\n                <button\n                  type=\"button\"\n                  class=\"light danger\"\n                  disabled={uiState === 'loading'}\n                >\n                  Delete…\n                </button>\n              </MenuConfirm>\n            )}\n          </div>\n        </form>\n      </main>\n    </div>\n  );\n}\n\nexport default ListAddEdit;\n","import './account-info.css';\n\nimport { Menu, MenuDivider, MenuItem, SubMenu } from '@szhsin/react-menu';\nimport {\n  useCallback,\n  useEffect,\n  useMemo,\n  useReducer,\n  useRef,\n  useState,\n} from 'preact/hooks';\n\nimport { api } from '../utils/api';\nimport enhanceContent from '../utils/enhance-content';\nimport getHTMLText from '../utils/getHTMLText';\nimport handleContentLinks from '../utils/handle-content-links';\nimport { getLists } from '../utils/lists';\nimport niceDateTime from '../utils/nice-date-time';\nimport pmem from '../utils/pmem';\nimport shortenNumber from '../utils/shorten-number';\nimport showToast from '../utils/show-toast';\nimport states, { hideAllModals } from '../utils/states';\nimport store from '../utils/store';\nimport { updateAccount } from '../utils/store-utils';\n\nimport AccountBlock from './account-block';\nimport Avatar from './avatar';\nimport EmojiText from './emoji-text';\nimport Icon from './icon';\nimport Link from './link';\nimport ListAddEdit from './list-add-edit';\nimport Loader from './loader';\nimport Menu2 from './menu2';\nimport MenuConfirm from './menu-confirm';\nimport Modal from './modal';\nimport TranslationBlock from './translation-block';\n\nconst MUTE_DURATIONS = [\n  60 * 5, // 5 minutes\n  60 * 30, // 30 minutes\n  60 * 60, // 1 hour\n  60 * 60 * 6, // 6 hours\n  60 * 60 * 24, // 1 day\n  60 * 60 * 24 * 3, // 3 days\n  60 * 60 * 24 * 7, // 1 week\n  0, // forever\n];\nconst MUTE_DURATIONS_LABELS = {\n  0: 'Forever',\n  300: '5 minutes',\n  1_800: '30 minutes',\n  3_600: '1 hour',\n  21_600: '6 hours',\n  86_400: '1 day',\n  259_200: '3 days',\n  604_800: '1 week',\n};\n\nconst LIMIT = 80;\n\nconst ACCOUNT_INFO_MAX_AGE = 1000 * 60 * 10; // 10 mins\n\nfunction fetchFamiliarFollowers(currentID, masto) {\n  return masto.v1.accounts.familiarFollowers.fetch({\n    id: [currentID],\n  });\n}\nconst memFetchFamiliarFollowers = pmem(fetchFamiliarFollowers, {\n  maxAge: ACCOUNT_INFO_MAX_AGE,\n});\n\nasync function fetchPostingStats(accountID, masto) {\n  const fetchStatuses = masto.v1.accounts\n    .$select(accountID)\n    .statuses.list({\n      limit: 20,\n    })\n    .next();\n\n  const { value: statuses } = await fetchStatuses;\n  console.log('fetched statuses', statuses);\n  const stats = {\n    total: statuses.length,\n    originals: 0,\n    replies: 0,\n    boosts: 0,\n  };\n  // Categories statuses by type\n  // - Original posts (not replies to others)\n  // - Threads (self-replies + 1st original post)\n  // - Boosts (reblogs)\n  // - Replies (not-self replies)\n  statuses.forEach((status) => {\n    if (status.reblog) {\n      stats.boosts++;\n    } else if (\n      !!status.inReplyToId &&\n      status.inReplyToAccountId !== status.account.id // Not self-reply\n    ) {\n      stats.replies++;\n    } else {\n      stats.originals++;\n    }\n  });\n\n  // Count days since last post\n  if (statuses.length) {\n    stats.daysSinceLastPost = Math.ceil(\n      (Date.now() - new Date(statuses[statuses.length - 1].createdAt)) /\n        86400000,\n    );\n  }\n\n  console.log('posting stats', stats);\n  return stats;\n}\nconst memFetchPostingStats = pmem(fetchPostingStats, {\n  maxAge: ACCOUNT_INFO_MAX_AGE,\n});\n\nfunction AccountInfo({\n  account,\n  fetchAccount = () => {},\n  standalone,\n  instance,\n  authenticated,\n}) {\n  const { masto } = api({\n    instance,\n  });\n  const { masto: currentMasto, instance: currentInstance } = api();\n  const [uiState, setUIState] = useState('default');\n  const isString = typeof account === 'string';\n  const [info, setInfo] = useState(isString ? null : account);\n\n  const sameCurrentInstance = useMemo(\n    () => instance === currentInstance,\n    [instance, currentInstance],\n  );\n\n  useEffect(() => {\n    if (!isString) {\n      setInfo(account);\n      return;\n    }\n    setUIState('loading');\n    (async () => {\n      try {\n        const info = await fetchAccount();\n        states.accounts[`${info.id}@${instance}`] = info;\n        setInfo(info);\n        setUIState('default');\n      } catch (e) {\n        console.error(e);\n        setInfo(null);\n        setUIState('error');\n      }\n    })();\n  }, [isString, account, fetchAccount]);\n\n  const {\n    acct,\n    avatar,\n    avatarStatic,\n    bot,\n    createdAt,\n    displayName,\n    emojis,\n    fields,\n    followersCount,\n    followingCount,\n    group,\n    // header,\n    // headerStatic,\n    id,\n    lastStatusAt,\n    locked,\n    note,\n    statusesCount,\n    url,\n    username,\n    memorial,\n    moved,\n    roles,\n  } = info || {};\n  let headerIsAvatar = false;\n  let { header, headerStatic } = info || {};\n  if (!header || /missing\\.png$/.test(header)) {\n    if (avatar && !/missing\\.png$/.test(avatar)) {\n      header = avatar;\n      headerIsAvatar = true;\n      if (avatarStatic && !/missing\\.png$/.test(avatarStatic)) {\n        headerStatic = avatarStatic;\n      }\n    }\n  }\n\n  const isSelf = useMemo(\n    () => id === store.session.get('currentAccount'),\n    [id],\n  );\n\n  useEffect(() => {\n    const infoHasEssentials = !!(\n      info?.id &&\n      info?.username &&\n      info?.acct &&\n      info?.avatar &&\n      info?.avatarStatic &&\n      info?.displayName &&\n      info?.url\n    );\n    if (isSelf && instance && infoHasEssentials) {\n      const accounts = store.local.getJSON('accounts');\n      let updated = false;\n      accounts.forEach((account) => {\n        if (account.info.id === info.id && account.instanceURL === instance) {\n          account.info = info;\n          updated = true;\n        }\n      });\n      if (updated) {\n        console.log('Updated account info', info);\n        store.local.setJSON('accounts', accounts);\n      }\n    }\n  }, [isSelf, info, instance]);\n\n  const accountInstance = useMemo(() => {\n    if (!url) return null;\n    const domain = new URL(url).hostname;\n    return domain;\n  }, [url]);\n\n  const [headerCornerColors, setHeaderCornerColors] = useState([]);\n\n  const followersIterator = useRef();\n  const familiarFollowersCache = useRef([]);\n  async function fetchFollowers(firstLoad) {\n    if (firstLoad || !followersIterator.current) {\n      followersIterator.current = masto.v1.accounts.$select(id).followers.list({\n        limit: LIMIT,\n      });\n    }\n    const results = await followersIterator.current.next();\n    if (isSelf) return results;\n    if (!sameCurrentInstance) return results;\n\n    const { value } = results;\n    let newValue = [];\n    // On first load, fetch familiar followers, merge to top of results' `value`\n    // Remove dups on every fetch\n    if (firstLoad) {\n      const familiarFollowers = await masto.v1.accounts.familiarFollowers.fetch(\n        {\n          id: [id],\n        },\n      );\n      familiarFollowersCache.current = familiarFollowers[0].accounts;\n      newValue = [\n        ...familiarFollowersCache.current,\n        ...value.filter(\n          (account) =>\n            !familiarFollowersCache.current.some(\n              (familiar) => familiar.id === account.id,\n            ),\n        ),\n      ];\n    } else if (value?.length) {\n      newValue = value.filter(\n        (account) =>\n          !familiarFollowersCache.current.some(\n            (familiar) => familiar.id === account.id,\n          ),\n      );\n    }\n\n    return {\n      ...results,\n      value: newValue,\n    };\n  }\n\n  const followingIterator = useRef();\n  async function fetchFollowing(firstLoad) {\n    if (firstLoad || !followingIterator.current) {\n      followingIterator.current = masto.v1.accounts.$select(id).following.list({\n        limit: LIMIT,\n      });\n    }\n    const results = await followingIterator.current.next();\n    return results;\n  }\n\n  const LinkOrDiv = standalone ? 'div' : Link;\n  const accountLink = instance ? `/${instance}/a/${id}` : `/a/${id}`;\n\n  const [familiarFollowers, setFamiliarFollowers] = useState([]);\n  const [postingStats, setPostingStats] = useState();\n  const [postingStatsUIState, setPostingStatsUIState] = useState('default');\n  const hasPostingStats = !!postingStats?.total;\n\n  const renderFamiliarFollowers = async (currentID) => {\n    try {\n      const followers = await memFetchFamiliarFollowers(\n        currentID,\n        currentMasto,\n      );\n      console.log('fetched familiar followers', followers);\n      setFamiliarFollowers(\n        followers[0].accounts.slice(0, FAMILIAR_FOLLOWERS_LIMIT),\n      );\n    } catch (e) {\n      console.error(e);\n    }\n  };\n\n  const renderPostingStats = async () => {\n    if (!id) return;\n    setPostingStatsUIState('loading');\n    try {\n      const stats = await memFetchPostingStats(id, masto);\n      setPostingStats(stats);\n      setPostingStatsUIState('default');\n    } catch (e) {\n      console.error(e);\n      setPostingStatsUIState('error');\n    }\n  };\n\n  const onRelationshipChange = useCallback(\n    ({ relationship, currentID }) => {\n      if (!relationship.following) {\n        renderFamiliarFollowers(currentID);\n        if (!standalone && statusesCount > 0) {\n          // Only render posting stats if not standalone and has posts\n          renderPostingStats();\n        }\n      }\n    },\n    [standalone, id, statusesCount],\n  );\n\n  const onProfileUpdate = useCallback(\n    (newAccount) => {\n      if (newAccount.id === id) {\n        console.log('Updated account info', newAccount);\n        setInfo(newAccount);\n        states.accounts[`${newAccount.id}@${instance}`] = newAccount;\n      }\n    },\n    [id, instance],\n  );\n\n  return (\n    <div\n      tabIndex=\"-1\"\n      class={`account-container ${uiState === 'loading' ? 'skeleton' : ''}`}\n      style={{\n        '--header-color-1': headerCornerColors[0],\n        '--header-color-2': headerCornerColors[1],\n        '--header-color-3': headerCornerColors[2],\n        '--header-color-4': headerCornerColors[3],\n      }}\n    >\n      {uiState === 'error' && (\n        <div class=\"ui-state\">\n          <p>Unable to load account.</p>\n          <p>\n            <a\n              href={isString ? account : url}\n              target=\"_blank\"\n              rel=\"noopener noreferrer\"\n            >\n              Go to account page <Icon icon=\"external\" />\n            </a>\n          </p>\n        </div>\n      )}\n      {uiState === 'loading' ? (\n        <>\n          <header>\n            <AccountBlock avatarSize=\"xxxl\" skeleton />\n          </header>\n          <main>\n            <div class=\"note\">\n              <p>███████ ████ ████</p>\n              <p>████ ████████ ██████ █████████ ████ ██</p>\n            </div>\n            <div class=\"account-metadata-box\">\n              <div class=\"profile-metadata\">\n                <div class=\"profile-field\">\n                  <b class=\"more-insignificant\">███</b>\n                  <p>██████</p>\n                </div>\n                <div class=\"profile-field\">\n                  <b class=\"more-insignificant\">████</b>\n                  <p>███████████</p>\n                </div>\n              </div>\n              <div class=\"stats\">\n                <div>\n                  <span>██</span> Followers\n                </div>\n                <div>\n                  <span>██</span> Following\n                </div>\n                <div>\n                  <span>██</span> Posts\n                </div>\n              </div>\n            </div>\n            <div class=\"actions\">\n              <span />\n              <span class=\"buttons\">\n                <button type=\"button\" title=\"More\" class=\"plain\" disabled>\n                  <Icon icon=\"more\" size=\"l\" alt=\"More\" />\n                </button>\n              </span>\n            </div>\n          </main>\n        </>\n      ) : (\n        info && (\n          <>\n            {!!moved && (\n              <div class=\"account-moved\">\n                <p>\n                  <b>{displayName}</b> has indicated that their new account is\n                  now:\n                </p>\n                <AccountBlock\n                  account={moved}\n                  instance={instance}\n                  onClick={(e) => {\n                    e.stopPropagation();\n                    states.showAccount = moved;\n                  }}\n                />\n              </div>\n            )}\n            {!!header && !/missing\\.png$/.test(header) && (\n              <img\n                src={header}\n                alt=\"\"\n                class={`header-banner ${\n                  headerIsAvatar ? 'header-is-avatar' : ''\n                }`}\n                onError={(e) => {\n                  if (e.target.crossOrigin) {\n                    if (e.target.src !== headerStatic) {\n                      e.target.src = headerStatic;\n                    } else {\n                      e.target.removeAttribute('crossorigin');\n                      e.target.src = header;\n                    }\n                  } else if (e.target.src !== headerStatic) {\n                    e.target.src = headerStatic;\n                  } else {\n                    e.target.remove();\n                  }\n                }}\n                crossOrigin=\"anonymous\"\n                onLoad={(e) => {\n                  e.target.classList.add('loaded');\n                  try {\n                    // Get color from four corners of image\n                    const canvas = window.OffscreenCanvas\n                      ? new OffscreenCanvas(1, 1)\n                      : document.createElement('canvas');\n                    const ctx = canvas.getContext('2d', {\n                      willReadFrequently: true,\n                    });\n                    canvas.width = e.target.width;\n                    canvas.height = e.target.height;\n                    ctx.imageSmoothingEnabled = false;\n                    ctx.drawImage(e.target, 0, 0);\n                    // const colors = [\n                    //   ctx.getImageData(0, 0, 1, 1).data,\n                    //   ctx.getImageData(e.target.width - 1, 0, 1, 1).data,\n                    //   ctx.getImageData(0, e.target.height - 1, 1, 1).data,\n                    //   ctx.getImageData(\n                    //     e.target.width - 1,\n                    //     e.target.height - 1,\n                    //     1,\n                    //     1,\n                    //   ).data,\n                    // ];\n                    // Get 10x10 pixels from corners, get average color from each\n                    const pixelDimension = 10;\n                    const colors = [\n                      ctx.getImageData(0, 0, pixelDimension, pixelDimension)\n                        .data,\n                      ctx.getImageData(\n                        e.target.width - pixelDimension,\n                        0,\n                        pixelDimension,\n                        pixelDimension,\n                      ).data,\n                      ctx.getImageData(\n                        0,\n                        e.target.height - pixelDimension,\n                        pixelDimension,\n                        pixelDimension,\n                      ).data,\n                      ctx.getImageData(\n                        e.target.width - pixelDimension,\n                        e.target.height - pixelDimension,\n                        pixelDimension,\n                        pixelDimension,\n                      ).data,\n                    ].map((data) => {\n                      let r = 0;\n                      let g = 0;\n                      let b = 0;\n                      let a = 0;\n                      for (let i = 0; i < data.length; i += 4) {\n                        r += data[i];\n                        g += data[i + 1];\n                        b += data[i + 2];\n                        a += data[i + 3];\n                      }\n                      const dataLength = data.length / 4;\n                      return [\n                        r / dataLength,\n                        g / dataLength,\n                        b / dataLength,\n                        a / dataLength,\n                      ];\n                    });\n                    const rgbColors = colors.map((color) => {\n                      const [r, g, b, a] = lightenRGB(color);\n                      return `rgba(${r}, ${g}, ${b}, ${a})`;\n                    });\n                    setHeaderCornerColors(rgbColors);\n                    console.log({ colors, rgbColors });\n                  } catch (e) {\n                    // Silently fail\n                  }\n                }}\n              />\n            )}\n            <header>\n              {standalone ? (\n                <Menu2\n                  shift={\n                    window.matchMedia('(min-width: calc(40em))').matches\n                      ? 114\n                      : 64\n                  }\n                  menuButton={\n                    <div>\n                      <AccountBlock\n                        account={info}\n                        instance={instance}\n                        avatarSize=\"xxxl\"\n                        onClick={() => {}}\n                      />\n                    </div>\n                  }\n                >\n                  <div class=\"szh-menu__header\">\n                    <AccountHandleInfo acct={acct} instance={instance} />\n                  </div>\n                  <MenuItem\n                    onClick={() => {\n                      const handle = `@${acct}`;\n                      try {\n                        navigator.clipboard.writeText(handle);\n                        showToast('Handle copied');\n                      } catch (e) {\n                        console.error(e);\n                        showToast('Unable to copy handle');\n                      }\n                    }}\n                  >\n                    <Icon icon=\"link\" />\n                    <span>Copy handle</span>\n                  </MenuItem>\n                  <MenuItem href={url} target=\"_blank\">\n                    <Icon icon=\"external\" />\n                    <span>Go to original profile page</span>\n                  </MenuItem>\n                </Menu2>\n              ) : (\n                <AccountBlock\n                  account={info}\n                  instance={instance}\n                  avatarSize=\"xxxl\"\n                  internal\n                />\n              )}\n            </header>\n            <div class=\"faux-header-bg\" aria-hidden=\"true\" />\n            <main>\n              {!!memorial && <span class=\"tag\">In Memoriam</span>}\n              {!!bot && (\n                <span class=\"tag\">\n                  <Icon icon=\"bot\" /> Automated\n                </span>\n              )}\n              {!!group && (\n                <span class=\"tag\">\n                  <Icon icon=\"group\" /> Group\n                </span>\n              )}\n              {roles?.map((role) => (\n                <span class=\"tag\">\n                  {role.name}\n                  {!!accountInstance && (\n                    <>\n                      {' '}\n                      <span class=\"more-insignificant\">{accountInstance}</span>\n                    </>\n                  )}\n                </span>\n              ))}\n              <div\n                class=\"note\"\n                dir=\"auto\"\n                onClick={handleContentLinks({\n                  instance: currentInstance,\n                })}\n                dangerouslySetInnerHTML={{\n                  __html: enhanceContent(note, { emojis }),\n                }}\n              />\n              <div class=\"account-metadata-box\">\n                {fields?.length > 0 && (\n                  <div class=\"profile-metadata\">\n                    {fields.map(({ name, value, verifiedAt }, i) => (\n                      <div\n                        class={`profile-field ${\n                          verifiedAt ? 'profile-verified' : ''\n                        }`}\n                        key={name + i}\n                        dir=\"auto\"\n                      >\n                        <b>\n                          <EmojiText text={name} emojis={emojis} />{' '}\n                          {!!verifiedAt && (\n                            <Icon icon=\"check-circle\" size=\"s\" />\n                          )}\n                        </b>\n                        <p\n                          dangerouslySetInnerHTML={{\n                            __html: enhanceContent(value, { emojis }),\n                          }}\n                        />\n                      </div>\n                    ))}\n                  </div>\n                )}\n                <div class=\"stats\">\n                  <LinkOrDiv\n                    tabIndex={0}\n                    to={accountLink}\n                    onClick={() => {\n                      // states.showAccount = false;\n                      setTimeout(() => {\n                        states.showGenericAccounts = {\n                          heading: 'Followers',\n                          fetchAccounts: fetchFollowers,\n                          instance,\n                          excludeRelationshipAttrs: isSelf\n                            ? ['followedBy']\n                            : [],\n                        };\n                      }, 0);\n                    }}\n                  >\n                    {!!familiarFollowers.length && (\n                      <span class=\"shazam-container-horizontal\">\n                        <span class=\"shazam-container-inner stats-avatars-bunch\">\n                          {familiarFollowers.map((follower) => (\n                            <Avatar\n                              url={follower.avatarStatic}\n                              size=\"s\"\n                              alt={`${follower.displayName} @${follower.acct}`}\n                              squircle={follower?.bot}\n                            />\n                          ))}\n                        </span>\n                      </span>\n                    )}\n                    <span title={followersCount}>\n                      {shortenNumber(followersCount)}\n                    </span>{' '}\n                    Followers\n                  </LinkOrDiv>\n                  <LinkOrDiv\n                    class=\"insignificant\"\n                    tabIndex={0}\n                    to={accountLink}\n                    onClick={() => {\n                      // states.showAccount = false;\n                      setTimeout(() => {\n                        states.showGenericAccounts = {\n                          heading: 'Following',\n                          fetchAccounts: fetchFollowing,\n                          instance,\n                          excludeRelationshipAttrs: isSelf ? ['following'] : [],\n                        };\n                      }, 0);\n                    }}\n                  >\n                    <span title={followingCount}>\n                      {shortenNumber(followingCount)}\n                    </span>{' '}\n                    Following\n                    <br />\n                  </LinkOrDiv>\n                  <LinkOrDiv\n                    class=\"insignificant\"\n                    to={accountLink}\n                    // onClick={\n                    //   standalone\n                    //     ? undefined\n                    //     : () => {\n                    //         hideAllModals();\n                    //       }\n                    // }\n                  >\n                    <span title={statusesCount}>\n                      {shortenNumber(statusesCount)}\n                    </span>{' '}\n                    Posts\n                  </LinkOrDiv>\n                  {!!createdAt && (\n                    <div class=\"insignificant\">\n                      Joined{' '}\n                      <time datetime={createdAt}>\n                        {niceDateTime(createdAt, {\n                          hideTime: true,\n                        })}\n                      </time>\n                    </div>\n                  )}\n                </div>\n              </div>\n              {!!postingStats && (\n                <LinkOrDiv\n                  to={accountLink}\n                  class=\"account-metadata-box\"\n                  // onClick={() => {\n                  //   states.showAccount = false;\n                  // }}\n                >\n                  <div class=\"shazam-container\">\n                    <div class=\"shazam-container-inner\">\n                      {hasPostingStats ? (\n                        <div\n                          class=\"posting-stats\"\n                          title={`${Math.round(\n                            (postingStats.originals / postingStats.total) * 100,\n                          )}% original posts, ${Math.round(\n                            (postingStats.replies / postingStats.total) * 100,\n                          )}% replies, ${Math.round(\n                            (postingStats.boosts / postingStats.total) * 100,\n                          )}% boosts`}\n                        >\n                          <div>\n                            {postingStats.daysSinceLastPost < 365\n                              ? `Last ${postingStats.total} post${\n                                  postingStats.total > 1 ? 's' : ''\n                                } in the past \n                      ${postingStats.daysSinceLastPost} day${\n                                  postingStats.daysSinceLastPost > 1 ? 's' : ''\n                                }`\n                              : `\n                      Last ${postingStats.total} posts in the past year(s)\n                      `}\n                          </div>\n                          <div\n                            class=\"posting-stats-bar\"\n                            style={{\n                              // [originals | replies | boosts]\n                              '--originals-percentage': `${\n                                (postingStats.originals / postingStats.total) *\n                                100\n                              }%`,\n                              '--replies-percentage': `${\n                                ((postingStats.originals +\n                                  postingStats.replies) /\n                                  postingStats.total) *\n                                100\n                              }%`,\n                            }}\n                          />\n                          <div class=\"posting-stats-legends\">\n                            <span class=\"ib\">\n                              <span class=\"posting-stats-legend-item posting-stats-legend-item-originals\" />{' '}\n                              Original\n                            </span>{' '}\n                            <span class=\"ib\">\n                              <span class=\"posting-stats-legend-item posting-stats-legend-item-replies\" />{' '}\n                              Replies\n                            </span>{' '}\n                            <span class=\"ib\">\n                              <span class=\"posting-stats-legend-item posting-stats-legend-item-boosts\" />{' '}\n                              Boosts\n                            </span>\n                          </div>\n                        </div>\n                      ) : (\n                        <div class=\"posting-stats\">Post stats unavailable.</div>\n                      )}\n                    </div>\n                  </div>\n                </LinkOrDiv>\n              )}\n              <div class=\"account-metadata-box\">\n                <div\n                  class=\"shazam-container no-animation\"\n                  hidden={!!postingStats}\n                >\n                  <div class=\"shazam-container-inner\">\n                    <button\n                      type=\"button\"\n                      class=\"posting-stats-button\"\n                      disabled={postingStatsUIState === 'loading'}\n                      onClick={() => {\n                        renderPostingStats();\n                      }}\n                    >\n                      <div\n                        class={`posting-stats-bar posting-stats-icon ${\n                          postingStatsUIState === 'loading' ? 'loading' : ''\n                        }`}\n                        style={{\n                          '--originals-percentage': '33%',\n                          '--replies-percentage': '66%',\n                        }}\n                      />\n                      View post stats{' '}\n                      {/* <Loader\n                        abrupt\n                        hidden={postingStatsUIState !== 'loading'}\n                      /> */}\n                    </button>\n                  </div>\n                </div>\n              </div>\n            </main>\n            <footer>\n              <RelatedActions\n                info={info}\n                instance={instance}\n                standalone={standalone}\n                authenticated={authenticated}\n                onRelationshipChange={onRelationshipChange}\n                onProfileUpdate={onProfileUpdate}\n              />\n            </footer>\n          </>\n        )\n      )}\n    </div>\n  );\n}\n\nconst FAMILIAR_FOLLOWERS_LIMIT = 3;\n\nfunction RelatedActions({\n  info,\n  instance,\n  standalone,\n  authenticated,\n  onRelationshipChange = () => {},\n  onProfileUpdate = () => {},\n}) {\n  if (!info) return null;\n  const {\n    masto: currentMasto,\n    instance: currentInstance,\n    authenticated: currentAuthenticated,\n  } = api();\n  const sameInstance = instance === currentInstance;\n\n  const [relationshipUIState, setRelationshipUIState] = useState('default');\n  const [relationship, setRelationship] = useState(null);\n\n  const { id, acct, url, username, locked, lastStatusAt, note, fields, moved } =\n    info;\n  const accountID = useRef(id);\n\n  const {\n    following,\n    showingReblogs,\n    notifying,\n    followedBy,\n    blocking,\n    blockedBy,\n    muting,\n    mutingNotifications,\n    requested,\n    domainBlocking,\n    endorsed,\n    note: privateNote,\n  } = relationship || {};\n\n  const [currentInfo, setCurrentInfo] = useState(null);\n  const [isSelf, setIsSelf] = useState(false);\n\n  useEffect(() => {\n    if (info) {\n      const currentAccount = store.session.get('currentAccount');\n      let currentID;\n      (async () => {\n        if (sameInstance && authenticated) {\n          currentID = id;\n        } else if (!sameInstance && currentAuthenticated) {\n          // Grab this account from my logged-in instance\n          const acctHasInstance = info.acct.includes('@');\n          try {\n            const results = await currentMasto.v2.search.fetch({\n              q: acctHasInstance ? info.acct : `${info.username}@${instance}`,\n              type: 'accounts',\n              limit: 1,\n              resolve: true,\n            });\n            console.log('🥏 Fetched account from logged-in instance', results);\n            if (results.accounts.length) {\n              currentID = results.accounts[0].id;\n              setCurrentInfo(results.accounts[0]);\n            }\n          } catch (e) {\n            console.error(e);\n          }\n        }\n\n        if (!currentID) return;\n\n        if (currentAccount === currentID) {\n          // It's myself!\n          setIsSelf(true);\n          return;\n        }\n\n        accountID.current = currentID;\n\n        if (moved) return;\n\n        setRelationshipUIState('loading');\n\n        const fetchRelationships = currentMasto.v1.accounts.relationships.fetch(\n          {\n            id: [currentID],\n          },\n        );\n\n        try {\n          const relationships = await fetchRelationships;\n          console.log('fetched relationship', relationships);\n          setRelationshipUIState('default');\n\n          if (relationships.length) {\n            const relationship = relationships[0];\n            setRelationship(relationship);\n            onRelationshipChange({ relationship, currentID });\n          }\n        } catch (e) {\n          console.error(e);\n          setRelationshipUIState('error');\n        }\n      })();\n    }\n  }, [info, authenticated]);\n\n  useEffect(() => {\n    if (info && isSelf) {\n      updateAccount(info);\n    }\n  }, [info, isSelf]);\n\n  const loading = relationshipUIState === 'loading';\n\n  const [showTranslatedBio, setShowTranslatedBio] = useState(false);\n  const [showAddRemoveLists, setShowAddRemoveLists] = useState(false);\n  const [showPrivateNoteModal, setShowPrivateNoteModal] = useState(false);\n  const [showEditProfile, setShowEditProfile] = useState(false);\n  const [lists, setLists] = useState([]);\n\n  return (\n    <>\n      <div class=\"actions\">\n        <span>\n          {followedBy ? (\n            <span class=\"tag\">Follows you</span>\n          ) : !!lastStatusAt ? (\n            <small class=\"insignificant\">\n              Last post:{' '}\n              <span class=\"ib\">\n                {niceDateTime(lastStatusAt, {\n                  hideTime: true,\n                })}\n              </span>\n            </small>\n          ) : (\n            <span />\n          )}\n          {muting && <span class=\"tag danger\">Muted</span>}\n          {blocking && <span class=\"tag danger\">Blocked</span>}\n        </span>{' '}\n        <span class=\"buttons\">\n          {!!privateNote && (\n            <button\n              type=\"button\"\n              class=\"private-note-tag\"\n              title=\"Private note\"\n              onClick={() => {\n                setShowPrivateNoteModal(true);\n              }}\n              dir=\"auto\"\n            >\n              <span>{privateNote}</span>\n            </button>\n          )}\n          <Menu2\n            portal={{\n              target: document.body,\n            }}\n            containerProps={{\n              style: {\n                // Higher than the backdrop\n                zIndex: 1001,\n              },\n            }}\n            align=\"center\"\n            position=\"anchor\"\n            overflow=\"auto\"\n            menuButton={\n              <button\n                type=\"button\"\n                title=\"More\"\n                class=\"plain\"\n                disabled={loading}\n              >\n                <Icon icon=\"more\" size=\"l\" alt=\"More\" />\n              </button>\n            }\n            onMenuChange={(e) => {\n              if (following && e.open) {\n                // Fetch lists that have this account\n                (async () => {\n                  try {\n                    const lists = await currentMasto.v1.accounts\n                      .$select(accountID.current)\n                      .lists.list();\n                    console.log('fetched account lists', lists);\n                    setLists(lists);\n                  } catch (e) {\n                    console.error(e);\n                  }\n                })();\n              }\n            }}\n          >\n            {currentAuthenticated && !isSelf && (\n              <>\n                <MenuItem\n                  onClick={() => {\n                    states.showCompose = {\n                      draftStatus: {\n                        status: `@${currentInfo?.acct || acct} `,\n                      },\n                    };\n                  }}\n                >\n                  <Icon icon=\"at\" />\n                  <span>Mention @{username}</span>\n                </MenuItem>\n                <MenuItem\n                  onClick={() => {\n                    setShowTranslatedBio(true);\n                  }}\n                >\n                  <Icon icon=\"translate\" />\n                  <span>Translate bio</span>\n                </MenuItem>\n                <MenuItem\n                  onClick={() => {\n                    setShowPrivateNoteModal(true);\n                  }}\n                >\n                  <Icon icon=\"pencil\" />\n                  <span>\n                    {privateNote ? 'Edit private note' : 'Add private note'}\n                  </span>\n                </MenuItem>\n                {following && !!relationship && (\n                  <>\n                    <MenuItem\n                      onClick={() => {\n                        setRelationshipUIState('loading');\n                        (async () => {\n                          try {\n                            const rel = await currentMasto.v1.accounts\n                              .$select(accountID.current)\n                              .follow({\n                                notify: !notifying,\n                              });\n                            if (rel) setRelationship(rel);\n                            setRelationshipUIState('default');\n                            showToast(\n                              rel.notifying\n                                ? `Notifications enabled for @${username}'s posts.`\n                                : ` Notifications disabled for @${username}'s posts.`,\n                            );\n                          } catch (e) {\n                            alert(e);\n                            setRelationshipUIState('error');\n                          }\n                        })();\n                      }}\n                    >\n                      <Icon icon=\"notification\" />\n                      <span>\n                        {notifying\n                          ? 'Disable notifications'\n                          : 'Enable notifications'}\n                      </span>\n                    </MenuItem>\n                    <MenuItem\n                      onClick={() => {\n                        setRelationshipUIState('loading');\n                        (async () => {\n                          try {\n                            const rel = await currentMasto.v1.accounts\n                              .$select(accountID.current)\n                              .follow({\n                                reblogs: !showingReblogs,\n                              });\n                            if (rel) setRelationship(rel);\n                            setRelationshipUIState('default');\n                            showToast(\n                              rel.showingReblogs\n                                ? `Boosts from @${username} disabled.`\n                                : `Boosts from @${username} enabled.`,\n                            );\n                          } catch (e) {\n                            alert(e);\n                            setRelationshipUIState('error');\n                          }\n                        })();\n                      }}\n                    >\n                      <Icon icon=\"rocket\" />\n                      <span>\n                        {showingReblogs ? 'Disable boosts' : 'Enable boosts'}\n                      </span>\n                    </MenuItem>\n                  </>\n                )}\n                {/* Add/remove from lists is only possible if following the account */}\n                {following && (\n                  <MenuItem\n                    onClick={() => {\n                      setShowAddRemoveLists(true);\n                    }}\n                  >\n                    <Icon icon=\"list\" />\n                    {lists.length ? (\n                      <>\n                        <small class=\"menu-grow\">\n                          Add/Remove from Lists\n                          <br />\n                          <span class=\"more-insignificant\">\n                            {lists.map((list) => list.title).join(', ')}\n                          </span>\n                        </small>\n                        <small class=\"more-insignificant\">{lists.length}</small>\n                      </>\n                    ) : (\n                      <span>Add/Remove from Lists</span>\n                    )}\n                  </MenuItem>\n                )}\n                <MenuDivider />\n              </>\n            )}\n            <MenuItem\n              onClick={() => {\n                const handle = `@${currentInfo?.acct || acct}`;\n                try {\n                  navigator.clipboard.writeText(handle);\n                  showToast('Handle copied');\n                } catch (e) {\n                  console.error(e);\n                  showToast('Unable to copy handle');\n                }\n              }}\n            >\n              <Icon icon=\"copy\" />\n              <small>\n                Copy handle\n                <br />\n                <span class=\"more-insignificant\">\n                  @{currentInfo?.acct || acct}\n                </span>\n              </small>\n            </MenuItem>\n            <MenuItem href={url} target=\"_blank\">\n              <Icon icon=\"external\" />\n              <small class=\"menu-double-lines\">{niceAccountURL(url)}</small>\n            </MenuItem>\n            <div class=\"menu-horizontal\">\n              <MenuItem\n                onClick={() => {\n                  // Copy url to clipboard\n                  try {\n                    navigator.clipboard.writeText(url);\n                    showToast('Link copied');\n                  } catch (e) {\n                    console.error(e);\n                    showToast('Unable to copy link');\n                  }\n                }}\n              >\n                <Icon icon=\"link\" />\n                <span>Copy</span>\n              </MenuItem>\n              {navigator?.share &&\n                navigator?.canShare?.({\n                  url,\n                }) && (\n                  <MenuItem\n                    onClick={() => {\n                      try {\n                        navigator.share({\n                          url,\n                        });\n                      } catch (e) {\n                        console.error(e);\n                        alert(\"Sharing doesn't seem to work.\");\n                      }\n                    }}\n                  >\n                    <Icon icon=\"share\" />\n                    <span>Share…</span>\n                  </MenuItem>\n                )}\n            </div>\n            {!!relationship && (\n              <>\n                <MenuDivider />\n                {muting ? (\n                  <MenuItem\n                    onClick={() => {\n                      setRelationshipUIState('loading');\n                      (async () => {\n                        try {\n                          const newRelationship = await currentMasto.v1.accounts\n                            .$select(currentInfo?.id || id)\n                            .unmute();\n                          console.log('unmuting', newRelationship);\n                          setRelationship(newRelationship);\n                          setRelationshipUIState('default');\n                          showToast(`Unmuted @${username}`);\n                          states.reloadGenericAccounts.id = 'mute';\n                          states.reloadGenericAccounts.counter++;\n                        } catch (e) {\n                          console.error(e);\n                          setRelationshipUIState('error');\n                        }\n                      })();\n                    }}\n                  >\n                    <Icon icon=\"unmute\" />\n                    <span>Unmute @{username}</span>\n                  </MenuItem>\n                ) : (\n                  <SubMenu\n                    menuClassName=\"menu-blur\"\n                    openTrigger=\"clickOnly\"\n                    direction=\"bottom\"\n                    overflow=\"auto\"\n                    shift={16}\n                    label={\n                      <>\n                        <Icon icon=\"mute\" />\n                        <span class=\"menu-grow\">Mute @{username}…</span>\n                        <span\n                          style={{\n                            textOverflow: 'clip',\n                          }}\n                        >\n                          <Icon icon=\"time\" />\n                          <Icon icon=\"chevron-right\" />\n                        </span>\n                      </>\n                    }\n                  >\n                    <div class=\"menu-wrap\">\n                      {MUTE_DURATIONS.map((duration) => (\n                        <MenuItem\n                          onClick={() => {\n                            setRelationshipUIState('loading');\n                            (async () => {\n                              try {\n                                const newRelationship =\n                                  await currentMasto.v1.accounts\n                                    .$select(currentInfo?.id || id)\n                                    .mute({\n                                      duration,\n                                    });\n                                console.log('muting', newRelationship);\n                                setRelationship(newRelationship);\n                                setRelationshipUIState('default');\n                                showToast(\n                                  `Muted @${username} for ${MUTE_DURATIONS_LABELS[duration]}`,\n                                );\n                                states.reloadGenericAccounts.id = 'mute';\n                                states.reloadGenericAccounts.counter++;\n                              } catch (e) {\n                                console.error(e);\n                                setRelationshipUIState('error');\n                                showToast(`Unable to mute @${username}`);\n                              }\n                            })();\n                          }}\n                        >\n                          {MUTE_DURATIONS_LABELS[duration]}\n                        </MenuItem>\n                      ))}\n                    </div>\n                  </SubMenu>\n                )}\n                <MenuConfirm\n                  subMenu\n                  confirm={!blocking}\n                  confirmLabel={\n                    <>\n                      <Icon icon=\"block\" />\n                      <span>Block @{username}?</span>\n                    </>\n                  }\n                  menuItemClassName=\"danger\"\n                  onClick={() => {\n                    // if (!blocking && !confirm(`Block @${username}?`)) {\n                    //   return;\n                    // }\n                    setRelationshipUIState('loading');\n                    (async () => {\n                      try {\n                        if (blocking) {\n                          const newRelationship = await currentMasto.v1.accounts\n                            .$select(currentInfo?.id || id)\n                            .unblock();\n                          console.log('unblocking', newRelationship);\n                          setRelationship(newRelationship);\n                          setRelationshipUIState('default');\n                          showToast(`Unblocked @${username}`);\n                        } else {\n                          const newRelationship = await currentMasto.v1.accounts\n                            .$select(currentInfo?.id || id)\n                            .block();\n                          console.log('blocking', newRelationship);\n                          setRelationship(newRelationship);\n                          setRelationshipUIState('default');\n                          showToast(`Blocked @${username}`);\n                        }\n                        states.reloadGenericAccounts.id = 'block';\n                        states.reloadGenericAccounts.counter++;\n                      } catch (e) {\n                        console.error(e);\n                        setRelationshipUIState('error');\n                        if (blocking) {\n                          showToast(`Unable to unblock @${username}`);\n                        } else {\n                          showToast(`Unable to block @${username}`);\n                        }\n                      }\n                    })();\n                  }}\n                >\n                  {blocking ? (\n                    <>\n                      <Icon icon=\"unblock\" />\n                      <span>Unblock @{username}</span>\n                    </>\n                  ) : (\n                    <>\n                      <Icon icon=\"block\" />\n                      <span>Block @{username}…</span>\n                    </>\n                  )}\n                </MenuConfirm>\n                <MenuItem\n                  className=\"danger\"\n                  onClick={() => {\n                    states.showReportModal = {\n                      account: currentInfo || info,\n                    };\n                  }}\n                >\n                  <Icon icon=\"flag\" />\n                  <span>Report @{username}…</span>\n                </MenuItem>\n              </>\n            )}\n            {currentAuthenticated && isSelf && standalone && (\n              <>\n                <MenuDivider />\n                <MenuItem\n                  onClick={() => {\n                    setShowEditProfile(true);\n                  }}\n                >\n                  <Icon icon=\"pencil\" />\n                  <span>Edit profile</span>\n                </MenuItem>\n              </>\n            )}\n            {import.meta.env.DEV && currentAuthenticated && isSelf && (\n              <>\n                <MenuDivider />\n                <MenuItem\n                  onClick={async () => {\n                    const relationships =\n                      await currentMasto.v1.accounts.relationships.fetch({\n                        id: [accountID.current],\n                      });\n                    const { note } = relationships[0] || {};\n                    if (note) {\n                      alert(note);\n                      console.log(note);\n                    }\n                  }}\n                >\n                  <Icon icon=\"pencil\" />\n                  <span>See note</span>\n                </MenuItem>\n              </>\n            )}\n          </Menu2>\n          {!relationship && relationshipUIState === 'loading' && (\n            <Loader abrupt />\n          )}\n          {!!relationship && (\n            <MenuConfirm\n              confirm={following || requested}\n              confirmLabel={\n                <span>\n                  {requested\n                    ? 'Withdraw follow request?'\n                    : `Unfollow @${info.acct || info.username}?`}\n                </span>\n              }\n              menuItemClassName=\"danger\"\n              align=\"end\"\n              disabled={loading}\n              onClick={() => {\n                setRelationshipUIState('loading');\n                (async () => {\n                  try {\n                    let newRelationship;\n\n                    if (following || requested) {\n                      // const yes = confirm(\n                      //   requested\n                      //     ? 'Withdraw follow request?'\n                      //     : `Unfollow @${info.acct || info.username}?`,\n                      // );\n\n                      // if (yes) {\n                      newRelationship = await currentMasto.v1.accounts\n                        .$select(accountID.current)\n                        .unfollow();\n                      // }\n                    } else {\n                      newRelationship = await currentMasto.v1.accounts\n                        .$select(accountID.current)\n                        .follow();\n                    }\n\n                    if (newRelationship) setRelationship(newRelationship);\n                    setRelationshipUIState('default');\n                  } catch (e) {\n                    alert(e);\n                    setRelationshipUIState('error');\n                  }\n                })();\n              }}\n            >\n              <button\n                type=\"button\"\n                class={`${following || requested ? 'light swap' : ''}`}\n                data-swap-state={following || requested ? 'danger' : ''}\n                disabled={loading}\n              >\n                {following ? (\n                  <>\n                    <span>Following</span>\n                    <span>Unfollow…</span>\n                  </>\n                ) : requested ? (\n                  <>\n                    <span>Requested</span>\n                    <span>Withdraw…</span>\n                  </>\n                ) : locked ? (\n                  <>\n                    <Icon icon=\"lock\" /> <span>Follow</span>\n                  </>\n                ) : (\n                  'Follow'\n                )}\n              </button>\n            </MenuConfirm>\n          )}\n        </span>\n      </div>\n      {!!showTranslatedBio && (\n        <Modal\n          onClose={() => {\n            setShowTranslatedBio(false);\n          }}\n        >\n          <TranslatedBioSheet\n            note={note}\n            fields={fields}\n            onClose={() => setShowTranslatedBio(false)}\n          />\n        </Modal>\n      )}\n      {!!showAddRemoveLists && (\n        <Modal\n          onClose={() => {\n            setShowAddRemoveLists(false);\n          }}\n        >\n          <AddRemoveListsSheet\n            accountID={accountID.current}\n            onClose={() => setShowAddRemoveLists(false)}\n          />\n        </Modal>\n      )}\n      {!!showPrivateNoteModal && (\n        <Modal\n          onClose={() => {\n            setShowPrivateNoteModal(false);\n          }}\n        >\n          <PrivateNoteSheet\n            account={info}\n            note={privateNote}\n            onRelationshipChange={(relationship) => {\n              setRelationship(relationship);\n              // onRelationshipChange({ relationship, currentID: accountID.current });\n            }}\n            onClose={() => setShowPrivateNoteModal(false)}\n          />\n        </Modal>\n      )}\n      {!!showEditProfile && (\n        <Modal\n          onClose={() => {\n            setShowEditProfile(false);\n          }}\n        >\n          <EditProfileSheet\n            onClose={({ state, account } = {}) => {\n              setShowEditProfile(false);\n              if (state === 'success' && account) {\n                onProfileUpdate(account);\n              }\n            }}\n          />\n        </Modal>\n      )}\n    </>\n  );\n}\n\n// Apply more alpha if high luminence\nfunction lightenRGB([r, g, b]) {\n  const luminence = 0.2126 * r + 0.7152 * g + 0.0722 * b;\n  console.log('luminence', luminence);\n  let alpha;\n  if (luminence >= 220) {\n    alpha = 1;\n  } else if (luminence <= 50) {\n    alpha = 0.1;\n  } else {\n    alpha = luminence / 255;\n  }\n  alpha = Math.min(1, alpha);\n  return [r, g, b, alpha];\n}\n\nfunction niceAccountURL(url) {\n  if (!url) return;\n  const urlObj = new URL(url);\n  const { host, pathname } = urlObj;\n  const path = pathname.replace(/\\/$/, '').replace(/^\\//, '');\n  return (\n    <>\n      <span class=\"more-insignificant\">{host}/</span>\n      <wbr />\n      <span>{path}</span>\n    </>\n  );\n}\n\nfunction TranslatedBioSheet({ note, fields, onClose }) {\n  const fieldsText =\n    fields\n      ?.map(({ name, value }) => `${name}\\n${getHTMLText(value)}`)\n      .join('\\n\\n') || '';\n\n  const text = getHTMLText(note) + (fieldsText ? `\\n\\n${fieldsText}` : '');\n\n  return (\n    <div class=\"sheet\">\n      {!!onClose && (\n        <button type=\"button\" class=\"sheet-close\" onClick={onClose}>\n          <Icon icon=\"x\" />\n        </button>\n      )}\n      <header>\n        <h2>Translated Bio</h2>\n      </header>\n      <main>\n        <p\n          style={{\n            whiteSpace: 'pre-wrap',\n          }}\n        >\n          {text}\n        </p>\n        <TranslationBlock forceTranslate text={text} />\n      </main>\n    </div>\n  );\n}\n\nfunction AddRemoveListsSheet({ accountID, onClose }) {\n  const { masto } = api();\n  const [uiState, setUIState] = useState('default');\n  const [lists, setLists] = useState([]);\n  const [listsContainingAccount, setListsContainingAccount] = useState([]);\n  const [reloadCount, reload] = useReducer((c) => c + 1, 0);\n\n  useEffect(() => {\n    setUIState('loading');\n    (async () => {\n      try {\n        const lists = await getLists();\n        setLists(lists);\n        const listsContainingAccount = await masto.v1.accounts\n          .$select(accountID)\n          .lists.list();\n        console.log({ lists, listsContainingAccount });\n        setListsContainingAccount(listsContainingAccount);\n        setUIState('default');\n      } catch (e) {\n        console.error(e);\n        setUIState('error');\n      }\n    })();\n  }, [reloadCount]);\n\n  const [showListAddEditModal, setShowListAddEditModal] = useState(false);\n\n  return (\n    <div class=\"sheet\" id=\"list-add-remove-container\">\n      {!!onClose && (\n        <button type=\"button\" class=\"sheet-close\" onClick={onClose}>\n          <Icon icon=\"x\" />\n        </button>\n      )}\n      <header>\n        <h2>Add/Remove from Lists</h2>\n      </header>\n      <main>\n        {lists.length > 0 ? (\n          <ul class=\"list-add-remove\">\n            {lists.map((list) => {\n              const inList = listsContainingAccount.some(\n                (l) => l.id === list.id,\n              );\n              return (\n                <li>\n                  <button\n                    type=\"button\"\n                    class={`light ${inList ? 'checked' : ''}`}\n                    disabled={uiState === 'loading'}\n                    onClick={() => {\n                      setUIState('loading');\n                      (async () => {\n                        try {\n                          if (inList) {\n                            await masto.v1.lists\n                              .$select(list.id)\n                              .accounts.remove({\n                                accountIds: [accountID],\n                              });\n                          } else {\n                            await masto.v1.lists\n                              .$select(list.id)\n                              .accounts.create({\n                                accountIds: [accountID],\n                              });\n                          }\n                          // setUIState('default');\n                          reload();\n                        } catch (e) {\n                          console.error(e);\n                          setUIState('error');\n                          alert(\n                            inList\n                              ? 'Unable to remove from list.'\n                              : 'Unable to add to list.',\n                          );\n                        }\n                      })();\n                    }}\n                  >\n                    <Icon icon=\"check-circle\" />\n                    <span>{list.title}</span>\n                  </button>\n                </li>\n              );\n            })}\n          </ul>\n        ) : uiState === 'loading' ? (\n          <p class=\"ui-state\">\n            <Loader abrupt />\n          </p>\n        ) : uiState === 'error' ? (\n          <p class=\"ui-state\">Unable to load lists.</p>\n        ) : (\n          <p class=\"ui-state\">No lists.</p>\n        )}\n        <button\n          type=\"button\"\n          class=\"plain2\"\n          onClick={() => setShowListAddEditModal(true)}\n          disabled={uiState !== 'default'}\n        >\n          <Icon icon=\"plus\" size=\"l\" /> <span>New list</span>\n        </button>\n      </main>\n      {showListAddEditModal && (\n        <Modal\n          onClick={(e) => {\n            if (e.target === e.currentTarget) {\n              setShowListAddEditModal(false);\n            }\n          }}\n        >\n          <ListAddEdit\n            list={showListAddEditModal?.list}\n            onClose={(result) => {\n              if (result.state === 'success') {\n                reload();\n              }\n              setShowListAddEditModal(false);\n            }}\n          />\n        </Modal>\n      )}\n    </div>\n  );\n}\n\nfunction PrivateNoteSheet({\n  account,\n  note: initialNote,\n  onRelationshipChange = () => {},\n  onClose = () => {},\n}) {\n  const { masto } = api();\n  const [uiState, setUIState] = useState('default');\n  const textareaRef = useRef(null);\n\n  useEffect(() => {\n    let timer;\n    if (textareaRef.current && !initialNote) {\n      timer = setTimeout(() => {\n        textareaRef.current.focus?.();\n      }, 100);\n    }\n    return () => {\n      clearTimeout(timer);\n    };\n  }, []);\n\n  return (\n    <div class=\"sheet\" id=\"private-note-container\">\n      {!!onClose && (\n        <button type=\"button\" class=\"sheet-close\" onClick={onClose}>\n          <Icon icon=\"x\" />\n        </button>\n      )}\n      <header>\n        <b>Private note about @{account?.username || account?.acct}</b>\n      </header>\n      <main>\n        <form\n          onSubmit={(e) => {\n            e.preventDefault();\n            const formData = new FormData(e.target);\n            const note = formData.get('note');\n            if (note?.trim() !== initialNote?.trim()) {\n              setUIState('loading');\n              (async () => {\n                try {\n                  const newRelationship = await masto.v1.accounts\n                    .$select(account?.id)\n                    .note.create({\n                      comment: note,\n                    });\n                  console.log('updated relationship', newRelationship);\n                  setUIState('default');\n                  onRelationshipChange(newRelationship);\n                  onClose();\n                } catch (e) {\n                  console.error(e);\n                  setUIState('error');\n                  alert(e?.message || 'Unable to update private note.');\n                }\n              })();\n            }\n          }}\n        >\n          <textarea\n            ref={textareaRef}\n            name=\"note\"\n            disabled={uiState === 'loading'}\n          >\n            {initialNote}\n          </textarea>\n          <footer>\n            <button\n              type=\"button\"\n              class=\"light\"\n              disabled={uiState === 'loading'}\n              onClick={() => {\n                onClose?.();\n              }}\n            >\n              Cancel\n            </button>\n            <span>\n              <Loader abrupt hidden={uiState !== 'loading'} />\n              <button disabled={uiState === 'loading'} type=\"submit\">\n                Save &amp; close\n              </button>\n            </span>\n          </footer>\n        </form>\n      </main>\n    </div>\n  );\n}\n\nfunction EditProfileSheet({ onClose = () => {} }) {\n  const { masto } = api();\n  const [uiState, setUIState] = useState('loading');\n  const [account, setAccount] = useState(null);\n\n  useEffect(() => {\n    (async () => {\n      try {\n        const acc = await masto.v1.accounts.verifyCredentials();\n        setAccount(acc);\n        setUIState('default');\n      } catch (e) {\n        console.error(e);\n        setUIState('error');\n      }\n    })();\n  }, []);\n\n  console.log('EditProfileSheet', account);\n  const { displayName, source } = account || {};\n  const { note, fields } = source || {};\n  const fieldsAttributesRef = useRef(null);\n\n  return (\n    <div class=\"sheet\" id=\"edit-profile-container\">\n      {!!onClose && (\n        <button type=\"button\" class=\"sheet-close\" onClick={onClose}>\n          <Icon icon=\"x\" />\n        </button>\n      )}\n      <header>\n        <b>Edit profile</b>\n      </header>\n      <main>\n        {uiState === 'loading' ? (\n          <p class=\"ui-state\">\n            <Loader abrupt />\n          </p>\n        ) : (\n          <form\n            onSubmit={(e) => {\n              e.preventDefault();\n              const formData = new FormData(e.target);\n              const displayName = formData.get('display_name');\n              const note = formData.get('note');\n              const fieldsAttributesFields =\n                fieldsAttributesRef.current.querySelectorAll(\n                  'input[name^=\"fields_attributes\"]',\n                );\n              const fieldsAttributes = [];\n              fieldsAttributesFields.forEach((field) => {\n                const name = field.name;\n                const [_, index, key] =\n                  name.match(/fields_attributes\\[(\\d+)\\]\\[(.+)\\]/) || [];\n                const value = field.value ? field.value.trim() : '';\n                if (index && key && value) {\n                  if (!fieldsAttributes[index]) fieldsAttributes[index] = {};\n                  fieldsAttributes[index][key] = value;\n                }\n              });\n              // Fill in the blanks\n              fieldsAttributes.forEach((field) => {\n                if (field.name && !field.value) {\n                  field.value = '';\n                }\n              });\n\n              (async () => {\n                try {\n                  const newAccount = await masto.v1.accounts.updateCredentials({\n                    displayName,\n                    note,\n                    fieldsAttributes,\n                  });\n                  console.log('updated account', newAccount);\n                  onClose?.({\n                    state: 'success',\n                    account: newAccount,\n                  });\n                } catch (e) {\n                  console.error(e);\n                  alert(e?.message || 'Unable to update profile.');\n                }\n              })();\n            }}\n          >\n            <p>\n              <label>\n                Name{' '}\n                <input\n                  type=\"text\"\n                  name=\"display_name\"\n                  defaultValue={displayName}\n                  maxLength={30}\n                  disabled={uiState === 'loading'}\n                />\n              </label>\n            </p>\n            <p>\n              <label>\n                Bio\n                <textarea\n                  defaultValue={note}\n                  name=\"note\"\n                  maxLength={500}\n                  rows=\"5\"\n                  disabled={uiState === 'loading'}\n                />\n              </label>\n            </p>\n            {/* Table for fields; name and values are in fields, min 4 rows */}\n            <p>Extra fields</p>\n            <table ref={fieldsAttributesRef}>\n              <thead>\n                <tr>\n                  <th>Label</th>\n                  <th>Content</th>\n                </tr>\n              </thead>\n              <tbody>\n                {Array.from({ length: Math.max(4, fields.length) }).map(\n                  (_, i) => {\n                    const { name = '', value = '' } = fields[i] || {};\n                    return (\n                      <FieldsAttributesRow\n                        key={i}\n                        name={name}\n                        value={value}\n                        index={i}\n                        disabled={uiState === 'loading'}\n                      />\n                    );\n                  },\n                )}\n              </tbody>\n            </table>\n            <footer>\n              <button\n                type=\"button\"\n                class=\"light\"\n                disabled={uiState === 'loading'}\n                onClick={() => {\n                  onClose?.();\n                }}\n              >\n                Cancel\n              </button>\n              <button type=\"submit\" disabled={uiState === 'loading'}>\n                Save\n              </button>\n            </footer>\n          </form>\n        )}\n      </main>\n    </div>\n  );\n}\n\nfunction FieldsAttributesRow({ name, value, disabled, index: i }) {\n  const [hasValue, setHasValue] = useState(!!value);\n  return (\n    <tr>\n      <td>\n        <input\n          type=\"text\"\n          name={`fields_attributes[${i}][name]`}\n          defaultValue={name}\n          disabled={disabled}\n          maxLength={255}\n          required={hasValue}\n        />\n      </td>\n      <td>\n        <input\n          type=\"text\"\n          name={`fields_attributes[${i}][value]`}\n          defaultValue={value}\n          disabled={disabled}\n          maxLength={255}\n          onChange={(e) => setHasValue(!!e.currentTarget.value)}\n        />\n      </td>\n    </tr>\n  );\n}\n\nfunction AccountHandleInfo({ acct, instance }) {\n  // acct = username or username@server\n  let [username, server] = acct.split('@');\n  if (!server) server = instance;\n  return (\n    <div class=\"handle-info\">\n      <span class=\"handle-handle\">\n        <b class=\"handle-username\">{username}</b>\n        <span class=\"handle-at\">@</span>\n        <b class=\"handle-server\">{server}</b>\n      </span>\n      <div class=\"handle-legend\">\n        <span class=\"ib\">\n          <span class=\"handle-legend-icon username\" /> username\n        </span>{' '}\n        <span class=\"ib\">\n          <span class=\"handle-legend-icon server\" /> server domain name\n        </span>\n      </div>\n    </div>\n  );\n}\n\nexport default AccountInfo;\n","import { api } from './api';\nimport store from './store';\n\nexport async function fetchRelationships(accounts, relationshipsMap = {}) {\n  if (!accounts?.length) return;\n  const { masto } = api();\n\n  const currentAccount = store.session.get('currentAccount');\n  const uniqueAccountIds = accounts.reduce((acc, a) => {\n    // 1. Ignore duplicate accounts\n    // 2. Ignore accounts that are already inside relationshipsMap\n    // 3. Ignore currently logged in account\n    if (\n      !acc.includes(a.id) &&\n      !relationshipsMap[a.id] &&\n      a.id !== currentAccount\n    ) {\n      acc.push(a.id);\n    }\n    return acc;\n  }, []);\n  if (!uniqueAccountIds.length) return null;\n\n  try {\n    const relationships = await masto.v1.accounts.relationships.fetch({\n      id: uniqueAccountIds,\n    });\n    const newRelationshipsMap = relationships.reduce((acc, r) => {\n      acc[r.id] = r;\n      return acc;\n    }, {});\n    return newRelationshipsMap;\n  } catch (e) {\n    console.error(e);\n    // It's okay to fail\n    return null;\n  }\n}\n","import { api } from './api';\nimport { extractTagsFromStatus, getFollowedTags } from './followed-tags';\nimport pmem from './pmem';\nimport { fetchRelationships } from './relationships';\nimport states, { saveStatus, statusKey } from './states';\nimport store from './store';\n\nexport function groupBoosts(values) {\n  let newValues = [];\n  let boostStash = [];\n  let serialBoosts = 0;\n  for (let i = 0; i < values.length; i++) {\n    const item = values[i];\n    if (item.reblog && !item.account?.group) {\n      boostStash.push(item);\n      serialBoosts++;\n    } else {\n      newValues.push(item);\n      if (serialBoosts < 3) {\n        serialBoosts = 0;\n      }\n    }\n  }\n  // if boostStash is more than quarter of values\n  // or if there are 3 or more boosts in a row\n  if (\n    values.length > 10 &&\n    (boostStash.length > values.length / 4 || serialBoosts >= 3)\n  ) {\n    // if boostStash is more than 3 quarter of values\n    const boostStashID = boostStash.map((status) => status.id);\n    if (boostStash.length > (values.length * 3) / 4) {\n      // insert boost array at the end of specialHome list\n      newValues = [\n        ...newValues,\n        { id: boostStashID, items: boostStash, type: 'boosts' },\n      ];\n    } else {\n      // insert boosts array in the middle of specialHome list\n      const half = Math.floor(newValues.length / 2);\n      newValues = [\n        ...newValues.slice(0, half),\n        {\n          id: boostStashID,\n          items: boostStash,\n          type: 'boosts',\n        },\n        ...newValues.slice(half),\n      ];\n    }\n    return newValues;\n  } else {\n    return values;\n  }\n}\n\nexport function dedupeBoosts(items, instance) {\n  const boostedStatusIDs = store.account.get('boostedStatusIDs') || {};\n  const filteredItems = items.filter((item) => {\n    if (!item.reblog) return true;\n    const statusKey = `${instance}-${item.reblog.id}`;\n    const boosterID = boostedStatusIDs[statusKey];\n    if (boosterID && boosterID !== item.id) {\n      console.warn(\n        `🚫 Duplicate boost by ${item.account.displayName}`,\n        item,\n        item.reblog,\n      );\n      return false;\n    } else {\n      boostedStatusIDs[statusKey] = item.id;\n    }\n    return true;\n  });\n  // Limit to 50\n  const keys = Object.keys(boostedStatusIDs);\n  if (keys.length > 50) {\n    keys.slice(0, keys.length - 50).forEach((key) => {\n      delete boostedStatusIDs[key];\n    });\n  }\n  store.account.set('boostedStatusIDs', boostedStatusIDs);\n  return filteredItems;\n}\n\nexport function groupContext(items, instance) {\n  const contexts = [];\n  let contextIndex = 0;\n  items.forEach((item) => {\n    for (let i = 0; i < contexts.length; i++) {\n      if (contexts[i].find((t) => t.id === item.id)) return;\n      if (\n        contexts[i].find((t) => t.id === item.inReplyToId) ||\n        contexts[i].find((t) => t.inReplyToId === item.id)\n      ) {\n        contexts[i].push(item);\n        return;\n      }\n    }\n    const repliedItem = items.find((i) => i.id === item.inReplyToId);\n    if (repliedItem) {\n      contexts[contextIndex++] = [item, repliedItem];\n    }\n  });\n\n  // Check for cross-item contexts\n  // Merge contexts into one if they have a common item (same id)\n  for (let i = 0; i < contexts.length; i++) {\n    for (let j = i + 1; j < contexts.length; j++) {\n      const commonItem = contexts[i].find((t) => contexts[j].includes(t));\n      if (commonItem) {\n        contexts[i] = [...contexts[i], ...contexts[j]];\n        // Remove duplicate items\n        contexts[i] = contexts[i].filter(\n          (item, index, self) =>\n            self.findIndex((t) => t.id === item.id) === index,\n        );\n        contexts.splice(j, 1);\n        j--;\n      }\n    }\n  }\n\n  // Sort items by checking inReplyToId\n  contexts.forEach((context) => {\n    context.sort((a, b) => {\n      if (!a.inReplyToId && !b.inReplyToId) {\n        return new Date(a.createdAt) - new Date(b.createdAt);\n      }\n      if (a.inReplyToId === b.id) return 1;\n      if (b.inReplyToId === a.id) return -1;\n      if (!a.inReplyToId) return -1;\n      if (!b.inReplyToId) return 1;\n      return new Date(a.createdAt) - new Date(b.createdAt);\n    });\n  });\n\n  // Tag items that has different author than first post's author\n  contexts.forEach((context) => {\n    const firstItemAccountID = context[0].account.id;\n    context.forEach((item) => {\n      if (item.account.id !== firstItemAccountID) {\n        item._differentAuthor = true;\n      }\n    });\n  });\n\n  if (contexts.length) console.log('🧵 Contexts', contexts);\n\n  const newItems = [];\n  const appliedContextIndices = [];\n  items.forEach((item) => {\n    if (item.reblog) {\n      newItems.push(item);\n      return;\n    }\n    for (let i = 0; i < contexts.length; i++) {\n      if (contexts[i].find((t) => t.id === item.id)) {\n        if (appliedContextIndices.includes(i)) return;\n        const contextItems = contexts[i];\n        contextItems.sort((a, b) => {\n          const aDate = new Date(a.createdAt);\n          const bDate = new Date(b.createdAt);\n          return aDate - bDate;\n        });\n        const firstItemAccountID = contextItems[0].account.id;\n        newItems.push({\n          id: contextItems.map((i) => i.id),\n          items: contextItems,\n          type: contextItems.every((it) => it.account.id === firstItemAccountID)\n            ? 'thread'\n            : 'conversation',\n        });\n        appliedContextIndices.push(i);\n        return;\n      }\n    }\n\n    if (item.inReplyToId && item.inReplyToAccountId !== item.account.id) {\n      const sKey = statusKey(item.id, instance);\n      if (!states.statusReply[sKey]) {\n        // If it's a reply and not a thread\n        queueMicrotask(async () => {\n          try {\n            const { masto } = api({ instance });\n            // const replyToStatus = await masto.v1.statuses\n            //   .$select(item.inReplyToId)\n            //   .fetch();\n            const replyToStatus = await fetchStatus(item.inReplyToId, masto);\n            saveStatus(replyToStatus, instance, {\n              skipThreading: true,\n              skipUnfurling: true,\n            });\n            states.statusReply[sKey] = {\n              id: replyToStatus.id,\n              instance,\n            };\n          } catch (e) {\n            // Silently fail\n            console.error(e);\n          }\n        });\n      }\n    }\n\n    newItems.push(item);\n  });\n\n  return newItems;\n}\n\nconst fetchStatus = pmem((statusID, masto) => {\n  return masto.v1.statuses.$select(statusID).fetch();\n});\n\nexport async function assignFollowedTags(items, instance) {\n  const followedTags = await getFollowedTags(); // [{name: 'tag'}, {...}]\n  if (!followedTags.length) return;\n  const { statusFollowedTags } = states;\n  console.log('statusFollowedTags', statusFollowedTags);\n  const statusWithFollowedTags = [];\n  items.forEach((item) => {\n    if (item.reblog) return;\n    const { id, content, tags = [] } = item;\n    const sKey = statusKey(id, instance);\n    if (statusFollowedTags[sKey]?.length) return;\n    const extractedTags = extractTagsFromStatus(content);\n    if (!extractedTags.length && !tags.length) return;\n    const itemFollowedTags = followedTags.reduce((acc, tag) => {\n      if (\n        extractedTags.some((t) => t.toLowerCase() === tag.name.toLowerCase()) ||\n        tags.some((t) => t.name.toLowerCase() === tag.name.toLowerCase())\n      ) {\n        acc.push(tag.name);\n      }\n      return acc;\n    }, []);\n    if (itemFollowedTags.length) {\n      // statusFollowedTags[sKey] = itemFollowedTags;\n      statusWithFollowedTags.push({\n        item,\n        sKey,\n        followedTags: itemFollowedTags,\n      });\n    }\n  });\n\n  if (statusWithFollowedTags.length) {\n    const accounts = statusWithFollowedTags.map((s) => s.item.account);\n    const relationships = await fetchRelationships(accounts);\n    if (!relationships) return;\n\n    statusWithFollowedTags.forEach((s) => {\n      const { item, sKey, followedTags } = s;\n      const r = relationships[item.account.id];\n      if (r && !r.following) {\n        statusFollowedTags[sKey] = followedTags;\n      }\n    });\n  }\n}\n\nexport function clearFollowedTagsState() {\n  states.statusFollowedTags = {};\n}\n","import { useLayoutEffect, useState } from 'preact/hooks';\n\nexport default function useScroll({\n  scrollableRef,\n  distanceFromStart = 1, // ratio of clientHeight/clientWidth\n  distanceFromEnd = 1, // ratio of clientHeight/clientWidth\n  scrollThresholdStart = 10,\n  scrollThresholdEnd = 10,\n  direction = 'vertical',\n  distanceFromStartPx: _distanceFromStartPx,\n  distanceFromEndPx: _distanceFromEndPx,\n} = {}) {\n  const [scrollDirection, setScrollDirection] = useState(null);\n  const [reachStart, setReachStart] = useState(false);\n  const [reachEnd, setReachEnd] = useState(false);\n  const [nearReachStart, setNearReachStart] = useState(false);\n  const [nearReachEnd, setNearReachEnd] = useState(false);\n  const isVertical = direction === 'vertical';\n\n  useLayoutEffect(() => {\n    const scrollableElement = scrollableRef.current;\n    if (!scrollableElement) return {};\n    let previousScrollStart = isVertical\n      ? scrollableElement.scrollTop\n      : scrollableElement.scrollLeft;\n\n    function onScroll() {\n      const {\n        scrollTop,\n        scrollLeft,\n        scrollHeight,\n        scrollWidth,\n        clientHeight,\n        clientWidth,\n      } = scrollableElement;\n      const scrollStart = isVertical ? scrollTop : scrollLeft;\n      const scrollDimension = isVertical ? scrollHeight : scrollWidth;\n      const clientDimension = isVertical ? clientHeight : clientWidth;\n      const scrollDistance = Math.abs(scrollStart - previousScrollStart);\n      const distanceFromStartPx =\n        _distanceFromStartPx ||\n        Math.min(\n          clientDimension * distanceFromStart,\n          scrollDimension,\n          scrollStart,\n        );\n      const distanceFromEndPx =\n        _distanceFromEndPx ||\n        Math.min(\n          clientDimension * distanceFromEnd,\n          scrollDimension,\n          scrollDimension - scrollStart - clientDimension,\n        );\n\n      if (\n        scrollDistance >=\n        (previousScrollStart < scrollStart\n          ? scrollThresholdEnd\n          : scrollThresholdStart)\n      ) {\n        setScrollDirection(previousScrollStart < scrollStart ? 'end' : 'start');\n        previousScrollStart = scrollStart;\n      }\n\n      setReachStart(scrollStart <= 0);\n      setReachEnd(scrollStart + clientDimension >= scrollDimension);\n      setNearReachStart(scrollStart <= distanceFromStartPx);\n      setNearReachEnd(\n        scrollStart + clientDimension >= scrollDimension - distanceFromEndPx,\n      );\n    }\n\n    scrollableElement.addEventListener('scroll', onScroll, { passive: true });\n\n    return () => scrollableElement.removeEventListener('scroll', onScroll);\n  }, [\n    distanceFromStart,\n    distanceFromEnd,\n    scrollThresholdStart,\n    scrollThresholdEnd,\n  ]);\n\n  return {\n    scrollDirection,\n    reachStart,\n    reachEnd,\n    nearReachStart,\n    nearReachEnd,\n    init: () => {\n      if (scrollableRef.current) {\n        scrollableRef.current.dispatchEvent(new Event('scroll'));\n      }\n    },\n  };\n}\n","import { useEffect, useLayoutEffect, useRef, useState } from 'preact/hooks';\nimport { useThrottledCallback } from 'use-debounce';\n\nexport default function useScrollFn(\n  {\n    scrollableRef,\n    distanceFromStart = 1, // ratio of clientHeight/clientWidth\n    distanceFromEnd = 1, // ratio of clientHeight/clientWidth\n    scrollThresholdStart = 10,\n    scrollThresholdEnd = 10,\n    direction = 'vertical',\n    distanceFromStartPx: _distanceFromStartPx,\n    distanceFromEndPx: _distanceFromEndPx,\n    init,\n  } = {},\n  callback,\n  deps,\n) {\n  if (!callback) return;\n  // const [scrollDirection, setScrollDirection] = useState(null);\n  // const [reachStart, setReachStart] = useState(false);\n  // const [reachEnd, setReachEnd] = useState(false);\n  // const [nearReachStart, setNearReachStart] = useState(false);\n  // const [nearReachEnd, setNearReachEnd] = useState(false);\n  const isVertical = direction === 'vertical';\n  const previousScrollStart = useRef(null);\n  const scrollDirection = useRef(null);\n\n  const onScroll = useThrottledCallback(() => {\n    // let scrollDirection = null;\n    let reachStart = false;\n    let reachEnd = false;\n    let nearReachStart = false;\n    let nearReachEnd = false;\n\n    const scrollableElement = scrollableRef.current;\n    const {\n      scrollTop,\n      scrollLeft,\n      scrollHeight,\n      scrollWidth,\n      clientHeight,\n      clientWidth,\n    } = scrollableElement;\n    const scrollStart = isVertical ? scrollTop : scrollLeft;\n    const scrollDimension = isVertical ? scrollHeight : scrollWidth;\n    const clientDimension = isVertical ? clientHeight : clientWidth;\n    const scrollDistance = Math.abs(scrollStart - previousScrollStart.current);\n    const distanceFromStartPx =\n      _distanceFromStartPx ||\n      Math.min(\n        clientDimension * distanceFromStart,\n        scrollDimension,\n        scrollStart,\n      );\n    const distanceFromEndPx =\n      _distanceFromEndPx ||\n      Math.min(\n        clientDimension * distanceFromEnd,\n        scrollDimension,\n        scrollDimension - scrollStart - clientDimension,\n      );\n\n    if (\n      scrollDistance >=\n      (previousScrollStart.current < scrollStart\n        ? scrollThresholdEnd\n        : scrollThresholdStart)\n    ) {\n      // setScrollDirection(\n      //   previousScrollStart.current < scrollStart ? 'end' : 'start',\n      // );\n      scrollDirection.current =\n        previousScrollStart.current < scrollStart ? 'end' : 'start';\n      previousScrollStart.current = scrollStart;\n    }\n\n    // setReachStart(scrollStart <= 0);\n    // setReachEnd(scrollStart + clientDimension >= scrollDimension);\n    // setNearReachStart(scrollStart <= distanceFromStartPx);\n    // setNearReachEnd(\n    //   scrollStart + clientDimension >= scrollDimension - distanceFromEndPx,\n    // );\n    reachStart = scrollStart <= 0;\n    reachEnd = scrollStart + clientDimension >= scrollDimension;\n    nearReachStart = scrollStart <= distanceFromStartPx;\n    nearReachEnd =\n      scrollStart + clientDimension >= scrollDimension - distanceFromEndPx;\n\n    callback({\n      scrollDirection: scrollDirection.current,\n      reachStart,\n      reachEnd,\n      nearReachStart,\n      nearReachEnd,\n    });\n  }, 500);\n\n  useLayoutEffect(() => {\n    const scrollableElement = scrollableRef.current;\n    if (!scrollableElement) return {};\n    previousScrollStart.current =\n      scrollableElement[isVertical ? 'scrollTop' : 'scrollLeft'];\n\n    scrollableElement.addEventListener('scroll', onScroll, { passive: true });\n\n    return () => scrollableElement.removeEventListener('scroll', onScroll);\n  }, [\n    distanceFromStart,\n    distanceFromEnd,\n    scrollThresholdStart,\n    scrollThresholdEnd,\n    ...deps,\n  ]);\n\n  // useEffect(() => {\n  //   callback({\n  //     scrollDirection,\n  //     reachStart,\n  //     reachEnd,\n  //     nearReachStart,\n  //     nearReachEnd,\n  //   });\n  // }, [\n  //   scrollDirection,\n  //   reachStart,\n  //   reachEnd,\n  //   nearReachStart,\n  //   nearReachEnd,\n  //   ...deps,\n  // ]);\n\n  useEffect(() => {\n    if (init && scrollableRef.current) {\n      queueMicrotask(() => {\n        scrollableRef.current.dispatchEvent(new Event('scroll'));\n      });\n    }\n  }, [init]);\n\n  // return {\n  //   scrollDirection,\n  //   reachStart,\n  //   reachEnd,\n  //   nearReachStart,\n  //   nearReachEnd,\n  //   init: () => {\n  //     if (scrollableRef.current) {\n  //       scrollableRef.current.dispatchEvent(new Event('scroll'));\n  //     }\n  //   },\n  // };\n}\n","import './media-post.css';\n\nimport { memo } from 'preact/compat';\nimport { useContext, useMemo } from 'preact/hooks';\nimport { useSnapshot } from 'valtio';\n\nimport FilterContext from '../utils/filter-context';\nimport { isFiltered } from '../utils/filters';\nimport states, { statusKey } from '../utils/states';\nimport store from '../utils/store';\n\nimport Media from './media';\n\nfunction MediaPost({\n  class: className,\n  statusID,\n  status,\n  instance,\n  parent,\n  // allowFilters,\n  onMediaClick,\n}) {\n  let sKey = statusKey(statusID, instance);\n  const snapStates = useSnapshot(states);\n  if (!status) {\n    status = snapStates.statuses[sKey] || snapStates.statuses[statusID];\n    sKey = statusKey(status?.id, instance);\n  }\n  if (!status) {\n    return null;\n  }\n\n  const {\n    account: {\n      acct,\n      avatar,\n      avatarStatic,\n      id: accountId,\n      url: accountURL,\n      displayName,\n      username,\n      emojis: accountEmojis,\n      bot,\n      group,\n    },\n    id,\n    repliesCount,\n    reblogged,\n    reblogsCount,\n    favourited,\n    favouritesCount,\n    bookmarked,\n    poll,\n    muted,\n    sensitive,\n    spoilerText,\n    visibility, // public, unlisted, private, direct\n    language,\n    editedAt,\n    filtered,\n    card,\n    createdAt,\n    inReplyToId,\n    inReplyToAccountId,\n    content,\n    mentions,\n    mediaAttachments,\n    reblog,\n    uri,\n    url,\n    emojis,\n    // Non-API props\n    _deleted,\n    _pinned,\n    // _filtered,\n  } = status;\n\n  if (!mediaAttachments?.length) {\n    return null;\n  }\n\n  const debugHover = (e) => {\n    if (e.shiftKey) {\n      console.log({\n        ...status,\n      });\n    }\n  };\n\n  const currentAccount = useMemo(() => {\n    return store.session.get('currentAccount');\n  }, []);\n  const isSelf = useMemo(() => {\n    return currentAccount && currentAccount === accountId;\n  }, [accountId, currentAccount]);\n\n  const filterContext = useContext(FilterContext);\n  const filterInfo = !isSelf && isFiltered(filtered, filterContext);\n\n  if (filterInfo?.action === 'hide') {\n    return null;\n  }\n\n  console.debug('RENDER Media post', id, status?.account.displayName);\n\n  const hasSpoiler = sensitive;\n  const readingExpandMedia = useMemo(() => {\n    // default | show_all | hide_all\n    const prefs = store.account.get('preferences') || {};\n    return prefs['reading:expand:media'] || 'default';\n  }, []);\n  const showSpoilerMedia = readingExpandMedia === 'show_all';\n\n  const Parent = parent || 'div';\n\n  return mediaAttachments.map((media, i) => {\n    const mediaKey = `${sKey}-${media.id}`;\n    const filterTitleStr = filterInfo?.titlesStr;\n    return (\n      <Parent\n        data-state-post-id={sKey}\n        onMouseEnter={debugHover}\n        key={mediaKey}\n        data-spoiler-text={\n          spoilerText || (sensitive ? 'Sensitive media' : undefined)\n        }\n        data-filtered-text={\n          filterInfo\n            ? `Filtered${filterTitleStr ? `: ${filterTitleStr}` : ''}`\n            : undefined\n        }\n        class={`\n          media-post\n          ${filterInfo ? 'filtered' : ''}\n          ${hasSpoiler ? 'has-spoiler' : ''}\n          ${showSpoilerMedia ? 'show-media' : ''}\n        `}\n      >\n        <Media\n          class={className}\n          media={media}\n          lang={language}\n          to={`/${instance}/s/${id}?media-only=${i + 1}`}\n          onClick={\n            onMediaClick ? (e) => onMediaClick(e, i, media, status) : undefined\n          }\n        />\n      </Parent>\n    );\n  });\n}\n\nexport default memo(MediaPost);\n","import './nav-menu.css';\n\nimport {\n  ControlledMenu,\n  MenuDivider,\n  MenuItem,\n  SubMenu,\n} from '@szhsin/react-menu';\nimport { memo } from 'preact/compat';\nimport { useEffect, useMemo, useRef, useState } from 'preact/hooks';\nimport { useLongPress } from 'use-long-press';\nimport { useSnapshot } from 'valtio';\n\nimport { api } from '../utils/api';\nimport { getLists } from '../utils/lists';\nimport safeBoundingBoxPadding from '../utils/safe-bounding-box-padding';\nimport states from '../utils/states';\nimport store from '../utils/store';\n\nimport Avatar from './avatar';\nimport Icon from './icon';\nimport MenuLink from './menu-link';\n\nfunction NavMenu(props) {\n  const snapStates = useSnapshot(states);\n  const { masto, instance, authenticated } = api();\n\n  const [currentAccount, moreThanOneAccount] = useMemo(() => {\n    const accounts = store.local.getJSON('accounts') || [];\n    const acc =\n      accounts.find(\n        (account) => account.info.id === store.session.get('currentAccount'),\n      ) || accounts[0];\n    return [acc, accounts.length > 1];\n  }, []);\n\n  // Home = Following\n  // But when in multi-column mode, Home becomes columns of anything\n  // User may choose pin or not to pin Following\n  // If user doesn't pin Following, we show it in the menu\n  const showFollowing =\n    (snapStates.settings.shortcutsViewMode === 'multi-column' ||\n      (!snapStates.settings.shortcutsViewMode &&\n        snapStates.settings.shortcutsColumnsMode)) &&\n    !snapStates.shortcuts.find((pin) => pin.type === 'following');\n\n  const bindLongPress = useLongPress(\n    () => {\n      states.showAccounts = true;\n    },\n    {\n      threshold: 600,\n      detect: 'touch',\n      cancelOnMovement: true,\n    },\n  );\n\n  const buttonRef = useRef();\n  const [menuState, setMenuState] = useState(undefined);\n\n  const boundingBoxPadding = safeBoundingBoxPadding([\n    0,\n    0,\n    snapStates.settings.shortcutsViewMode === 'tab-menu-bar' ? 50 : 0,\n    0,\n  ]);\n\n  const mutesIterator = useRef();\n  async function fetchMutes(firstLoad) {\n    if (firstLoad || !mutesIterator.current) {\n      mutesIterator.current = masto.v1.mutes.list({\n        limit: 80,\n      });\n    }\n    const results = await mutesIterator.current.next();\n    return results;\n  }\n\n  const blocksIterator = useRef();\n  async function fetchBlocks(firstLoad) {\n    if (firstLoad || !blocksIterator.current) {\n      blocksIterator.current = masto.v1.blocks.list({\n        limit: 80,\n      });\n    }\n    const results = await blocksIterator.current.next();\n    return results;\n  }\n\n  const [lists, setLists] = useState([]);\n  useEffect(() => {\n    if (menuState === 'open') {\n      getLists().then(setLists);\n    }\n  }, [menuState === 'open']);\n\n  const buttonClickTS = useRef();\n  return (\n    <>\n      <button\n        ref={buttonRef}\n        type=\"button\"\n        class={`button plain nav-menu-button ${\n          moreThanOneAccount ? 'with-avatar' : ''\n        } ${menuState === 'open' ? 'active' : ''}`}\n        style={{ position: 'relative' }}\n        onClick={() => {\n          buttonClickTS.current = Date.now();\n          setMenuState((state) => (!state ? 'open' : undefined));\n        }}\n        onContextMenu={(e) => {\n          e.preventDefault();\n          states.showAccounts = true;\n        }}\n        {...bindLongPress()}\n      >\n        {moreThanOneAccount && (\n          <Avatar\n            url={\n              currentAccount?.info?.avatar || currentAccount?.info?.avatarStatic\n            }\n            size=\"l\"\n            squircle={currentAccount?.info?.bot}\n          />\n        )}\n        <Icon icon=\"menu\" size={moreThanOneAccount ? 's' : 'l'} />\n      </button>\n      <ControlledMenu\n        menuClassName=\"nav-menu\"\n        state={menuState}\n        anchorRef={buttonRef}\n        onClose={() => {\n          setMenuState(undefined);\n        }}\n        containerProps={{\n          style: {\n            zIndex: 10,\n          },\n          onClick: () => {\n            if (Date.now() - buttonClickTS.current < 300) {\n              return;\n            }\n            // setMenuState(undefined);\n          },\n        }}\n        portal={{\n          target: document.body,\n        }}\n        {...props}\n        overflow=\"auto\"\n        // viewScroll=\"close\"\n        position=\"anchor\"\n        align=\"center\"\n        boundingBoxPadding={boundingBoxPadding}\n        unmountOnClose\n      >\n        {!!snapStates.appVersion?.commitHash &&\n          __COMMIT_HASH__ !== snapStates.appVersion.commitHash && (\n            <div class=\"top-menu\">\n              <MenuItem\n                onClick={() => {\n                  const yes = confirm('Reload page now to update?');\n                  if (yes) {\n                    (async () => {\n                      try {\n                        location.reload();\n                      } catch (e) {}\n                    })();\n                  }\n                }}\n              >\n                <Icon icon=\"sparkles\" class=\"sparkle-icon\" size=\"l\" />{' '}\n                <span>New update available…</span>\n              </MenuItem>\n              <MenuDivider />\n            </div>\n          )}\n        <section>\n          <MenuLink to=\"/\">\n            <Icon icon=\"home\" size=\"l\" /> <span>Home</span>\n          </MenuLink>\n          {authenticated ? (\n            <>\n              {showFollowing && (\n                <MenuLink to=\"/following\">\n                  <Icon icon=\"following\" size=\"l\" /> <span>Following</span>\n                </MenuLink>\n              )}\n              <MenuLink to=\"/catchup\">\n                <Icon icon=\"history2\" size=\"l\" />\n                <span>Catch-up</span>\n              </MenuLink>\n              <MenuLink to=\"/mentions\">\n                <Icon icon=\"at\" size=\"l\" /> <span>Mentions</span>\n              </MenuLink>\n              <MenuLink to=\"/notifications\">\n                <Icon icon=\"notification\" size=\"l\" /> <span>Notifications</span>\n                {snapStates.notificationsShowNew && (\n                  <sup title=\"New\" style={{ opacity: 0.5 }}>\n                    {' '}\n                    &bull;\n                  </sup>\n                )}\n              </MenuLink>\n              <MenuDivider />\n              {currentAccount?.info?.id && (\n                <MenuLink to={`/${instance}/a/${currentAccount.info.id}`}>\n                  <Icon icon=\"user\" size=\"l\" /> <span>Profile</span>\n                </MenuLink>\n              )}\n              {lists?.length > 0 ? (\n                <SubMenu\n                  menuClassName=\"nav-submenu\"\n                  overflow=\"auto\"\n                  gap={-8}\n                  label={\n                    <>\n                      <Icon icon=\"list\" size=\"l\" />\n                      <span class=\"menu-grow\">Lists</span>\n                      <Icon icon=\"chevron-right\" />\n                    </>\n                  }\n                >\n                  <MenuLink to=\"/l\">\n                    <span>All Lists</span>\n                  </MenuLink>\n                  {lists?.length > 0 && (\n                    <>\n                      <MenuDivider />\n                      {lists.map((list) => (\n                        <MenuLink key={list.id} to={`/l/${list.id}`}>\n                          <span>{list.title}</span>\n                        </MenuLink>\n                      ))}\n                    </>\n                  )}\n                </SubMenu>\n              ) : (\n                <MenuLink to=\"/l\">\n                  <Icon icon=\"list\" size=\"l\" />\n                  <span>Lists</span>\n                </MenuLink>\n              )}\n              <MenuLink to=\"/b\">\n                <Icon icon=\"bookmark\" size=\"l\" /> <span>Bookmarks</span>\n              </MenuLink>\n              <SubMenu\n                menuClassName=\"nav-submenu\"\n                overflow=\"auto\"\n                gap={-8}\n                label={\n                  <>\n                    <Icon icon=\"more\" size=\"l\" />\n                    <span class=\"menu-grow\">More…</span>\n                    <Icon icon=\"chevron-right\" />\n                  </>\n                }\n              >\n                <MenuLink to=\"/f\">\n                  <Icon icon=\"heart\" size=\"l\" /> <span>Likes</span>\n                </MenuLink>\n                <MenuLink to=\"/fh\">\n                  <Icon icon=\"hashtag\" size=\"l\" />{' '}\n                  <span>Followed Hashtags</span>\n                </MenuLink>\n                <MenuDivider />\n                <MenuLink to=\"/ft\">\n                  <Icon icon=\"filters\" size=\"l\" />\n                  Filters\n                </MenuLink>\n                <MenuItem\n                  onClick={() => {\n                    states.showGenericAccounts = {\n                      id: 'mute',\n                      heading: 'Muted users',\n                      fetchAccounts: fetchMutes,\n                      excludeRelationshipAttrs: ['muting'],\n                    };\n                  }}\n                >\n                  <Icon icon=\"mute\" size=\"l\" /> Muted users&hellip;\n                </MenuItem>\n                <MenuItem\n                  onClick={() => {\n                    states.showGenericAccounts = {\n                      id: 'block',\n                      heading: 'Blocked users',\n                      fetchAccounts: fetchBlocks,\n                      excludeRelationshipAttrs: ['blocking'],\n                    };\n                  }}\n                >\n                  <Icon icon=\"block\" size=\"l\" />\n                  Blocked users&hellip;\n                </MenuItem>{' '}\n              </SubMenu>\n              <MenuDivider />\n              <MenuItem\n                onClick={() => {\n                  states.showAccounts = true;\n                }}\n              >\n                <Icon icon=\"group\" size=\"l\" /> <span>Accounts&hellip;</span>\n              </MenuItem>\n            </>\n          ) : (\n            <>\n              <MenuDivider />\n              <MenuLink to=\"/login\">\n                <Icon icon=\"user\" size=\"l\" /> <span>Log in</span>\n              </MenuLink>\n            </>\n          )}\n        </section>\n        <section>\n          <MenuDivider />\n          <MenuLink to={`/search`}>\n            <Icon icon=\"search\" size=\"l\" /> <span>Search</span>\n          </MenuLink>\n          <MenuLink to={`/${instance}/trending`}>\n            <Icon icon=\"chart\" size=\"l\" /> <span>Trending</span>\n          </MenuLink>\n          <MenuLink to={`/${instance}/p/l`}>\n            <Icon icon=\"building\" size=\"l\" /> <span>Local</span>\n          </MenuLink>\n          <MenuLink to={`/${instance}/p`}>\n            <Icon icon=\"earth\" size=\"l\" /> <span>Federated</span>\n          </MenuLink>\n          {authenticated ? (\n            <>\n              <MenuDivider className=\"divider-grow\" />\n              <MenuItem\n                onClick={() => {\n                  states.showKeyboardShortcutsHelp = true;\n                }}\n              >\n                <Icon icon=\"keyboard\" size=\"l\" />{' '}\n                <span>Keyboard shortcuts</span>\n              </MenuItem>\n              <MenuItem\n                onClick={() => {\n                  states.showShortcutsSettings = true;\n                }}\n              >\n                <Icon icon=\"shortcut\" size=\"l\" />{' '}\n                <span>Shortcuts / Columns&hellip;</span>\n              </MenuItem>\n              <MenuItem\n                onClick={() => {\n                  states.showSettings = true;\n                }}\n              >\n                <Icon icon=\"gear\" size=\"l\" /> <span>Settings&hellip;</span>\n              </MenuItem>\n            </>\n          ) : (\n            <>\n              <MenuDivider />\n              <MenuItem\n                onClick={() => {\n                  states.showSettings = true;\n                }}\n              >\n                <Icon icon=\"gear\" size=\"l\" /> <span>Settings&hellip;</span>\n              </MenuItem>\n            </>\n          )}\n        </section>\n      </ControlledMenu>\n    </>\n  );\n}\n\nexport default memo(NavMenu);\n","import { memo } from 'preact/compat';\nimport { useCallback, useEffect, useRef, useState } from 'preact/hooks';\nimport { useHotkeys } from 'react-hotkeys-hook';\nimport { InView } from 'react-intersection-observer';\nimport { useDebouncedCallback } from 'use-debounce';\nimport { useSnapshot } from 'valtio';\n\nimport FilterContext from '../utils/filter-context';\nimport { filteredItems, isFiltered } from '../utils/filters';\nimport states, { statusKey } from '../utils/states';\nimport statusPeek from '../utils/status-peek';\nimport { groupBoosts, groupContext } from '../utils/timeline-utils';\nimport useInterval from '../utils/useInterval';\nimport usePageVisibility from '../utils/usePageVisibility';\nimport useScroll from '../utils/useScroll';\nimport useScrollFn from '../utils/useScrollFn';\n\nimport Icon from './icon';\nimport Link from './link';\nimport MediaPost from './media-post';\nimport NavMenu from './nav-menu';\nimport Status from './status';\n\nconst scrollIntoViewOptions = {\n  block: 'nearest',\n  inline: 'center',\n  behavior: 'smooth',\n};\n\nfunction Timeline({\n  title,\n  titleComponent,\n  id,\n  instance,\n  emptyText,\n  errorText,\n  useItemID, // use statusID instead of status object, assuming it's already in states\n  boostsCarousel,\n  fetchItems = () => {},\n  checkForUpdates = () => {},\n  checkForUpdatesInterval = 15_000, // 15 seconds\n  headerStart,\n  headerEnd,\n  timelineStart,\n  // allowFilters,\n  refresh,\n  view,\n  filterContext,\n  showFollowedTags,\n  showReplyParent,\n}) {\n  const snapStates = useSnapshot(states);\n  const [items, setItems] = useState([]);\n  const [uiState, setUIState] = useState('default');\n  const [showMore, setShowMore] = useState(false);\n  const [showNew, setShowNew] = useState(false);\n  const [visible, setVisible] = useState(true);\n  const scrollableRef = useRef();\n\n  console.debug('RENDER Timeline', id, refresh);\n\n  const allowGrouping = view !== 'media';\n  const loadItems = useDebouncedCallback(\n    (firstLoad) => {\n      setShowNew(false);\n      if (uiState === 'loading') return;\n      setUIState('loading');\n      (async () => {\n        try {\n          let { done, value } = await fetchItems(firstLoad);\n          if (Array.isArray(value)) {\n            // Avoid grouping for pinned posts\n            const [pinnedPosts, otherPosts] = value.reduce(\n              (acc, item) => {\n                if (item._pinned) {\n                  acc[0].push(item);\n                } else {\n                  acc[1].push(item);\n                }\n                return acc;\n              },\n              [[], []],\n            );\n            value = otherPosts;\n            if (allowGrouping) {\n              if (boostsCarousel) {\n                value = groupBoosts(value);\n              }\n              value = groupContext(value, instance);\n            }\n            if (pinnedPosts.length) {\n              value = pinnedPosts.concat(value);\n            }\n            console.log(value);\n            if (firstLoad) {\n              setItems(value);\n            } else {\n              setItems((items) => [...items, ...value]);\n            }\n            if (!value.length) done = true;\n            setShowMore(!done);\n          } else {\n            setShowMore(false);\n          }\n          setUIState('default');\n        } catch (e) {\n          console.error(e);\n          setUIState('error');\n        } finally {\n          loadItems.cancel();\n        }\n      })();\n    },\n    1500,\n    {\n      leading: true,\n      trailing: false,\n    },\n  );\n\n  const itemsSelector = '.timeline-item, .timeline-item-alt';\n\n  const jRef = useHotkeys('j, shift+j', (_, handler) => {\n    // focus on next status after active item\n    const activeItem = document.activeElement.closest(itemsSelector);\n    const activeItemRect = activeItem?.getBoundingClientRect();\n    const allItems = Array.from(\n      scrollableRef.current.querySelectorAll(itemsSelector),\n    );\n    if (\n      activeItem &&\n      activeItemRect.top < scrollableRef.current.clientHeight &&\n      activeItemRect.bottom > 0\n    ) {\n      const activeItemIndex = allItems.indexOf(activeItem);\n      let nextItem = allItems[activeItemIndex + 1];\n      if (handler.shift) {\n        // get next status that's not .timeline-item-alt\n        nextItem = allItems.find(\n          (item, index) =>\n            index > activeItemIndex &&\n            !item.classList.contains('timeline-item-alt'),\n        );\n      }\n      if (nextItem) {\n        nextItem.focus();\n        nextItem.scrollIntoView(scrollIntoViewOptions);\n      }\n    } else {\n      // If active status is not in viewport, get the topmost status-link in viewport\n      const topmostItem = allItems.find((item) => {\n        const itemRect = item.getBoundingClientRect();\n        return itemRect.top >= 44 && itemRect.left >= 0; // 44 is the magic number for header height, not real\n      });\n      if (topmostItem) {\n        topmostItem.focus();\n        topmostItem.scrollIntoView(scrollIntoViewOptions);\n      }\n    }\n  });\n\n  const kRef = useHotkeys('k, shift+k', (_, handler) => {\n    // focus on previous status after active item\n    const activeItem = document.activeElement.closest(itemsSelector);\n    const activeItemRect = activeItem?.getBoundingClientRect();\n    const allItems = Array.from(\n      scrollableRef.current.querySelectorAll(itemsSelector),\n    );\n    if (\n      activeItem &&\n      activeItemRect.top < scrollableRef.current.clientHeight &&\n      activeItemRect.bottom > 0\n    ) {\n      const activeItemIndex = allItems.indexOf(activeItem);\n      let prevItem = allItems[activeItemIndex - 1];\n      if (handler.shift) {\n        // get prev status that's not .timeline-item-alt\n        prevItem = allItems.findLast(\n          (item, index) =>\n            index < activeItemIndex &&\n            !item.classList.contains('timeline-item-alt'),\n        );\n      }\n      if (prevItem) {\n        prevItem.focus();\n        prevItem.scrollIntoView(scrollIntoViewOptions);\n      }\n    } else {\n      // If active status is not in viewport, get the topmost status-link in viewport\n      const topmostItem = allItems.find((item) => {\n        const itemRect = item.getBoundingClientRect();\n        return itemRect.top >= 44 && itemRect.left >= 0; // 44 is the magic number for header height, not real\n      });\n      if (topmostItem) {\n        topmostItem.focus();\n        topmostItem.scrollIntoView(scrollIntoViewOptions);\n      }\n    }\n  });\n\n  const oRef = useHotkeys(['enter', 'o'], () => {\n    // open active status\n    const activeItem = document.activeElement.closest(itemsSelector);\n    if (activeItem) {\n      activeItem.click();\n    }\n  });\n\n  const showNewPostsIndicator =\n    items.length > 0 && uiState !== 'loading' && showNew;\n  const handleLoadNewPosts = useCallback(() => {\n    if (showNewPostsIndicator) loadItems(true);\n    scrollableRef.current?.scrollTo({\n      top: 0,\n      behavior: 'smooth',\n    });\n  }, [loadItems, showNewPostsIndicator]);\n  const dotRef = useHotkeys('.', handleLoadNewPosts);\n\n  // const {\n  //   scrollDirection,\n  //   nearReachStart,\n  //   nearReachEnd,\n  //   reachStart,\n  //   reachEnd,\n  // } = useScroll({\n  //   scrollableRef,\n  //   distanceFromEnd: 2,\n  //   scrollThresholdStart: 44,\n  // });\n  const headerRef = useRef();\n  // const [hiddenUI, setHiddenUI] = useState(false);\n  const [nearReachStart, setNearReachStart] = useState(false);\n  useScrollFn(\n    {\n      scrollableRef,\n      distanceFromEnd: 2,\n      scrollThresholdStart: 44,\n    },\n    ({\n      scrollDirection,\n      nearReachStart,\n      // nearReachEnd,\n      reachStart,\n      // reachEnd,\n    }) => {\n      // setHiddenUI(scrollDirection === 'end' && !nearReachEnd);\n      if (headerRef.current) {\n        const hiddenUI = scrollDirection === 'end' && !nearReachStart;\n        headerRef.current.hidden = hiddenUI;\n      }\n      setNearReachStart(nearReachStart);\n      if (reachStart) {\n        loadItems(true);\n      }\n      // else if (nearReachEnd || (reachEnd && showMore)) {\n      //   loadItems();\n      // }\n    },\n    [],\n  );\n\n  useEffect(() => {\n    scrollableRef.current?.scrollTo({ top: 0 });\n    loadItems(true);\n  }, []);\n  useEffect(() => {\n    loadItems(true);\n  }, [refresh]);\n\n  // useEffect(() => {\n  //   if (reachStart) {\n  //     loadItems(true);\n  //   }\n  // }, [reachStart]);\n\n  // useEffect(() => {\n  //   if (nearReachEnd || (reachEnd && showMore)) {\n  //     loadItems();\n  //   }\n  // }, [nearReachEnd, showMore]);\n\n  const prevView = useRef(view);\n  useEffect(() => {\n    if (prevView.current !== view) {\n      prevView.current = view;\n      setItems([]);\n    }\n  }, [view]);\n\n  const loadOrCheckUpdates = useCallback(\n    async ({ disableIdleCheck = false } = {}) => {\n      const noPointers = scrollableRef.current\n        ? getComputedStyle(scrollableRef.current).pointerEvents === 'none'\n        : false;\n      console.log('✨ Load or check updates', id, {\n        autoRefresh: snapStates.settings.autoRefresh,\n        scrollTop: scrollableRef.current.scrollTop,\n        disableIdleCheck,\n        idle: window.__IDLE__,\n        inBackground: inBackground(),\n        noPointers,\n      });\n      if (\n        snapStates.settings.autoRefresh &&\n        scrollableRef.current.scrollTop < 16 &&\n        (disableIdleCheck || window.__IDLE__) &&\n        !inBackground() &&\n        !noPointers\n      ) {\n        console.log('✨ Load updates', id, snapStates.settings.autoRefresh);\n        loadItems(true);\n      } else {\n        console.log('✨ Check updates', id, snapStates.settings.autoRefresh);\n        const hasUpdate = await checkForUpdates();\n        if (hasUpdate) {\n          console.log('✨ Has new updates', id);\n          setShowNew(true);\n        }\n      }\n    },\n    [id, loadItems, checkForUpdates, snapStates.settings.autoRefresh],\n  );\n\n  const lastHiddenTime = useRef();\n  usePageVisibility(\n    (visible) => {\n      if (visible) {\n        const timeDiff = Date.now() - lastHiddenTime.current;\n        if (!lastHiddenTime.current || timeDiff > 1000 * 3) {\n          // 3 seconds\n          loadOrCheckUpdates({\n            disableIdleCheck: true,\n          });\n        }\n      } else {\n        lastHiddenTime.current = Date.now();\n      }\n      setVisible(visible);\n    },\n    [checkForUpdates, loadOrCheckUpdates, snapStates.settings.autoRefresh],\n  );\n\n  // checkForUpdates interval\n  useInterval(\n    loadOrCheckUpdates,\n    visible && !showNew\n      ? checkForUpdatesInterval * (nearReachStart ? 1 : 2)\n      : null,\n  );\n\n  // const hiddenUI = scrollDirection === 'end' && !nearReachStart;\n\n  return (\n    <FilterContext.Provider value={filterContext}>\n      <div\n        id={`${id}-page`}\n        class=\"deck-container\"\n        ref={(node) => {\n          scrollableRef.current = node;\n          jRef.current = node;\n          kRef.current = node;\n          oRef.current = node;\n          dotRef.current = node;\n        }}\n        tabIndex=\"-1\"\n      >\n        <div class=\"timeline-deck deck\">\n          <header\n            ref={headerRef}\n            // hidden={hiddenUI}\n            onClick={(e) => {\n              if (!e.target.closest('a, button')) {\n                scrollableRef.current?.scrollTo({\n                  top: 0,\n                  behavior: 'smooth',\n                });\n              }\n            }}\n            onDblClick={(e) => {\n              if (!e.target.closest('a, button')) {\n                loadItems(true);\n              }\n            }}\n            class={uiState === 'loading' ? 'loading' : ''}\n          >\n            <div class=\"header-grid\">\n              <div class=\"header-side\">\n                <NavMenu />\n                {headerStart !== null && headerStart !== undefined ? (\n                  headerStart\n                ) : (\n                  <Link to=\"/\" class=\"button plain home-button\">\n                    <Icon icon=\"home\" size=\"l\" />\n                  </Link>\n                )}\n              </div>\n              {title && (titleComponent ? titleComponent : <h1>{title}</h1>)}\n              <div class=\"header-side\">\n                {/* <Loader hidden={uiState !== 'loading'} /> */}\n                {!!headerEnd && headerEnd}\n              </div>\n            </div>\n            {showNewPostsIndicator && (\n              <button\n                class=\"updates-button shiny-pill\"\n                type=\"button\"\n                onClick={handleLoadNewPosts}\n              >\n                <Icon icon=\"arrow-up\" /> New posts\n              </button>\n            )}\n          </header>\n          {!!timelineStart && (\n            <div\n              class={`timeline-start ${uiState === 'loading' ? 'loading' : ''}`}\n            >\n              {timelineStart}\n            </div>\n          )}\n          {!!items.length ? (\n            <>\n              <ul class={`timeline ${view ? `timeline-${view}` : ''}`}>\n                {items.map((status) => (\n                  <TimelineItem\n                    status={status}\n                    instance={instance}\n                    useItemID={useItemID}\n                    // allowFilters={allowFilters}\n                    filterContext={filterContext}\n                    key={status.id + status?._pinned + view}\n                    view={view}\n                    showFollowedTags={showFollowedTags}\n                    showReplyParent={showReplyParent}\n                  />\n                ))}\n                {showMore &&\n                  uiState === 'loading' &&\n                  (view === 'media' ? null : (\n                    <>\n                      <li\n                        style={{\n                          height: '20vh',\n                        }}\n                      >\n                        <Status skeleton />\n                      </li>\n                      <li\n                        style={{\n                          height: '25vh',\n                        }}\n                      >\n                        <Status skeleton />\n                      </li>\n                    </>\n                  ))}\n              </ul>\n              {uiState === 'default' &&\n                (showMore ? (\n                  <InView\n                    root={scrollableRef.current}\n                    rootMargin={`0px 0px ${screen.height * 1.5}px 0px`}\n                    onChange={(inView) => {\n                      if (inView) {\n                        loadItems();\n                      }\n                    }}\n                  >\n                    <button\n                      type=\"button\"\n                      class=\"plain block\"\n                      onClick={() => loadItems()}\n                      style={{ marginBlockEnd: '6em' }}\n                    >\n                      Show more&hellip;\n                    </button>\n                  </InView>\n                ) : (\n                  <p class=\"ui-state insignificant\">The end.</p>\n                ))}\n            </>\n          ) : uiState === 'loading' ? (\n            <ul class=\"timeline\">\n              {Array.from({ length: 5 }).map((_, i) =>\n                view === 'media' ? (\n                  <div\n                    style={{\n                      height: '50vh',\n                    }}\n                  />\n                ) : (\n                  <li key={i}>\n                    <Status skeleton />\n                  </li>\n                ),\n              )}\n            </ul>\n          ) : (\n            uiState !== 'error' && <p class=\"ui-state\">{emptyText}</p>\n          )}\n          {uiState === 'error' && (\n            <p class=\"ui-state\">\n              {errorText}\n              <br />\n              <br />\n              <button type=\"button\" onClick={() => loadItems(!items.length)}>\n                Try again\n              </button>\n            </p>\n          )}\n        </div>\n      </div>\n    </FilterContext.Provider>\n  );\n}\n\nconst TimelineItem = memo(\n  ({\n    status,\n    instance,\n    useItemID,\n    // allowFilters,\n    filterContext,\n    view,\n    showFollowedTags,\n    showReplyParent,\n  }) => {\n    console.debug('RENDER TimelineItem', status.id);\n    const { id: statusID, reblog, items, type, _pinned } = status;\n    if (_pinned) useItemID = false;\n    const actualStatusID = reblog?.id || statusID;\n    const url = instance\n      ? `/${instance}/s/${actualStatusID}`\n      : `/s/${actualStatusID}`;\n    if (items) {\n      const fItems = filteredItems(items, filterContext);\n      let title = '';\n      if (type === 'boosts') {\n        title = `${fItems.length} Boosts`;\n      } else if (type === 'pinned') {\n        title = 'Pinned posts';\n      }\n      const isCarousel = type === 'boosts' || type === 'pinned';\n      if (isCarousel) {\n        // Here, we don't hide filtered posts, but we sort them last\n        fItems.sort((a, b) => {\n          // if (a._filtered && !b._filtered) {\n          //   return 1;\n          // }\n          // if (!a._filtered && b._filtered) {\n          //   return -1;\n          // }\n          const aFiltered = isFiltered(a.filtered, filterContext);\n          const bFiltered = isFiltered(b.filtered, filterContext);\n          if (aFiltered && !bFiltered) {\n            return 1;\n          }\n          if (!aFiltered && bFiltered) {\n            return -1;\n          }\n          return 0;\n        });\n        return (\n          <li key={`timeline-${statusID}`} class=\"timeline-item-carousel\">\n            <StatusCarousel title={title} class={`${type}-carousel`}>\n              {fItems.map((item) => {\n                const { id: statusID, reblog, _pinned } = item;\n                const actualStatusID = reblog?.id || statusID;\n                const url = instance\n                  ? `/${instance}/s/${actualStatusID}`\n                  : `/s/${actualStatusID}`;\n                if (_pinned) useItemID = false;\n                return (\n                  <li key={statusID}>\n                    <Link\n                      class=\"status-carousel-link timeline-item-alt\"\n                      to={url}\n                    >\n                      {useItemID ? (\n                        <Status\n                          statusID={statusID}\n                          instance={instance}\n                          size=\"s\"\n                          contentTextWeight\n                          enableCommentHint\n                          // allowFilters={allowFilters}\n                        />\n                      ) : (\n                        <Status\n                          status={item}\n                          instance={instance}\n                          size=\"s\"\n                          contentTextWeight\n                          enableCommentHint\n                          // allowFilters={allowFilters}\n                        />\n                      )}\n                    </Link>\n                  </li>\n                );\n              })}\n            </StatusCarousel>\n          </li>\n        );\n      }\n      const manyItems = fItems.length > 3;\n      return fItems.map((item, i) => {\n        const { id: statusID, _differentAuthor } = item;\n        const url = instance ? `/${instance}/s/${statusID}` : `/s/${statusID}`;\n        const isMiddle = i > 0 && i < fItems.length - 1;\n        const isSpoiler = item.sensitive && !!item.spoilerText;\n        const showCompact =\n          (!_differentAuthor && isSpoiler && i > 0) ||\n          (manyItems &&\n            isMiddle &&\n            (type === 'thread' ||\n              (type === 'conversation' &&\n                !_differentAuthor &&\n                !fItems[i - 1]._differentAuthor &&\n                !fItems[i + 1]._differentAuthor)));\n        const isStart = i === 0;\n        const isEnd = i === fItems.length - 1;\n        return (\n          <li\n            key={`timeline-${statusID}`}\n            class={`timeline-item-container timeline-item-container-type-${type} timeline-item-container-${\n              isStart ? 'start' : isEnd ? 'end' : 'middle'\n            } ${_differentAuthor ? 'timeline-item-diff-author' : ''}`}\n          >\n            <Link class=\"status-link timeline-item\" to={url}>\n              {showCompact ? (\n                <TimelineStatusCompact status={item} instance={instance} />\n              ) : useItemID ? (\n                <Status\n                  statusID={statusID}\n                  instance={instance}\n                  enableCommentHint={isEnd}\n                  showFollowedTags={showFollowedTags}\n                  // allowFilters={allowFilters}\n                />\n              ) : (\n                <Status\n                  status={item}\n                  instance={instance}\n                  enableCommentHint={isEnd}\n                  showFollowedTags={showFollowedTags}\n                  // allowFilters={allowFilters}\n                />\n              )}\n            </Link>\n          </li>\n        );\n      });\n    }\n\n    const itemKey = `timeline-${statusID + _pinned}`;\n\n    if (view === 'media') {\n      return useItemID ? (\n        <MediaPost\n          class=\"timeline-item\"\n          parent=\"li\"\n          key={itemKey}\n          statusID={statusID}\n          instance={instance}\n          // allowFilters={allowFilters}\n        />\n      ) : (\n        <MediaPost\n          class=\"timeline-item\"\n          parent=\"li\"\n          key={itemKey}\n          status={status}\n          instance={instance}\n          // allowFilters={allowFilters}\n        />\n      );\n    }\n\n    return (\n      <li key={itemKey}>\n        <Link class=\"status-link timeline-item\" to={url}>\n          {useItemID ? (\n            <Status\n              statusID={statusID}\n              instance={instance}\n              enableCommentHint\n              showFollowedTags={showFollowedTags}\n              showReplyParent={showReplyParent}\n              // allowFilters={allowFilters}\n            />\n          ) : (\n            <Status\n              status={status}\n              instance={instance}\n              enableCommentHint\n              showFollowedTags={showFollowedTags}\n              showReplyParent={showReplyParent}\n              // allowFilters={allowFilters}\n            />\n          )}\n        </Link>\n      </li>\n    );\n  },\n  (oldProps, newProps) => {\n    const oldID = (oldProps.status?.id || '').toString();\n    const newID = (newProps.status?.id || '').toString();\n    return (\n      oldID === newID &&\n      oldProps.instance === newProps.instance &&\n      oldProps.view === newProps.view\n    );\n  },\n);\n\nfunction StatusCarousel({ title, class: className, children }) {\n  const carouselRef = useRef();\n  // const { reachStart, reachEnd, init } = useScroll({\n  //   scrollableRef: carouselRef,\n  //   direction: 'horizontal',\n  // });\n  const startButtonRef = useRef();\n  const endButtonRef = useRef();\n  // useScrollFn(\n  //   {\n  //     scrollableRef: carouselRef,\n  //     direction: 'horizontal',\n  //     init: true,\n  //   },\n  //   ({ reachStart, reachEnd }) => {\n  //     if (startButtonRef.current) startButtonRef.current.disabled = reachStart;\n  //     if (endButtonRef.current) endButtonRef.current.disabled = reachEnd;\n  //   },\n  //   [],\n  // );\n  // useEffect(() => {\n  //   init?.();\n  // }, []);\n\n  const [render, setRender] = useState(false);\n  useEffect(() => {\n    setTimeout(() => {\n      setRender(true);\n    }, 1);\n  }, []);\n\n  return (\n    <div class={`status-carousel ${className}`}>\n      <header>\n        <h3>{title}</h3>\n        <span>\n          <button\n            ref={startButtonRef}\n            type=\"button\"\n            class=\"small plain2\"\n            // disabled={reachStart}\n            onClick={() => {\n              carouselRef.current?.scrollBy({\n                left: -Math.min(320, carouselRef.current?.offsetWidth),\n                behavior: 'smooth',\n              });\n            }}\n          >\n            <Icon icon=\"chevron-left\" />\n          </button>{' '}\n          <button\n            ref={endButtonRef}\n            type=\"button\"\n            class=\"small plain2\"\n            // disabled={reachEnd}\n            onClick={() => {\n              carouselRef.current?.scrollBy({\n                left: Math.min(320, carouselRef.current?.offsetWidth),\n                behavior: 'smooth',\n              });\n            }}\n          >\n            <Icon icon=\"chevron-right\" />\n          </button>\n        </span>\n      </header>\n      <ul ref={carouselRef}>\n        <InView\n          class=\"status-carousel-beacon\"\n          onChange={(inView) => {\n            if (startButtonRef.current)\n              startButtonRef.current.disabled = inView;\n          }}\n        />\n        {children[0]}\n        {render && children.slice(1)}\n        <InView\n          class=\"status-carousel-beacon\"\n          onChange={(inView) => {\n            if (endButtonRef.current) endButtonRef.current.disabled = inView;\n          }}\n        />\n      </ul>\n    </div>\n  );\n}\n\nfunction TimelineStatusCompact({ status, instance }) {\n  const snapStates = useSnapshot(states);\n  const { id, visibility, language } = status;\n  const statusPeekText = statusPeek(status);\n  const sKey = statusKey(id, instance);\n  return (\n    <article\n      class={`status compact-thread ${\n        visibility === 'direct' ? 'visibility-direct' : ''\n      }`}\n      tabindex=\"-1\"\n    >\n      {!!snapStates.statusThreadNumber[sKey] ? (\n        <div class=\"status-thread-badge\">\n          <Icon icon=\"thread\" size=\"s\" />\n          {snapStates.statusThreadNumber[sKey]\n            ? ` ${snapStates.statusThreadNumber[sKey]}/X`\n            : ''}\n        </div>\n      ) : (\n        <div class=\"status-thread-badge\">\n          <Icon icon=\"thread\" size=\"s\" />\n        </div>\n      )}\n      <div\n        class=\"content-compact\"\n        title={statusPeekText}\n        lang={language}\n        dir=\"auto\"\n      >\n        {statusPeekText}\n        {status.sensitive && status.spoilerText && (\n          <>\n            {' '}\n            <span class=\"spoiler-badge\">\n              <Icon icon=\"eye-close\" size=\"s\" />\n            </span>\n          </>\n        )}\n      </div>\n    </article>\n  );\n}\n\nfunction inBackground() {\n  return !!document.querySelector('.deck-backdrop, #modal-container > *');\n}\n\nexport default Timeline;\n","import { MenuItem } from '@szhsin/react-menu';\nimport {\n  useCallback,\n  useEffect,\n  useMemo,\n  useRef,\n  useState,\n} from 'preact/hooks';\nimport { useParams, useSearchParams } from 'react-router-dom';\nimport { useSnapshot } from 'valtio';\n\nimport AccountInfo from '../components/account-info';\nimport EmojiText from '../components/emoji-text';\nimport Icon from '../components/icon';\nimport Link from '../components/link';\nimport Menu2 from '../components/menu2';\nimport Timeline from '../components/timeline';\nimport { api } from '../utils/api';\nimport pmem from '../utils/pmem';\nimport showToast from '../utils/show-toast';\nimport states from '../utils/states';\nimport { saveStatus } from '../utils/states';\nimport useTitle from '../utils/useTitle';\n\nconst LIMIT = 20;\nconst MIN_YEAR = 1983;\nconst MIN_YEAR_MONTH = `${MIN_YEAR}-01`; // Birth of the Internet\n\nconst supportsInputMonth = (() => {\n  try {\n    const input = document.createElement('input');\n    input.setAttribute('type', 'month');\n    return input.type === 'month';\n  } catch (e) {\n    return false;\n  }\n})();\n\nasync function _isSearchEnabled(instance) {\n  const { masto } = api({ instance });\n  const results = await masto.v2.search.fetch({\n    q: 'from:me',\n    type: 'statuses',\n    limit: 1,\n  });\n  return !!results?.statuses?.length;\n}\nconst isSearchEnabled = pmem(_isSearchEnabled);\n\nfunction AccountStatuses() {\n  const snapStates = useSnapshot(states);\n  const { id, ...params } = useParams();\n  const [searchParams, setSearchParams] = useSearchParams();\n  const month = searchParams.get('month');\n  const excludeReplies = !searchParams.get('replies');\n  const excludeBoosts = !!searchParams.get('boosts');\n  const tagged = searchParams.get('tagged');\n  const media = !!searchParams.get('media');\n  const { masto, instance, authenticated } = api({ instance: params.instance });\n  const { masto: currentMasto, instance: currentInstance } = api();\n  const accountStatusesIterator = useRef();\n\n  const allSearchParams = [month, excludeReplies, excludeBoosts, tagged, media];\n  const [account, setAccount] = useState();\n  const searchOffsetRef = useRef(0);\n  useEffect(() => {\n    searchOffsetRef.current = 0;\n  }, allSearchParams);\n\n  const sameCurrentInstance = useMemo(\n    () => instance === currentInstance,\n    [instance, currentInstance],\n  );\n  const [searchEnabled, setSearchEnabled] = useState(false);\n  useEffect(() => {\n    // Only enable for current logged-in instance\n    // Most remote instances don't allow unauthenticated searches\n    if (!sameCurrentInstance) return;\n    if (!account?.acct) return;\n    (async () => {\n      const enabled = await isSearchEnabled(instance);\n      console.log({ enabled });\n      setSearchEnabled(enabled);\n    })();\n  }, [instance, sameCurrentInstance, account?.acct]);\n\n  async function fetchAccountStatuses(firstLoad) {\n    const isValidMonth = /^\\d{4}-[01]\\d$/.test(month);\n    const isValidYear = month?.split?.('-')?.[0] >= MIN_YEAR;\n    if (isValidMonth && isValidYear) {\n      if (!account) {\n        return {\n          value: [],\n          done: true,\n        };\n      }\n      const [_year, _month] = month.split('-');\n      const monthIndex = parseInt(_month, 10) - 1;\n      // YYYY-MM (no day)\n      // Search options:\n      // - from:account\n      // - after:YYYY-MM-DD (non-inclusive)\n      // - before:YYYY-MM-DD (non-inclusive)\n\n      // Last day of previous month\n      const after = new Date(_year, monthIndex, 0);\n      const afterStr = `${after.getFullYear()}-${(after.getMonth() + 1)\n        .toString()\n        .padStart(2, '0')}-${after.getDate().toString().padStart(2, '0')}`;\n      // First day of next month\n      const before = new Date(_year, monthIndex + 1, 1);\n      const beforeStr = `${before.getFullYear()}-${(before.getMonth() + 1)\n        .toString()\n        .padStart(2, '0')}-${before.getDate().toString().padStart(2, '0')}`;\n      console.log({\n        month,\n        _year,\n        _month,\n        monthIndex,\n        after,\n        before,\n        afterStr,\n        beforeStr,\n      });\n\n      let limit;\n      if (firstLoad) {\n        limit = LIMIT + 1;\n        searchOffsetRef.current = 0;\n      } else {\n        limit = LIMIT + searchOffsetRef.current + 1;\n        searchOffsetRef.current += LIMIT;\n      }\n\n      const searchResults = await masto.v2.search.fetch({\n        q: `from:${account.acct} after:${afterStr} before:${beforeStr}`,\n        type: 'statuses',\n        limit,\n        offset: searchOffsetRef.current,\n      });\n      if (searchResults?.statuses?.length) {\n        const value = searchResults.statuses.slice(0, LIMIT);\n        value.forEach((item) => {\n          saveStatus(item, instance);\n        });\n        const done = searchResults.statuses.length <= LIMIT;\n        return { value, done };\n      } else {\n        return { value: [], done: true };\n      }\n    }\n\n    const results = [];\n    if (firstLoad) {\n      const { value } = await masto.v1.accounts\n        .$select(id)\n        .statuses.list({\n          pinned: true,\n        })\n        .next();\n      if (value?.length && !tagged && !media) {\n        const pinnedStatuses = value.map((status) => {\n          saveStatus(status, instance);\n          return {\n            ...status,\n            _pinned: true,\n          };\n        });\n        if (pinnedStatuses.length >= 3) {\n          const pinnedStatusesIds = pinnedStatuses.map((status) => status.id);\n          results.push({\n            id: pinnedStatusesIds,\n            items: pinnedStatuses,\n            type: 'pinned',\n          });\n        } else {\n          results.push(...pinnedStatuses);\n        }\n      }\n    }\n    if (firstLoad || !accountStatusesIterator.current) {\n      accountStatusesIterator.current = masto.v1.accounts\n        .$select(id)\n        .statuses.list({\n          limit: LIMIT,\n          exclude_replies: excludeReplies,\n          exclude_reblogs: excludeBoosts,\n          only_media: media,\n          tagged,\n        });\n    }\n    const { value, done } = await accountStatusesIterator.current.next();\n    if (value?.length) {\n      results.push(...value);\n\n      value.forEach((item) => {\n        saveStatus(item, instance);\n      });\n    }\n    return {\n      value: results,\n      done,\n    };\n  }\n\n  const [featuredTags, setFeaturedTags] = useState([]);\n  useTitle(\n    account?.acct\n      ? `${\n          account?.displayName\n            ? `${account.displayName} (${/@/.test(account.acct) ? '' : '@'}${\n                account.acct\n              })`\n            : `${/@/.test(account.acct) ? '' : '@'}${account.acct}`\n        }${\n          !excludeReplies\n            ? ' (+ Replies)'\n            : excludeBoosts\n            ? ' (- Boosts)'\n            : tagged\n            ? ` (#${tagged})`\n            : media\n            ? ' (Media)'\n            : month\n            ? ` (${new Date(month).toLocaleString('default', {\n                month: 'long',\n                year: 'numeric',\n              })})`\n            : ''\n        }`\n      : 'Account posts',\n    '/:instance?/a/:id',\n  );\n\n  const fetchAccountPromiseRef = useRef();\n  const fetchAccount = useCallback(() => {\n    const fetchPromise =\n      fetchAccountPromiseRef.current || masto.v1.accounts.$select(id).fetch();\n    fetchAccountPromiseRef.current = fetchPromise;\n    return fetchPromise;\n  }, [id, masto]);\n\n  useEffect(() => {\n    (async () => {\n      try {\n        const acc = await fetchAccount();\n        console.log(acc);\n        setAccount(acc);\n      } catch (e) {\n        console.error(e);\n      }\n      try {\n        const featuredTags = await masto.v1.accounts\n          .$select(id)\n          .featuredTags.list();\n        console.log({ featuredTags });\n        setFeaturedTags(featuredTags);\n      } catch (e) {\n        console.error(e);\n      }\n    })();\n  }, [id]);\n\n  const { displayName, acct, emojis } = account || {};\n\n  const filterBarRef = useRef();\n  const TimelineStart = useMemo(() => {\n    const filtered =\n      !excludeReplies || excludeBoosts || tagged || media || !!month;\n    const cachedAccount = snapStates.accounts[`${id}@${instance}`];\n\n    return (\n      <>\n        <AccountInfo\n          instance={instance}\n          account={cachedAccount || id}\n          fetchAccount={fetchAccount}\n          authenticated={authenticated}\n          standalone\n        />\n        <div\n          class=\"filter-bar\"\n          ref={filterBarRef}\n          style={{\n            position: 'relative',\n          }}\n        >\n          {filtered ? (\n            <Link\n              to={`/${instance}/a/${id}`}\n              class=\"insignificant filter-clear\"\n              title=\"Clear filters\"\n              key=\"clear-filters\"\n            >\n              <Icon icon=\"x\" size=\"l\" />\n            </Link>\n          ) : (\n            <Icon icon=\"filter\" class=\"insignificant\" size=\"l\" />\n          )}\n          <Link\n            to={`/${instance}/a/${id}${excludeReplies ? '?replies=1' : ''}`}\n            onClick={() => {\n              if (excludeReplies) {\n                showToast('Showing post with replies');\n              }\n            }}\n            class={excludeReplies ? '' : 'is-active'}\n          >\n            + Replies\n          </Link>\n          <Link\n            to={`/${instance}/a/${id}${excludeBoosts ? '' : '?boosts=0'}`}\n            onClick={() => {\n              if (!excludeBoosts) {\n                showToast('Showing posts without boosts');\n              }\n            }}\n            class={!excludeBoosts ? '' : 'is-active'}\n          >\n            - Boosts\n          </Link>\n          <Link\n            to={`/${instance}/a/${id}${media ? '' : '?media=1'}`}\n            onClick={() => {\n              if (!media) {\n                showToast('Showing posts with media');\n              }\n            }}\n            class={media ? 'is-active' : ''}\n          >\n            Media\n          </Link>\n          {featuredTags.map((tag) => (\n            <Link\n              key={tag.id}\n              to={`/${instance}/a/${id}${\n                tagged === tag.name\n                  ? ''\n                  : `?tagged=${encodeURIComponent(tag.name)}`\n              }`}\n              onClick={() => {\n                if (tagged !== tag.name) {\n                  showToast(`Showing posts tagged with #${tag.name}`);\n                }\n              }}\n              class={tagged === tag.name ? 'is-active' : ''}\n            >\n              <span>\n                <span class=\"more-insignificant\">#</span>\n                {tag.name}\n              </span>\n              {\n                // The count differs based on instance 😅\n              }\n              {/* <span class=\"filter-count\">{tag.statusesCount}</span> */}\n            </Link>\n          ))}\n          {searchEnabled &&\n            (supportsInputMonth ? (\n              <label class={`filter-field ${month ? 'is-active' : ''}`}>\n                <Icon icon=\"month\" size=\"l\" />\n                <input\n                  type=\"month\"\n                  disabled={!account?.acct}\n                  value={month || ''}\n                  min={MIN_YEAR_MONTH}\n                  max={new Date().toISOString().slice(0, 7)}\n                  onInput={(e) => {\n                    const { value, validity } = e.currentTarget;\n                    if (!validity.valid) return;\n                    setSearchParams(\n                      value\n                        ? {\n                            month: value,\n                          }\n                        : {},\n                    );\n                    const [year, month] = value.split('-');\n                    const monthIndex = parseInt(month, 10) - 1;\n                    const date = new Date(year, monthIndex);\n                    showToast(\n                      `Showing posts in ${date.toLocaleString('default', {\n                        month: 'long',\n                        year: 'numeric',\n                      })}`,\n                    );\n                  }}\n                />\n              </label>\n            ) : (\n              // Fallback to <select> for month and <input type=\"number\"> for year\n              <MonthPicker\n                class={`filter-field ${month ? 'is-active' : ''}`}\n                disabled={!account?.acct}\n                value={month || ''}\n                min={MIN_YEAR_MONTH}\n                max={new Date().toISOString().slice(0, 7)}\n                onInput={(e) => {\n                  const { value, validity } = e;\n                  if (!validity.valid) return;\n                  setSearchParams(\n                    value\n                      ? {\n                          month: value,\n                        }\n                      : {},\n                  );\n                }}\n              />\n            ))}\n        </div>\n      </>\n    );\n  }, [\n    id,\n    instance,\n    authenticated,\n    featuredTags,\n    fetchAccount,\n    searchEnabled,\n    ...allSearchParams,\n  ]);\n\n  useEffect(() => {\n    // Focus on .is-active\n    const active = filterBarRef.current?.querySelector('.is-active');\n    if (active) {\n      console.log('active', active, active.offsetLeft);\n      filterBarRef.current.scrollTo({\n        behavior: 'smooth',\n        left:\n          active.offsetLeft -\n          (filterBarRef.current.offsetWidth - active.offsetWidth) / 2,\n      });\n    }\n  }, [featuredTags, searchEnabled, ...allSearchParams]);\n\n  const accountInstance = useMemo(() => {\n    if (!account?.url) return null;\n    const domain = new URL(account.url).hostname;\n    return domain;\n  }, [account]);\n  const sameInstance = instance === accountInstance;\n  const allowSwitch = !!account && !sameInstance;\n\n  return (\n    <Timeline\n      key={id}\n      title={`${account?.acct ? '@' + account.acct : 'Posts'}`}\n      titleComponent={\n        <h1\n          class=\"header-double-lines header-account\"\n          // onClick={() => {\n          //   states.showAccount = {\n          //     account,\n          //     instance,\n          //   };\n          // }}\n        >\n          <b>\n            <EmojiText text={displayName} emojis={emojis} />\n          </b>\n          <div>\n            <span>@{acct}</span>\n          </div>\n        </h1>\n      }\n      id=\"account-statuses\"\n      instance={instance}\n      emptyText=\"Nothing to see here yet.\"\n      errorText=\"Unable to load posts\"\n      fetchItems={fetchAccountStatuses}\n      useItemID\n      view={media ? 'media' : undefined}\n      boostsCarousel={snapStates.settings.boostsCarousel}\n      timelineStart={TimelineStart}\n      refresh={[\n        excludeReplies,\n        excludeBoosts,\n        tagged,\n        media,\n        month + account?.acct,\n      ].toString()}\n      headerEnd={\n        <Menu2\n          portal\n          // setDownOverflow\n          overflow=\"auto\"\n          viewScroll=\"close\"\n          position=\"anchor\"\n          menuButton={\n            <button type=\"button\" class=\"plain\">\n              <Icon icon=\"more\" size=\"l\" />\n            </button>\n          }\n        >\n          <MenuItem\n            disabled={!allowSwitch}\n            onClick={() => {\n              (async () => {\n                try {\n                  const { masto } = api({\n                    instance: accountInstance,\n                  });\n                  const acc = await masto.v1.accounts.lookup({\n                    acct: account.acct,\n                  });\n                  const { id } = acc;\n                  location.hash = `/${accountInstance}/a/${id}`;\n                } catch (e) {\n                  console.error(e);\n                  alert('Unable to fetch account info');\n                }\n              })();\n            }}\n          >\n            <Icon icon=\"transfer\" />{' '}\n            <small class=\"menu-double-lines\">\n              Switch to account's instance (<b>{accountInstance}</b>)\n            </small>\n          </MenuItem>\n          {!sameCurrentInstance && (\n            <MenuItem\n              onClick={() => {\n                (async () => {\n                  try {\n                    const acc = await currentMasto.v1.accounts.lookup({\n                      acct: account.acct + '@' + instance,\n                    });\n                    const { id } = acc;\n                    location.hash = `/${currentInstance}/a/${id}`;\n                  } catch (e) {\n                    console.error(e);\n                    alert('Unable to fetch account info');\n                  }\n                })();\n              }}\n            >\n              <Icon icon=\"transfer\" />{' '}\n              <small class=\"menu-double-lines\">\n                Switch to my instance (<b>{currentInstance}</b>)\n              </small>\n            </MenuItem>\n          )}\n        </Menu2>\n      }\n    />\n  );\n}\n\nfunction MonthPicker(props) {\n  const {\n    class: className,\n    disabled,\n    value,\n    min,\n    max,\n    onInput = () => {},\n  } = props;\n  const [_year, _month] = value?.split('-') || [];\n  const monthFieldRef = useRef();\n  const yearFieldRef = useRef();\n\n  const checkValidity = (month, year) => {\n    const [minYear, minMonth] = min?.split('-') || [];\n    const [maxYear, maxMonth] = max?.split('-') || [];\n    if (year < minYear) return false;\n    if (year > maxYear) return false;\n    if (year === minYear && month < minMonth) return false;\n    if (year === maxYear && month > maxMonth) return false;\n    return true;\n  };\n\n  return (\n    <div class={className}>\n      <Icon icon=\"month\" size=\"l\" />\n      <select\n        ref={monthFieldRef}\n        disabled={disabled}\n        value={_month || ''}\n        onInput={(e) => {\n          const { value: month } = e.currentTarget;\n          const year = yearFieldRef.current.value;\n          if (!checkValidity(month, year))\n            return {\n              value: '',\n              validity: {\n                valid: false,\n              },\n            };\n          onInput({\n            value: month ? `${year}-${month}` : '',\n            validity: {\n              valid: true,\n            },\n          });\n        }}\n      >\n        <option value=\"\">Month</option>\n        <option disabled>-----</option>\n        {Array.from({ length: 12 }, (_, i) => (\n          <option\n            value={\n              // Month is 1-indexed\n              (i + 1).toString().padStart(2, '0')\n            }\n            key={i}\n          >\n            {new Date(0, i).toLocaleString('default', {\n              month: 'long',\n            })}\n          </option>\n        ))}\n      </select>{' '}\n      <input\n        ref={yearFieldRef}\n        type=\"number\"\n        disabled={disabled}\n        value={_year || new Date().getFullYear()}\n        min={min?.slice(0, 4) || MIN_YEAR}\n        max={max?.slice(0, 4) || new Date().getFullYear()}\n        onInput={(e) => {\n          const { value: year, validity } = e.currentTarget;\n          const month = monthFieldRef.current.value;\n          if (!validity.valid || !checkValidity(month, year))\n            return {\n              value: '',\n              validity: {\n                valid: false,\n              },\n            };\n          onInput({\n            value: year ? `${year}-${month}` : '',\n            validity: {\n              valid: true,\n            },\n          });\n        }}\n        style={{\n          width: '4.5em',\n        }}\n      />\n    </div>\n  );\n}\n\nexport default AccountStatuses;\n","import { useRef } from 'preact/hooks';\n\nimport Timeline from '../components/timeline';\nimport { api } from '../utils/api';\nimport useTitle from '../utils/useTitle';\n\nconst LIMIT = 20;\n\nfunction Bookmarks() {\n  useTitle('Bookmarks', '/b');\n  const { masto, instance } = api();\n  const bookmarksIterator = useRef();\n  async function fetchBookmarks(firstLoad) {\n    if (firstLoad || !bookmarksIterator.current) {\n      bookmarksIterator.current = masto.v1.bookmarks.list({ limit: LIMIT });\n    }\n    return await bookmarksIterator.current.next();\n  }\n\n  return (\n    <Timeline\n      title=\"Bookmarks\"\n      id=\"bookmarks\"\n      emptyText=\"No bookmarks yet. Go bookmark something!\"\n      errorText=\"Unable to load bookmarks\"\n      instance={instance}\n      fetchItems={fetchBookmarks}\n    />\n  );\n}\n\nexport default Bookmarks;\n","import { useRef } from 'preact/hooks';\n\nimport Timeline from '../components/timeline';\nimport { api } from '../utils/api';\nimport useTitle from '../utils/useTitle';\n\nconst LIMIT = 20;\n\nfunction Favourites() {\n  useTitle('Likes', '/f');\n  const { masto, instance } = api();\n  const favouritesIterator = useRef();\n  async function fetchFavourites(firstLoad) {\n    if (firstLoad || !favouritesIterator.current) {\n      favouritesIterator.current = masto.v1.favourites.list({ limit: LIMIT });\n    }\n    return await favouritesIterator.current.next();\n  }\n\n  return (\n    <Timeline\n      title=\"Likes\"\n      id=\"favourites\"\n      emptyText=\"No likes yet. Go like something!\"\n      errorText=\"Unable to load likes\"\n      instance={instance}\n      fetchItems={fetchFavourites}\n    />\n  );\n}\n\nexport default Favourites;\n","import './filters.css';\n\nimport { useEffect, useReducer, useRef, useState } from 'preact/hooks';\n\nimport Icon from '../components/icon';\nimport Link from '../components/link';\nimport Loader from '../components/loader';\nimport MenuConfirm from '../components/menu-confirm';\nimport Modal from '../components/modal';\nimport NavMenu from '../components/nav-menu';\nimport RelativeTime from '../components/relative-time';\nimport { api } from '../utils/api';\nimport useInterval from '../utils/useInterval';\nimport useTitle from '../utils/useTitle';\n\nconst FILTER_CONTEXT = ['home', 'public', 'notifications', 'thread', 'account'];\nconst FILTER_CONTEXT_UNIMPLEMENTED = ['notifications', 'thread', 'account'];\nconst FILTER_CONTEXT_LABELS = {\n  home: 'Home and lists',\n  notifications: 'Notifications',\n  public: 'Public timelines',\n  thread: 'Conversations',\n  account: 'Profiles',\n};\n\nconst EXPIRY_DURATIONS = [\n  0, // forever\n  30 * 60, // 30 minutes\n  60 * 60, // 1 hour\n  6 * 60 * 60, // 6 hours\n  12 * 60 * 60, // 12 hours\n  60 * 60 * 24, // 24 hours\n  60 * 60 * 24 * 7, // 7 days\n  60 * 60 * 24 * 30, // 30 days\n];\nconst EXPIRY_DURATIONS_LABELS = {\n  0: 'Never',\n  1800: '30 minutes',\n  3600: '1 hour',\n  21600: '6 hours',\n  43200: '12 hours',\n  86_400: '24 hours',\n  604_800: '7 days',\n  2_592_000: '30 days',\n};\n\nfunction Filters() {\n  const { masto } = api();\n  useTitle(`Filters`, `/ft`);\n  const [uiState, setUIState] = useState('default');\n  const [showFiltersAddEditModal, setShowFiltersAddEditModal] = useState(false);\n\n  const [reloadCount, reload] = useReducer((c) => c + 1, 0);\n  const [filters, setFilters] = useState([]);\n  useEffect(() => {\n    setUIState('loading');\n    (async () => {\n      try {\n        const filters = await masto.v2.filters.list();\n        filters.sort((a, b) => a.title.localeCompare(b.title));\n        filters.forEach((filter) => {\n          if (filter.keywords?.length) {\n            filter.keywords.sort((a, b) => a.id - b.id);\n          }\n        });\n        console.log(filters);\n        setFilters(filters);\n        setUIState('default');\n      } catch (e) {\n        console.error(e);\n        setUIState('error');\n      }\n    })();\n  }, [reloadCount]);\n\n  return (\n    <div id=\"filters-page\" class=\"deck-container\" tabIndex=\"-1\">\n      <div class=\"timeline-deck deck\">\n        <header>\n          <div class=\"header-grid\">\n            <div class=\"header-side\">\n              <NavMenu />\n              <Link to=\"/\" class=\"button plain\">\n                <Icon icon=\"home\" size=\"l\" />\n              </Link>\n            </div>\n            <h1>Filters</h1>\n            <div class=\"header-side\">\n              <button\n                type=\"button\"\n                class=\"plain\"\n                onClick={() => {\n                  setShowFiltersAddEditModal(true);\n                }}\n              >\n                <Icon icon=\"plus\" size=\"l\" alt=\"New filter\" />\n              </button>\n            </div>\n          </div>\n        </header>\n        <main>\n          {filters.length > 0 ? (\n            <>\n              <ul class=\"filters-list\">\n                {filters.map((filter) => {\n                  const { id, title, expiresAt, keywords } = filter;\n                  return (\n                    <li key={id}>\n                      <div>\n                        <h2>{title}</h2>\n                        {keywords?.length > 0 && (\n                          <div>\n                            {keywords.map((k) => (\n                              <>\n                                <span class=\"tag collapsed insignificant\">\n                                  {k.wholeWord ? `“${k.keyword}”` : k.keyword}\n                                </span>{' '}\n                              </>\n                            ))}\n                          </div>\n                        )}\n                        <small class=\"insignificant\">\n                          <ExpiryStatus expiresAt={expiresAt} />\n                        </small>\n                      </div>\n                      <button\n                        type=\"button\"\n                        class=\"plain\"\n                        onClick={() => {\n                          setShowFiltersAddEditModal({\n                            filter,\n                          });\n                        }}\n                      >\n                        <Icon icon=\"pencil\" size=\"l\" alt=\"Edit filter\" />\n                      </button>\n                    </li>\n                  );\n                })}\n              </ul>\n              {filters.length > 1 && (\n                <footer class=\"ui-state\">\n                  <small class=\"insignificant\">\n                    {filters.length} filter\n                    {filters.length === 1 ? '' : 's'}\n                  </small>\n                </footer>\n              )}\n            </>\n          ) : uiState === 'loading' ? (\n            <p class=\"ui-state\">\n              <Loader />\n            </p>\n          ) : uiState === 'error' ? (\n            <p class=\"ui-state\">Unable to load filters.</p>\n          ) : (\n            <p class=\"ui-state\">No filters yet.</p>\n          )}\n        </main>\n      </div>\n      {!!showFiltersAddEditModal && (\n        <Modal\n          title=\"Add filter\"\n          onClose={() => {\n            setShowFiltersAddEditModal(false);\n          }}\n        >\n          <FiltersAddEdit\n            filter={showFiltersAddEditModal?.filter}\n            onClose={(result) => {\n              if (result.state === 'success') {\n                reload();\n              }\n              setShowFiltersAddEditModal(false);\n            }}\n          />\n        </Modal>\n      )}\n    </div>\n  );\n}\n\nlet _id = 1;\nconst incID = () => _id++;\nfunction FiltersAddEdit({ filter, onClose }) {\n  const { masto } = api();\n  const [uiState, setUIState] = useState('default');\n  const editMode = !!filter;\n  const { context, expiresAt, id, keywords, title, filterAction } =\n    filter || {};\n  const hasExpiry = !!expiresAt;\n  const expiresAtDate = hasExpiry && new Date(expiresAt);\n  const [editKeywords, setEditKeywords] = useState(keywords || []);\n  const keywordsRef = useRef();\n\n  // Hacky way of handling removed keywords for both existing and new ones\n  const [removedKeywordIDs, setRemovedKeywordIDs] = useState([]);\n  const [removedKeyword_IDs, setRemovedKeyword_IDs] = useState([]);\n\n  const filteredEditKeywords = editKeywords.filter(\n    (k) =>\n      !removedKeywordIDs.includes(k.id) && !removedKeyword_IDs.includes(k._id),\n  );\n\n  return (\n    <div class=\"sheet\" id=\"filters-add-edit-modal\">\n      {!!onClose && (\n        <button type=\"button\" class=\"sheet-close\" onClick={onClose}>\n          <Icon icon=\"x\" />\n        </button>\n      )}\n      <header>\n        <h2>{editMode ? 'Edit filter' : 'New filter'}</h2>\n      </header>\n      <main>\n        <form\n          onSubmit={(e) => {\n            e.preventDefault();\n            const formData = new FormData(e.target);\n            const title = formData.get('title');\n            const keywordIDs = formData.getAll('keyword_attributes[][id]');\n            const keywordKeywords = formData.getAll(\n              'keyword_attributes[][keyword]',\n            );\n            // const keywordWholeWords = formData.getAll(\n            //   'keyword_attributes[][whole_word]',\n            // );\n            // Not using getAll because it skips the empty checkboxes\n            const keywordWholeWords = [\n              ...keywordsRef.current.querySelectorAll(\n                'input[name=\"keyword_attributes[][whole_word]\"]',\n              ),\n            ].map((i) => i.checked);\n            const keywordsAttributes = keywordKeywords.map((k, i) => ({\n              id: keywordIDs[i] || undefined,\n              keyword: k,\n              wholeWord: keywordWholeWords[i],\n            }));\n            // if (editMode && keywords?.length) {\n            //   // Find which one got deleted and add to keywordsAttributes\n            //   keywords.forEach((k) => {\n            //     if (!keywordsAttributes.find((ka) => ka.id === k.id)) {\n            //       keywordsAttributes.push({\n            //         ...k,\n            //         _destroy: true,\n            //       });\n            //     }\n            //   });\n            // }\n            if (editMode && removedKeywordIDs?.length) {\n              removedKeywordIDs.forEach((id) => {\n                keywordsAttributes.push({\n                  id,\n                  _destroy: true,\n                });\n              });\n            }\n            const context = formData.getAll('context');\n            let expiresIn = formData.get('expires_in');\n            const filterAction = formData.get('filter_action');\n            console.log({\n              title,\n              keywordIDs,\n              keywords: keywordKeywords,\n              wholeWords: keywordWholeWords,\n              keywordsAttributes,\n              context,\n              expiresIn,\n              filterAction,\n            });\n\n            // Required fields\n            if (!title || !context?.length) {\n              return;\n            }\n\n            setUIState('loading');\n\n            (async () => {\n              try {\n                let filterResult;\n\n                if (editMode) {\n                  if (expiresIn === '' || expiresIn === null) {\n                    // No value\n                    // Preserve existing expiry if not specified\n                    // Seconds from now to expiresAtDate\n                    // Other clients don't do this\n                    expiresIn = Math.floor((expiresAtDate - new Date()) / 1000);\n                  } else if (expiresIn === '0' || expiresIn === 0) {\n                    // 0 = Never\n                    expiresIn = null;\n                  } else {\n                    expiresIn = +expiresIn;\n                  }\n                  filterResult = await masto.v2.filters.$select(id).update({\n                    title,\n                    context,\n                    expiresIn,\n                    keywordsAttributes,\n                    filterAction,\n                  });\n                } else {\n                  expiresIn = +expiresIn || null;\n                  filterResult = await masto.v2.filters.create({\n                    title,\n                    context,\n                    expiresIn,\n                    keywordsAttributes,\n                    filterAction,\n                  });\n                }\n                console.log({ filterResult });\n                setUIState('default');\n                onClose?.({\n                  state: 'success',\n                  filter: filterResult,\n                });\n              } catch (error) {\n                console.error(error);\n                setUIState('error');\n                alert(\n                  editMode\n                    ? 'Unable to edit filter'\n                    : 'Unable to create filter',\n                );\n              }\n            })();\n          }}\n        >\n          <div class=\"filter-form-row\">\n            <label>\n              <b>Title</b>\n              <input\n                type=\"text\"\n                name=\"title\"\n                defaultValue={title}\n                disabled={uiState === 'loading'}\n                dir=\"auto\"\n                required\n              />\n            </label>\n          </div>\n          <div class=\"filter-form-keywords\" ref={keywordsRef}>\n            {filteredEditKeywords.length ? (\n              <ul class=\"filter-keywords\">\n                {filteredEditKeywords.map((k) => {\n                  const { id, keyword, wholeWord, _id } = k;\n                  return (\n                    <li key={`${id}-${_id}`}>\n                      <input\n                        type=\"hidden\"\n                        name=\"keyword_attributes[][id]\"\n                        value={id}\n                      />\n                      <input\n                        name=\"keyword_attributes[][keyword]\"\n                        type=\"text\"\n                        defaultValue={keyword}\n                        disabled={uiState === 'loading'}\n                        required\n                      />\n                      <div class=\"filter-keyword-actions\">\n                        <label>\n                          <input\n                            name=\"keyword_attributes[][whole_word]\"\n                            type=\"checkbox\"\n                            value={id} // Hacky way to map checkbox boolean to the keyword id\n                            defaultChecked={wholeWord}\n                            disabled={uiState === 'loading'}\n                          />{' '}\n                          Whole word\n                        </label>\n                        <button\n                          type=\"button\"\n                          class=\"light danger small\"\n                          disabled={uiState === 'loading'}\n                          onClick={() => {\n                            if (id) {\n                              removedKeywordIDs.push(id);\n                              setRemovedKeywordIDs([...removedKeywordIDs]);\n                            } else if (_id) {\n                              removedKeyword_IDs.push(_id);\n                              setRemovedKeyword_IDs([...removedKeyword_IDs]);\n                            }\n                          }}\n                        >\n                          <Icon icon=\"x\" />\n                        </button>\n                      </div>\n                    </li>\n                  );\n                })}\n              </ul>\n            ) : (\n              <div class=\"filter-keywords\">\n                <div class=\"insignificant\">No keywords. Add one.</div>\n              </div>\n            )}\n            <footer class=\"filter-keywords-footer\">\n              <button\n                type=\"button\"\n                class=\"light\"\n                onClick={() => {\n                  setEditKeywords([\n                    ...editKeywords,\n                    {\n                      _id: incID(),\n                      keyword: '',\n                      wholeWord: true,\n                    },\n                  ]);\n                  setTimeout(() => {\n                    // Focus last input\n                    const fields =\n                      keywordsRef.current.querySelectorAll(\n                        'input[type=\"text\"]',\n                      );\n                    fields[fields.length - 1]?.focus?.();\n                  }, 10);\n                }}\n              >\n                Add keyword\n              </button>{' '}\n              {filteredEditKeywords?.length > 1 && (\n                <small class=\"insignificant\">\n                  {filteredEditKeywords.length} keyword\n                  {filteredEditKeywords.length === 1 ? '' : 's'}\n                </small>\n              )}\n            </footer>\n          </div>\n          <div class=\"filter-form-cols\">\n            <div class=\"filter-form-col\">\n              <div>\n                <b>Filter from…</b>\n              </div>\n              {FILTER_CONTEXT.map((ctx) => (\n                <div>\n                  <label\n                    class={\n                      FILTER_CONTEXT_UNIMPLEMENTED.includes(ctx)\n                        ? 'insignificant'\n                        : ''\n                    }\n                  >\n                    <input\n                      type=\"checkbox\"\n                      name=\"context\"\n                      value={ctx}\n                      defaultChecked={!!context ? context.includes(ctx) : true}\n                      disabled={uiState === 'loading'}\n                    />{' '}\n                    {FILTER_CONTEXT_LABELS[ctx]}\n                    {FILTER_CONTEXT_UNIMPLEMENTED.includes(ctx) ? '*' : ''}\n                  </label>{' '}\n                </div>\n              ))}\n              <p>\n                <small class=\"insignificant\">* Not implemented yet</small>\n              </p>\n            </div>\n            <div class=\"filter-form-col\">\n              {editMode && (\n                <>\n                  Status:{' '}\n                  <b>\n                    <ExpiryStatus expiresAt={expiresAt} showNeverExpires />\n                  </b>\n                </>\n              )}\n              <div>\n                <label for=\"filters-expires_in\">\n                  {editMode ? 'Change expiry' : 'Expiry'}\n                </label>\n                <select\n                  id=\"filters-expires_in\"\n                  name=\"expires_in\"\n                  disabled={uiState === 'loading'}\n                  defaultValue={editMode ? undefined : 0}\n                >\n                  {editMode && <option></option>}\n                  {EXPIRY_DURATIONS.map((v) => (\n                    <option value={v}>{EXPIRY_DURATIONS_LABELS[v]}</option>\n                  ))}\n                </select>\n              </div>\n              <p>\n                Filtered post will be…\n                <br />\n                <label class=\"ib\">\n                  <input\n                    type=\"radio\"\n                    name=\"filter_action\"\n                    value=\"warn\"\n                    defaultChecked={filterAction === 'warn' || !editMode}\n                    disabled={uiState === 'loading'}\n                  />{' '}\n                  minimized\n                </label>{' '}\n                <label class=\"ib\">\n                  <input\n                    type=\"radio\"\n                    name=\"filter_action\"\n                    value=\"hide\"\n                    defaultChecked={filterAction === 'hide'}\n                    disabled={uiState === 'loading'}\n                  />{' '}\n                  hidden\n                </label>\n              </p>\n            </div>\n          </div>\n          <footer class=\"filter-form-footer\">\n            <span>\n              <button type=\"submit\" disabled={uiState === 'loading'}>\n                {editMode ? 'Save' : 'Create'}\n              </button>{' '}\n              <Loader abrupt hidden={uiState !== 'loading'} />\n            </span>\n            {editMode && (\n              <MenuConfirm\n                disabled={uiState === 'loading'}\n                align=\"end\"\n                menuItemClassName=\"danger\"\n                confirmLabel=\"Delete this filter?\"\n                onClick={() => {\n                  setUIState('loading');\n                  (async () => {\n                    try {\n                      await masto.v2.filters.$select(id).remove();\n                      setUIState('default');\n                      onClose?.({\n                        state: 'success',\n                      });\n                    } catch (e) {\n                      console.error(e);\n                      setUIState('error');\n                      alert('Unable to delete filter.');\n                    }\n                  })();\n                }}\n              >\n                <button\n                  type=\"button\"\n                  class=\"light danger\"\n                  onClick={() => {}}\n                  disabled={uiState === 'loading'}\n                >\n                  Delete…\n                </button>\n              </MenuConfirm>\n            )}\n          </footer>\n        </form>\n      </main>\n    </div>\n  );\n}\n\nfunction ExpiryStatus({ expiresAt, showNeverExpires }) {\n  const hasExpiry = !!expiresAt;\n  const expiresAtDate = hasExpiry && new Date(expiresAt);\n  const expired = hasExpiry && expiresAtDate <= new Date();\n\n  // If less than a minute left, re-render interval every second, else every minute\n  const [_, rerender] = useReducer((c) => c + 1, 0);\n  useInterval(rerender, expired || 30_000);\n\n  return expired ? (\n    'Expired'\n  ) : hasExpiry ? (\n    <>\n      Expiring <RelativeTime datetime={expiresAtDate} />\n    </>\n  ) : (\n    showNeverExpires && 'Never expires'\n  );\n}\n\nexport default Filters;\n","import { useEffect, useState } from 'preact/hooks';\n\nimport Icon from '../components/icon';\nimport Link from '../components/link';\nimport Loader from '../components/loader';\nimport NavMenu from '../components/nav-menu';\nimport { api } from '../utils/api';\nimport { fetchFollowedTags } from '../utils/followed-tags';\nimport useTitle from '../utils/useTitle';\n\nfunction FollowedHashtags() {\n  const { masto, instance } = api();\n  useTitle(`Followed Hashtags`, `/fh`);\n  const [uiState, setUIState] = useState('default');\n\n  const [followedHashtags, setFollowedHashtags] = useState([]);\n  useEffect(() => {\n    setUIState('loading');\n    (async () => {\n      try {\n        const tags = await fetchFollowedTags();\n        setFollowedHashtags(tags);\n        setUIState('default');\n      } catch (e) {\n        console.error(e);\n        setUIState('error');\n      }\n    })();\n  }, []);\n\n  return (\n    <div id=\"followed-hashtags-page\" class=\"deck-container\" tabIndex=\"-1\">\n      <div class=\"timeline-deck deck\">\n        <header>\n          <div class=\"header-grid\">\n            <div class=\"header-side\">\n              <NavMenu />\n              <Link to=\"/\" class=\"button plain\">\n                <Icon icon=\"home\" size=\"l\" />\n              </Link>\n            </div>\n            <h1>Followed Hashtags</h1>\n            <div class=\"header-side\" />\n          </div>\n        </header>\n        <main>\n          {followedHashtags.length > 0 ? (\n            <>\n              <ul class=\"link-list\">\n                {followedHashtags.map((tag) => (\n                  <li>\n                    <Link\n                      to={\n                        instance\n                          ? `/${instance}/t/${tag.name}`\n                          : `/t/${tag.name}`\n                      }\n                    >\n                      <Icon icon=\"hashtag\" /> <span>{tag.name}</span>\n                    </Link>\n                  </li>\n                ))}\n              </ul>\n              {followedHashtags.length > 1 && (\n                <footer class=\"ui-state\">\n                  <small class=\"insignificant\">\n                    {followedHashtags.length} hashtag\n                    {followedHashtags.length === 1 ? '' : 's'}\n                  </small>\n                </footer>\n              )}\n            </>\n          ) : uiState === 'loading' ? (\n            <p class=\"ui-state\">\n              <Loader abrupt />\n            </p>\n          ) : uiState === 'error' ? (\n            <p class=\"ui-state\">Unable to load followed hashtags.</p>\n          ) : (\n            <p class=\"ui-state\">No hashtags followed yet.</p>\n          )}\n        </main>\n      </div>\n    </div>\n  );\n}\n\nexport default FollowedHashtags;\n","import { useEffect, useRef } from 'preact/hooks';\nimport { useSnapshot } from 'valtio';\n\nimport Timeline from '../components/timeline';\nimport { api } from '../utils/api';\nimport { filteredItems } from '../utils/filters';\nimport states from '../utils/states';\nimport { getStatus, saveStatus } from '../utils/states';\nimport {\n  assignFollowedTags,\n  clearFollowedTagsState,\n  dedupeBoosts,\n} from '../utils/timeline-utils';\nimport useTitle from '../utils/useTitle';\n\nconst LIMIT = 20;\n\nfunction Following({ title, path, id, ...props }) {\n  useTitle(title || 'Following', path || '/following');\n  const { masto, streaming, instance } = api();\n  const snapStates = useSnapshot(states);\n  const homeIterator = useRef();\n  const latestItem = useRef();\n\n  console.debug('RENDER Following', title, id);\n\n  async function fetchHome(firstLoad) {\n    if (firstLoad || !homeIterator.current) {\n      homeIterator.current = masto.v1.timelines.home.list({ limit: LIMIT });\n    }\n    const results = await homeIterator.current.next();\n    let { value } = results;\n    if (value?.length) {\n      let latestItemChanged = false;\n      if (firstLoad) {\n        if (value[0].id !== latestItem.current) {\n          latestItemChanged = true;\n        }\n        latestItem.current = value[0].id;\n        console.log('First load', latestItem.current);\n      }\n\n      // value = filteredItems(value, 'home');\n      value.forEach((item) => {\n        saveStatus(item, instance);\n      });\n      value = dedupeBoosts(value, instance);\n      if (firstLoad && latestItemChanged) clearFollowedTagsState();\n      assignFollowedTags(value, instance);\n\n      // ENFORCE sort by datetime (Latest first)\n      value.sort((a, b) => {\n        const aDate = new Date(a.createdAt);\n        const bDate = new Date(b.createdAt);\n        return bDate - aDate;\n      });\n    }\n    return {\n      ...results,\n      value,\n    };\n  }\n\n  async function checkForUpdates() {\n    try {\n      const results = await masto.v1.timelines.home\n        .list({\n          limit: 5,\n          since_id: latestItem.current,\n        })\n        .next();\n      let { value } = results;\n      console.log('checkForUpdates', latestItem.current, value);\n      if (value?.length) {\n        latestItem.current = value[0].id;\n        value = dedupeBoosts(value, instance);\n        value = filteredItems(value, 'home');\n        if (value.some((item) => !item.reblog)) {\n          return true;\n        }\n      }\n      return false;\n    } catch (e) {\n      return false;\n    }\n  }\n\n  useEffect(() => {\n    let sub;\n    (async () => {\n      if (streaming) {\n        sub = streaming.user.subscribe();\n        console.log('🎏 Streaming user', sub);\n        for await (const entry of sub) {\n          if (!sub) break;\n          if (entry.event === 'status.update') {\n            const status = entry.payload;\n            console.log(`🔄 Status ${status.id} updated`);\n            saveStatus(status, instance);\n          } else if (entry.event === 'delete') {\n            const statusID = entry.payload;\n            console.log(`❌ Status ${statusID} deleted`);\n            // delete states.statuses[statusID];\n            const s = getStatus(statusID, instance);\n            if (s) s._deleted = true;\n          }\n        }\n        console.log('💥 Streaming user loop STOPPED');\n      }\n    })();\n    return () => {\n      sub?.unsubscribe?.();\n      sub = null;\n    };\n  }, [streaming]);\n\n  return (\n    <Timeline\n      title={title || 'Following'}\n      id={id || 'following'}\n      emptyText=\"Nothing to see here.\"\n      errorText=\"Unable to load posts.\"\n      instance={instance}\n      fetchItems={fetchHome}\n      checkForUpdates={checkForUpdates}\n      useItemID\n      boostsCarousel={snapStates.settings.boostsCarousel}\n      {...props}\n      // allowFilters\n      filterContext=\"home\"\n      showFollowedTags\n      showReplyParent\n    />\n  );\n}\n\nexport default Following;\n","import {\n  FocusableItem,\n  MenuDivider,\n  MenuGroup,\n  MenuHeader,\n  MenuItem,\n} from '@szhsin/react-menu';\nimport { useEffect, useRef, useState } from 'preact/hooks';\nimport { useNavigate, useParams, useSearchParams } from 'react-router-dom';\n\nimport Icon from '../components/icon';\nimport Menu2 from '../components/menu2';\nimport MenuConfirm from '../components/menu-confirm';\nimport { SHORTCUTS_LIMIT } from '../components/shortcuts-settings';\nimport Timeline from '../components/timeline';\nimport { api } from '../utils/api';\nimport { filteredItems } from '../utils/filters';\nimport showToast from '../utils/show-toast';\nimport states from '../utils/states';\nimport { saveStatus } from '../utils/states';\nimport useTitle from '../utils/useTitle';\n\nconst LIMIT = 20;\n\n// Limit is 4 per \"mode\"\n// https://github.com/mastodon/mastodon/issues/15194\n// Hard-coded https://github.com/mastodon/mastodon/blob/19614ba2477f3d12468f5ec251ce1cc5f8c6210c/app/models/tag_feed.rb#L4\nconst TAGS_LIMIT_PER_MODE = 4;\nconst TOTAL_TAGS_LIMIT = TAGS_LIMIT_PER_MODE + 1;\n\nfunction Hashtags({ media: mediaView, columnMode, ...props }) {\n  // const navigate = useNavigate();\n  let { hashtag, ...params } = columnMode ? {} : useParams();\n  if (props.hashtag) hashtag = props.hashtag;\n  let hashtags = hashtag.trim().split(/[\\s+]+/);\n  hashtags.sort();\n  hashtag = hashtags[0];\n  const [searchParams, setSearchParams] = useSearchParams();\n  const media = mediaView || !!searchParams.get('media');\n  const linkParams = media ? '?media=1' : '';\n\n  const { masto, instance, authenticated } = api({\n    instance: props?.instance || params.instance,\n  });\n  const {\n    masto: currentMasto,\n    instance: currentInstance,\n    authenticated: currentAuthenticated,\n  } = api();\n  const hashtagTitle = hashtags.map((t) => `#${t}`).join(' ');\n  const hashtagPostTitle = media ? ` (Media only)` : '';\n  const title = instance\n    ? `${hashtagTitle}${hashtagPostTitle} on ${instance}`\n    : `${hashtagTitle}${hashtagPostTitle}`;\n  useTitle(title, `/:instance?/t/:hashtag`);\n  const latestItem = useRef();\n\n  // const hashtagsIterator = useRef();\n  const maxID = useRef(undefined);\n  async function fetchHashtags(firstLoad) {\n    // if (firstLoad || !hashtagsIterator.current) {\n    //   hashtagsIterator.current = masto.v1.timelines.tag.$select(hashtag).list({\n    //     limit: LIMIT,\n    //     any: hashtags.slice(1),\n    //   });\n    // }\n    // const results = await hashtagsIterator.current.next();\n\n    // NOTE: Temporary fix for listHashtag not persisting `any` in subsequent calls.\n    const results = await masto.v1.timelines.tag\n      .$select(hashtag)\n      .list({\n        limit: LIMIT,\n        any: hashtags.slice(1),\n        maxId: firstLoad ? undefined : maxID.current,\n        onlyMedia: media,\n      })\n      .next();\n    let { value } = results;\n    if (value?.length) {\n      if (firstLoad) {\n        latestItem.current = value[0].id;\n      }\n\n      // value = filteredItems(value, 'public');\n      value.forEach((item) => {\n        saveStatus(item, instance, {\n          skipThreading: media, // If media view, no need to form threads\n        });\n      });\n\n      maxID.current = value[value.length - 1].id;\n    }\n    return {\n      ...results,\n      value,\n    };\n  }\n\n  async function checkForUpdates() {\n    try {\n      const results = await masto.v1.timelines.tag\n        .$select(hashtag)\n        .list({\n          limit: 1,\n          any: hashtags.slice(1),\n          since_id: latestItem.current,\n          onlyMedia: media,\n        })\n        .next();\n      let { value } = results;\n      value = filteredItems(value, 'public');\n      if (value?.length) {\n        return true;\n      }\n      return false;\n    } catch (e) {\n      return false;\n    }\n  }\n\n  const [followUIState, setFollowUIState] = useState('default');\n  const [info, setInfo] = useState();\n  // Get hashtag info\n  useEffect(() => {\n    (async () => {\n      try {\n        const info = await masto.v1.tags.$select(hashtag).fetch();\n        console.log(info);\n        setInfo(info);\n      } catch (e) {\n        console.error(e);\n      }\n    })();\n  }, [hashtag]);\n\n  const reachLimit = hashtags.length >= TOTAL_TAGS_LIMIT;\n\n  return (\n    <Timeline\n      key={instance + hashtagTitle}\n      title={title}\n      titleComponent={\n        !!instance && (\n          <h1 class=\"header-double-lines\">\n            <b>{hashtagTitle}</b>\n            <div>{instance}</div>\n          </h1>\n        )\n      }\n      id=\"hashtag\"\n      instance={instance}\n      emptyText=\"No one has posted anything with this tag yet.\"\n      errorText=\"Unable to load posts with this tag\"\n      fetchItems={fetchHashtags}\n      checkForUpdates={checkForUpdates}\n      useItemID\n      view={media ? 'media' : undefined}\n      refresh={media}\n      // allowFilters\n      filterContext=\"public\"\n      headerEnd={\n        <Menu2\n          portal\n          setDownOverflow\n          overflow=\"auto\"\n          // viewScroll=\"close\"\n          position=\"anchor\"\n          menuButton={\n            <button type=\"button\" class=\"plain\">\n              <Icon icon=\"more\" size=\"l\" />\n            </button>\n          }\n        >\n          {!!info && hashtags.length === 1 && (\n            <>\n              <MenuConfirm\n                subMenu\n                confirm={info.following}\n                confirmLabel={`Unfollow #${hashtag}?`}\n                disabled={followUIState === 'loading' || !authenticated}\n                onClick={() => {\n                  setFollowUIState('loading');\n                  if (info.following) {\n                    // const yes = confirm(`Unfollow #${hashtag}?`);\n                    // if (!yes) {\n                    //   setFollowUIState('default');\n                    //   return;\n                    // }\n                    masto.v1.tags\n                      .$select(hashtag)\n                      .unfollow()\n                      .then(() => {\n                        setInfo({ ...info, following: false });\n                        showToast(`Unfollowed #${hashtag}`);\n                      })\n                      .catch((e) => {\n                        alert(e);\n                        console.error(e);\n                      })\n                      .finally(() => {\n                        setFollowUIState('default');\n                      });\n                  } else {\n                    masto.v1.tags\n                      .$select(hashtag)\n                      .follow()\n                      .then(() => {\n                        setInfo({ ...info, following: true });\n                        showToast(`Followed #${hashtag}`);\n                      })\n                      .catch((e) => {\n                        alert(e);\n                        console.error(e);\n                      })\n                      .finally(() => {\n                        setFollowUIState('default');\n                      });\n                  }\n                }}\n              >\n                {info.following ? (\n                  <>\n                    <Icon icon=\"check-circle\" /> <span>Following…</span>\n                  </>\n                ) : (\n                  <>\n                    <Icon icon=\"plus\" /> <span>Follow</span>\n                  </>\n                )}\n              </MenuConfirm>\n              <MenuDivider />\n            </>\n          )}\n          <MenuHeader className=\"plain\">Filters</MenuHeader>\n          <MenuItem\n            type=\"checkbox\"\n            checked={!!media}\n            onClick={() => {\n              if (media) {\n                searchParams.delete('media');\n              } else {\n                searchParams.set('media', '1');\n              }\n              setSearchParams(searchParams);\n            }}\n          >\n            <Icon icon=\"check-circle\" />{' '}\n            <span class=\"menu-grow\">Media only</span>\n          </MenuItem>\n          <MenuDivider />\n          <FocusableItem className=\"menu-field\" disabled={reachLimit}>\n            {({ ref }) => (\n              <form\n                onSubmit={(e) => {\n                  e.preventDefault();\n                  const newHashtag = e.target[0].value?.trim?.();\n                  // Use includes but need to be case insensitive\n                  if (\n                    newHashtag &&\n                    !hashtags.some(\n                      (t) => t.toLowerCase() === newHashtag.toLowerCase(),\n                    )\n                  ) {\n                    hashtags.push(newHashtag);\n                    hashtags.sort();\n                    // navigate(\n                    //   instance\n                    //     ? `/${instance}/t/${hashtags.join('+')}`\n                    //     : `/t/${hashtags.join('+')}`,\n                    // );\n                    location.hash = instance\n                      ? `/${instance}/t/${hashtags.join('+')}`\n                      : `/t/${hashtags.join('+')}${linkParams}`;\n                  }\n                }}\n              >\n                <Icon icon=\"hashtag\" />\n                <input\n                  ref={ref}\n                  type=\"text\"\n                  placeholder={\n                    reachLimit ? `Max ${TOTAL_TAGS_LIMIT} tags` : 'Add hashtag'\n                  }\n                  required\n                  autocorrect=\"off\"\n                  autocapitalize=\"off\"\n                  spellCheck={false}\n                  // no spaces, no hashtags\n                  pattern=\"[^#][^\\s#]+[^#]\"\n                  disabled={reachLimit}\n                />\n              </form>\n            )}\n          </FocusableItem>\n          <MenuGroup takeOverflow>\n            {hashtags.map((t, i) => (\n              <MenuItem\n                key={t}\n                disabled={hashtags.length === 1}\n                onClick={(e) => {\n                  hashtags.splice(i, 1);\n                  hashtags.sort();\n                  // navigate(\n                  //   instance\n                  //     ? `/${instance}/t/${hashtags.join('+')}`\n                  //     : `/t/${hashtags.join('+')}`,\n                  // );\n                  location.hash = instance\n                    ? `/${instance}/t/${hashtags.join('+')}${linkParams}`\n                    : `/t/${hashtags.join('+')}${linkParams}`;\n                }}\n              >\n                <Icon icon=\"x\" alt=\"Remove hashtag\" class=\"danger-icon\" />\n                <span>\n                  <span class=\"more-insignificant\">#</span>\n                  {t}\n                </span>\n              </MenuItem>\n            ))}\n          </MenuGroup>\n          <MenuDivider />\n          <MenuItem\n            disabled={!currentAuthenticated}\n            onClick={() => {\n              if (states.shortcuts.length >= SHORTCUTS_LIMIT) {\n                alert(\n                  `Max ${SHORTCUTS_LIMIT} shortcuts reached. Unable to add shortcut.`,\n                );\n                return;\n              }\n              const shortcut = {\n                type: 'hashtag',\n                hashtag: hashtags.join(' '),\n                instance,\n                media: media ? 'on' : undefined,\n              };\n              // Check if already exists\n              const exists = states.shortcuts.some(\n                (s) =>\n                  s.type === shortcut.type &&\n                  s.hashtag\n                    .split(/[\\s+]+/)\n                    .sort()\n                    .join(' ') ===\n                    shortcut.hashtag\n                      .split(/[\\s+]+/)\n                      .sort()\n                      .join(' ') &&\n                  (s.instance ? s.instance === shortcut.instance : true) &&\n                  (s.media ? !!s.media === !!shortcut.media : true),\n              );\n              if (exists) {\n                alert('This shortcut already exists');\n              } else {\n                states.shortcuts.push(shortcut);\n                showToast(`Hashtag shortcut added`);\n              }\n            }}\n          >\n            <Icon icon=\"shortcut\" /> <span>Add to Shorcuts</span>\n          </MenuItem>\n          <MenuItem\n            onClick={() => {\n              let newInstance = prompt(\n                'Enter a new instance e.g. \"mastodon.social\"',\n              );\n              if (!/\\./.test(newInstance)) {\n                if (newInstance) alert('Invalid instance');\n                return;\n              }\n              if (newInstance) {\n                newInstance = newInstance.toLowerCase().trim();\n                // navigate(`/${newInstance}/t/${hashtags.join('+')}`);\n                location.hash = `/${newInstance}/t/${hashtags.join(\n                  '+',\n                )}${linkParams}`;\n              }\n            }}\n          >\n            <Icon icon=\"bus\" /> <span>Go to another instance…</span>\n          </MenuItem>\n          {currentInstance !== instance && (\n            <MenuItem\n              onClick={() => {\n                location.hash = `/${currentInstance}/t/${hashtags.join(\n                  '+',\n                )}${linkParams}`;\n              }}\n            >\n              <Icon icon=\"bus\" />{' '}\n              <small class=\"menu-double-lines\">\n                Go to my instance (<b>{currentInstance}</b>)\n              </small>\n            </MenuItem>\n          )}\n        </Menu2>\n      }\n    />\n  );\n}\n\nexport default Hashtags;\n","import './lists.css';\n\nimport { Menu, MenuDivider, MenuItem } from '@szhsin/react-menu';\nimport { useEffect, useRef, useState } from 'preact/hooks';\nimport { InView } from 'react-intersection-observer';\nimport { useNavigate, useParams } from 'react-router-dom';\nimport { useSnapshot } from 'valtio';\n\nimport AccountBlock from '../components/account-block';\nimport Icon from '../components/icon';\nimport Link from '../components/link';\nimport ListAddEdit from '../components/list-add-edit';\nimport Menu2 from '../components/menu2';\nimport MenuConfirm from '../components/menu-confirm';\nimport MenuLink from '../components/menu-link';\nimport Modal from '../components/modal';\nimport Timeline from '../components/timeline';\nimport { api } from '../utils/api';\nimport { filteredItems } from '../utils/filters';\nimport { getList, getLists } from '../utils/lists';\nimport states, { saveStatus } from '../utils/states';\nimport useTitle from '../utils/useTitle';\n\nconst LIMIT = 20;\n\nfunction List(props) {\n  const snapStates = useSnapshot(states);\n  const { masto, instance } = api();\n  const id = props?.id || useParams()?.id;\n  // const navigate = useNavigate();\n  const latestItem = useRef();\n  // const [reloadCount, reload] = useReducer((c) => c + 1, 0);\n\n  const listIterator = useRef();\n  async function fetchList(firstLoad) {\n    if (firstLoad || !listIterator.current) {\n      listIterator.current = masto.v1.timelines.list.$select(id).list({\n        limit: LIMIT,\n      });\n    }\n    const results = await listIterator.current.next();\n    let { value } = results;\n    if (value?.length) {\n      if (firstLoad) {\n        latestItem.current = value[0].id;\n      }\n\n      // value = filteredItems(value, 'home');\n      value.forEach((item) => {\n        saveStatus(item, instance);\n      });\n    }\n    return {\n      ...results,\n      value,\n    };\n  }\n\n  async function checkForUpdates() {\n    try {\n      const results = await masto.v1.timelines.list.$select(id).list({\n        limit: 1,\n        since_id: latestItem.current,\n      });\n      let { value } = results;\n      value = filteredItems(value, 'home');\n      if (value?.length) {\n        return true;\n      }\n      return false;\n    } catch (e) {\n      return false;\n    }\n  }\n\n  const [lists, setLists] = useState([]);\n  useEffect(() => {\n    getLists().then(setLists);\n  }, []);\n\n  const [list, setList] = useState({ title: 'List' });\n  // const [title, setTitle] = useState(`List`);\n  useTitle(list.title, `/l/:id`);\n  useEffect(() => {\n    (async () => {\n      try {\n        const list = await getList(id);\n        setList(list);\n        // setTitle(list.title);\n      } catch (e) {\n        console.error(e);\n      }\n    })();\n  }, [id]);\n\n  const [showListAddEditModal, setShowListAddEditModal] = useState(false);\n  const [showManageMembersModal, setShowManageMembersModal] = useState(false);\n\n  return (\n    <>\n      <Timeline\n        key={id}\n        title={list.title}\n        id=\"list\"\n        emptyText=\"Nothing yet.\"\n        errorText=\"Unable to load posts.\"\n        instance={instance}\n        fetchItems={fetchList}\n        checkForUpdates={checkForUpdates}\n        useItemID\n        boostsCarousel={snapStates.settings.boostsCarousel}\n        // allowFilters\n        filterContext=\"home\"\n        showReplyParent\n        // refresh={reloadCount}\n        headerStart={\n          // <Link to=\"/l\" class=\"button plain\">\n          //   <Icon icon=\"list\" size=\"l\" />\n          // </Link>\n          <Menu2\n            overflow=\"auto\"\n            menuButton={\n              <button type=\"button\" class=\"plain\">\n                <Icon icon=\"list\" size=\"l\" alt=\"Lists\" />\n                <Icon icon=\"chevron-down\" size=\"s\" />\n              </button>\n            }\n          >\n            <MenuLink to=\"/l\">\n              <span>All Lists</span>\n            </MenuLink>\n            {lists?.length > 0 && (\n              <>\n                <MenuDivider />\n                {lists.map((list) => (\n                  <MenuLink key={list.id} to={`/l/${list.id}`}>\n                    <span>{list.title}</span>\n                  </MenuLink>\n                ))}\n              </>\n            )}\n          </Menu2>\n        }\n        headerEnd={\n          <Menu2\n            portal\n            setDownOverflow\n            overflow=\"auto\"\n            viewScroll=\"close\"\n            position=\"anchor\"\n            menuButton={\n              <button type=\"button\" class=\"plain\">\n                <Icon icon=\"more\" size=\"l\" />\n              </button>\n            }\n          >\n            <MenuItem\n              onClick={() =>\n                setShowListAddEditModal({\n                  list,\n                })\n              }\n            >\n              <Icon icon=\"pencil\" size=\"l\" />\n              <span>Edit</span>\n            </MenuItem>\n            <MenuItem onClick={() => setShowManageMembersModal(true)}>\n              <Icon icon=\"group\" size=\"l\" />\n              <span>Manage members</span>\n            </MenuItem>\n          </Menu2>\n        }\n      />\n      {showListAddEditModal && (\n        <Modal\n          onClick={(e) => {\n            if (e.target === e.currentTarget) {\n              setShowListAddEditModal(false);\n            }\n          }}\n        >\n          <ListAddEdit\n            list={showListAddEditModal?.list}\n            onClose={(result) => {\n              if (result.state === 'success' && result.list) {\n                setList(result.list);\n                // reload();\n              } else if (result.state === 'deleted') {\n                // navigate('/l');\n                location.hash = '/l';\n              }\n              setShowListAddEditModal(false);\n            }}\n          />\n        </Modal>\n      )}\n      {showManageMembersModal && (\n        <Modal\n          onClick={(e) => {\n            if (e.target === e.currentTarget) {\n              setShowManageMembersModal(false);\n            }\n          }}\n        >\n          <ListManageMembers\n            listID={id}\n            onClose={() => setShowManageMembersModal(false)}\n          />\n        </Modal>\n      )}\n    </>\n  );\n}\n\nconst MEMBERS_LIMIT = 40;\nfunction ListManageMembers({ listID, onClose }) {\n  // Show list of members with [Remove] button\n  // API only returns 40 members at a time, so this need to be paginated with infinite scroll\n  // Show [Add] button after removing a member\n  const { masto, instance } = api();\n  const [members, setMembers] = useState([]);\n  const [uiState, setUIState] = useState('default');\n  const [showMore, setShowMore] = useState(false);\n\n  const membersIterator = useRef();\n\n  async function fetchMembers(firstLoad) {\n    setShowMore(false);\n    setUIState('loading');\n    (async () => {\n      try {\n        if (firstLoad || !membersIterator.current) {\n          membersIterator.current = masto.v1.lists\n            .$select(listID)\n            .accounts.list({\n              limit: MEMBERS_LIMIT,\n            });\n        }\n        const results = await membersIterator.current.next();\n        let { done, value } = results;\n        if (value?.length) {\n          if (firstLoad) {\n            setMembers(value);\n          } else {\n            setMembers(members.concat(value));\n          }\n          setShowMore(!done);\n        } else {\n          setShowMore(false);\n        }\n        setUIState('default');\n      } catch (e) {\n        setUIState('error');\n      }\n    })();\n  }\n\n  useEffect(() => {\n    fetchMembers(true);\n  }, []);\n\n  return (\n    <div class=\"sheet\" id=\"list-manage-members-container\">\n      {!!onClose && (\n        <button type=\"button\" class=\"sheet-close\" onClick={onClose}>\n          <Icon icon=\"x\" />\n        </button>\n      )}\n      <header>\n        <h2>Manage members</h2>\n      </header>\n      <main>\n        <ul>\n          {members.map((member) => (\n            <li key={member.id}>\n              <AccountBlock account={member} instance={instance} />\n              <RemoveAddButton account={member} listID={listID} />\n            </li>\n          ))}\n          {showMore && uiState === 'default' && (\n            <InView as=\"li\" onChange={(inView) => inView && fetchMembers()}>\n              <button type=\"button\" class=\"light block\" onClick={fetchMembers}>\n                Show more&hellip;\n              </button>\n            </InView>\n          )}\n        </ul>\n      </main>\n    </div>\n  );\n}\n\nfunction RemoveAddButton({ account, listID }) {\n  const { masto } = api();\n  const [uiState, setUIState] = useState('default');\n  const [removed, setRemoved] = useState(false);\n\n  return (\n    <MenuConfirm\n      confirm={!removed}\n      confirmLabel={<span>Remove @{account.username} from list?</span>}\n      align=\"end\"\n      menuItemClassName=\"danger\"\n      onClick={() => {\n        if (removed) {\n          setUIState('loading');\n          (async () => {\n            try {\n              await masto.v1.lists.$select(listID).accounts.create({\n                accountIds: [account.id],\n              });\n              setUIState('default');\n              setRemoved(false);\n            } catch (e) {\n              setUIState('error');\n            }\n          })();\n        } else {\n          // const yes = confirm(`Remove ${account.username} from this list?`);\n          // if (!yes) return;\n          setUIState('loading');\n\n          (async () => {\n            try {\n              await masto.v1.lists.$select(listID).accounts.remove({\n                accountIds: [account.id],\n              });\n              setUIState('default');\n              setRemoved(true);\n            } catch (e) {\n              setUIState('error');\n            }\n          })();\n        }\n      }}\n    >\n      <button\n        type=\"button\"\n        class={`light ${removed ? '' : 'danger'}`}\n        disabled={uiState === 'loading'}\n      >\n        {removed ? 'Add' : 'Remove…'}\n      </button>\n    </MenuConfirm>\n  );\n}\n\nexport default List;\n","import { useMemo, useRef, useState } from 'preact/hooks';\nimport { useSearchParams } from 'react-router-dom';\n\nimport Link from '../components/link';\nimport Timeline from '../components/timeline';\nimport { api } from '../utils/api';\nimport { saveStatus } from '../utils/states';\nimport useTitle from '../utils/useTitle';\n\nconst LIMIT = 20;\nconst emptySearchParams = new URLSearchParams();\n\nfunction Mentions({ columnMode, ...props }) {\n  const { masto, instance } = api();\n  const [searchParams] = columnMode ? [emptySearchParams] : useSearchParams();\n  const [stateType, setStateType] = useState(null);\n  const type = props?.type || searchParams.get('type') || stateType;\n  useTitle(`Mentions${type === 'private' ? ' (Private)' : ''}`, '/mentions');\n\n  const mentionsIterator = useRef();\n  const latestItem = useRef();\n\n  async function fetchMentions(firstLoad) {\n    if (firstLoad || !mentionsIterator.current) {\n      mentionsIterator.current = masto.v1.notifications.list({\n        limit: LIMIT,\n        types: ['mention'],\n      });\n    }\n    const results = await mentionsIterator.current.next();\n    let { value } = results;\n    if (value?.length) {\n      if (firstLoad) {\n        latestItem.current = value[0].id;\n        console.log('First load', latestItem.current);\n      }\n\n      value.forEach(({ status: item }) => {\n        saveStatus(item, instance);\n      });\n    }\n    return {\n      ...results,\n      value: value?.map((item) => item.status),\n    };\n  }\n\n  const conversationsIterator = useRef();\n  const latestConversationItem = useRef();\n  async function fetchConversations(firstLoad) {\n    if (firstLoad || !conversationsIterator.current) {\n      conversationsIterator.current = masto.v1.conversations.list({\n        limit: LIMIT,\n      });\n    }\n    const results = await conversationsIterator.current.next();\n    let { value } = results;\n    value = value?.filter((item) => item.lastStatus);\n    if (value?.length) {\n      if (firstLoad) {\n        latestConversationItem.current = value[0].lastStatus.id;\n        console.log('First load', latestConversationItem.current);\n      }\n\n      value.forEach(({ lastStatus: item }) => {\n        saveStatus(item, instance);\n      });\n    }\n    console.log('results', results);\n    return {\n      ...results,\n      value: value?.map((item) => item.lastStatus),\n    };\n  }\n\n  function fetchItems(...args) {\n    if (type === 'private') {\n      return fetchConversations(...args);\n    }\n    return fetchMentions(...args);\n  }\n\n  async function checkForUpdates() {\n    if (type === 'private') {\n      try {\n        const results = await masto.v1.conversations\n          .list({\n            limit: 1,\n            since_id: latestConversationItem.current,\n          })\n          .next();\n        let { value } = results;\n        console.log(\n          'checkForUpdates PRIVATE',\n          latestConversationItem.current,\n          value,\n        );\n        if (value?.length) {\n          latestConversationItem.current = value[0].lastStatus.id;\n          return true;\n        }\n        return false;\n      } catch (e) {\n        return false;\n      }\n    } else {\n      try {\n        const results = await masto.v1.notifications\n          .list({\n            limit: 1,\n            types: ['mention'],\n            since_id: latestItem.current,\n          })\n          .next();\n        let { value } = results;\n        console.log('checkForUpdates ALL', latestItem.current, value);\n        if (value?.length) {\n          latestItem.current = value[0].id;\n          return true;\n        }\n        return false;\n      } catch (e) {\n        return false;\n      }\n    }\n  }\n\n  const TimelineStart = useMemo(() => {\n    return (\n      <div class=\"filter-bar centered\">\n        <Link\n          to=\"/mentions\"\n          class={!type ? 'is-active' : ''}\n          onClick={(e) => {\n            if (columnMode) {\n              e.preventDefault();\n              setStateType(null);\n            }\n          }}\n        >\n          All\n        </Link>\n        <Link\n          to=\"/mentions?type=private\"\n          class={type === 'private' ? 'is-active' : ''}\n          onClick={(e) => {\n            if (columnMode) {\n              e.preventDefault();\n              setStateType('private');\n            }\n          }}\n        >\n          Private\n        </Link>\n      </div>\n    );\n  }, [type]);\n\n  return (\n    <Timeline\n      title=\"Mentions\"\n      id=\"mentions\"\n      emptyText=\"No one mentioned you :(\"\n      errorText=\"Unable to load mentions.\"\n      instance={instance}\n      fetchItems={fetchItems}\n      checkForUpdates={checkForUpdates}\n      useItemID\n      timelineStart={TimelineStart}\n      refresh={type}\n    />\n  );\n}\n\nexport default Mentions;\n","// This is like very lame \"type-checking\" lol\nconst notificationTypeKeys = {\n  mention: ['account', 'status'],\n  status: ['account', 'status'],\n  reblog: ['account', 'status'],\n  follow: ['account'],\n  follow_request: ['account'],\n  favourite: ['account', 'status'],\n  poll: ['status'],\n  update: ['status'],\n};\nfunction fixNotifications(notifications) {\n  return notifications.filter((notification) => {\n    const { type, id, createdAt } = notification;\n    if (!type) {\n      console.warn('Notification missing type', notification);\n      return false;\n    }\n    if (!id || !createdAt) {\n      console.warn('Notification missing id or createdAt', notification);\n      // Continue processing this despite missing id or createdAt\n    }\n    const keys = notificationTypeKeys[type];\n    if (keys?.length) {\n      return keys.every((key) => !!notification[key]);\n    }\n    return true; // skip other types\n  });\n}\n\nfunction groupNotifications(notifications) {\n  // Filter out invalid notifications\n  notifications = fixNotifications(notifications);\n\n  // Create new flat list of notifications\n  // Combine sibling notifications based on type and status id\n  // Concat all notification.account into an array of _accounts\n  const notificationsMap = {};\n  const cleanNotifications = [];\n  for (let i = 0, j = 0; i < notifications.length; i++) {\n    const notification = notifications[i];\n    const { id, status, account, type, createdAt } = notification;\n    const date = createdAt ? new Date(createdAt).toLocaleDateString() : '';\n    let virtualType = type;\n    if (type === 'favourite' || type === 'reblog') {\n      virtualType = 'favourite+reblog';\n    }\n    const key = `${status?.id}-${virtualType}-${date}`;\n    const mappedNotification = notificationsMap[key];\n    if (virtualType === 'follow_request') {\n      cleanNotifications[j++] = notification;\n    } else if (mappedNotification?.account) {\n      const mappedAccount = mappedNotification._accounts.find(\n        (a) => a.id === account.id,\n      );\n      if (mappedAccount) {\n        mappedAccount._types.push(type);\n        mappedAccount._types.sort().reverse();\n        mappedNotification.id += `-${id}`;\n      } else {\n        account._types = [type];\n        mappedNotification._accounts.push(account);\n        mappedNotification.id += `-${id}`;\n      }\n    } else {\n      if (account) account._types = [type];\n      let n = (notificationsMap[key] = {\n        ...notification,\n        type: virtualType,\n        _accounts: account ? [account] : [],\n      });\n      cleanNotifications[j++] = n;\n    }\n  }\n\n  // 2nd pass to group \"favourite+reblog\"-type notifications by account if _accounts.length <= 1\n  // This means one acount has favourited and reblogged the multiple statuses\n  // The grouped notification\n  // - type: \"favourite+reblog+account\"\n  // - _statuses: [status, status, ...]\n  const notificationsMap2 = {};\n  const cleanNotifications2 = [];\n  for (let i = 0, j = 0; i < cleanNotifications.length; i++) {\n    const notification = cleanNotifications[i];\n    const { id, account, _accounts, type, createdAt } = notification;\n    const date = createdAt ? new Date(createdAt).toLocaleDateString() : '';\n    if (type === 'favourite+reblog' && account && _accounts.length === 1) {\n      const key = `${account?.id}-${type}-${date}`;\n      const mappedNotification = notificationsMap2[key];\n      if (mappedNotification) {\n        mappedNotification._statuses.push(notification.status);\n        mappedNotification.id += `-${id}`;\n      } else {\n        let n = (notificationsMap2[key] = {\n          ...notification,\n          type,\n          _statuses: [notification.status],\n        });\n        cleanNotifications2[j++] = n;\n      }\n    } else {\n      cleanNotifications2[j++] = notification;\n    }\n  }\n\n  console.log({ notifications, cleanNotifications, cleanNotifications2 });\n\n  // return cleanNotifications;\n  return cleanNotifications2;\n}\n\nexport default groupNotifications;\n","// Utils for push notifications\nimport { api } from './api';\nimport { getCurrentAccount } from './store-utils';\n\n// Subscription is an object with the following structure:\n// {\n//   data: {\n//     alerts: {\n//       admin: {\n//         report: boolean,\n//         signUp: boolean,\n//       },\n//       favourite: boolean,\n//       follow: boolean,\n//       mention: boolean,\n//       poll: boolean,\n//       reblog: boolean,\n//       status: boolean,\n//       update: boolean,\n//     }\n//   },\n//   policy: \"all\" | \"followed\" | \"follower\" | \"none\",\n//   subscription: {\n//     endpoint: string,\n//     keys: {\n//       auth: string,\n//       p256dh: string,\n//     },\n//   },\n// }\n\n// Back-end CRUD\n// =============\n\nfunction createBackendPushSubscription(subscription) {\n  const { masto } = api();\n  return masto.v1.push.subscription.create(subscription);\n}\n\nfunction fetchBackendPushSubscription() {\n  const { masto } = api();\n  return masto.v1.push.subscription.fetch();\n}\n\nfunction updateBackendPushSubscription(subscription) {\n  const { masto } = api();\n  return masto.v1.push.subscription.update(subscription);\n}\n\nfunction removeBackendPushSubscription() {\n  const { masto } = api();\n  return masto.v1.push.subscription.remove();\n}\n\n// Front-end\n// =========\n\nexport function isPushSupported() {\n  return 'serviceWorker' in navigator && 'PushManager' in window;\n}\n\nexport function getRegistration() {\n  // return navigator.serviceWorker.ready;\n  return navigator.serviceWorker.getRegistration();\n}\n\nasync function getSubscription() {\n  const registration = await getRegistration();\n  const subscription = registration\n    ? await registration.pushManager.getSubscription()\n    : undefined;\n  return { registration, subscription };\n}\n\nfunction urlBase64ToUint8Array(base64String) {\n  const padding = '='.repeat((4 - (base64String.length % 4)) % 4);\n  const base64 = `${base64String}${padding}`\n    .replace(/-/g, '+')\n    .replace(/_/g, '/');\n\n  const rawData = window.atob(base64);\n  const outputArray = new Uint8Array(rawData.length);\n\n  for (let i = 0; i < rawData.length; ++i) {\n    outputArray[i] = rawData.charCodeAt(i);\n  }\n\n  return outputArray;\n}\n\n// Front-end <-> back-end\n// ======================\n\nexport async function initSubscription() {\n  if (!isPushSupported()) return;\n  const { subscription } = await getSubscription();\n  let backendSubscription = null;\n  try {\n    backendSubscription = await fetchBackendPushSubscription();\n  } catch (err) {\n    if (/(not found|unknown)/i.test(err.message)) {\n      // No subscription found\n    } else {\n      // Other error\n      throw err;\n    }\n  }\n  console.log('INIT subscription', {\n    subscription,\n    backendSubscription,\n  });\n\n  // Check if the subscription changed\n  if (backendSubscription && subscription) {\n    const sameEndpoint = backendSubscription.endpoint === subscription.endpoint;\n    const { vapidKey } = getCurrentAccount();\n    const sameKey = backendSubscription.serverKey === vapidKey;\n    if (!sameEndpoint) {\n      throw new Error('Backend subscription endpoint changed');\n    }\n    if (sameKey) {\n      // Subscription didn't change\n    } else {\n      // Subscription changed\n      console.error('🔔 Subscription changed', {\n        sameEndpoint,\n        serverKey: backendSubscription.serverKey,\n        vapIdKey: vapidKey,\n        endpoint1: backendSubscription.endpoint,\n        endpoint2: subscription.endpoint,\n        sameKey,\n        key1: backendSubscription.serverKey,\n        key2: vapidKey,\n      });\n      throw new Error('Backend subscription key and vapid key changed');\n      // Only unsubscribe from backend, not from browser\n      // await removeBackendPushSubscription();\n      // // Now let's resubscribe\n      // // NOTE: I have no idea if this works\n      // return await updateSubscription({\n      //   data: backendSubscription.data,\n      //   policy: backendSubscription.policy,\n      // });\n    }\n  }\n\n  if (subscription && !backendSubscription) {\n    // check if account's vapidKey is same as subscription's applicationServerKey\n    const { vapidKey } = getCurrentAccount();\n    const { applicationServerKey } = subscription.options;\n    const vapidKeyStr = urlBase64ToUint8Array(vapidKey).toString();\n    const applicationServerKeyStr = new Uint8Array(\n      applicationServerKey,\n    ).toString();\n    const sameKey = vapidKeyStr === applicationServerKeyStr;\n    if (sameKey) {\n      // Subscription didn't change\n    } else {\n      // Subscription changed\n      console.error('🔔 Subscription changed', {\n        vapidKeyStr,\n        applicationServerKeyStr,\n        sameKey,\n      });\n      // Unsubscribe since backend doesn't have a subscription\n      await subscription.unsubscribe();\n      throw new Error('Subscription key and vapid key changed');\n    }\n  }\n\n  // Check if backend subscription returns 404\n  // if (subscription && !backendSubscription) {\n  //   // Re-subscribe to backend\n  //   backendSubscription = await createBackendPushSubscription({\n  //     subscription,\n  //     data: {},\n  //     policy: 'all',\n  //   });\n  // }\n\n  return { subscription, backendSubscription };\n}\n\nexport async function updateSubscription({ data, policy }) {\n  console.log('🔔 Updating subscription', { data, policy });\n  if (!isPushSupported()) return;\n  let { registration, subscription } = await getSubscription();\n  let backendSubscription = null;\n\n  if (subscription) {\n    try {\n      backendSubscription = await updateBackendPushSubscription({\n        data,\n        policy,\n      });\n      // TODO: save subscription in user settings\n    } catch (error) {\n      // Backend doesn't have a subscription for this user\n      // Create a new one\n      backendSubscription = await createBackendPushSubscription({\n        subscription,\n        data,\n        policy,\n      });\n      // TODO: save subscription in user settings\n    }\n  } else {\n    // User is not subscribed\n    const { vapidKey } = getCurrentAccount();\n    if (!vapidKey) throw new Error('No server key found');\n    subscription = await registration.pushManager.subscribe({\n      userVisibleOnly: true,\n      applicationServerKey: urlBase64ToUint8Array(vapidKey),\n    });\n    backendSubscription = await createBackendPushSubscription({\n      subscription,\n      data,\n      policy,\n    });\n    // TODO: save subscription in user settings\n  }\n\n  return { subscription, backendSubscription };\n}\n\nexport async function removeSubscription() {\n  if (!isPushSupported()) return;\n  const { subscription } = await getSubscription();\n  if (subscription) {\n    await removeBackendPushSubscription();\n    await subscription.unsubscribe();\n  }\n}\n","import './notifications.css';\n\nimport { Fragment } from 'preact';\nimport { memo } from 'preact/compat';\nimport { useCallback, useEffect, useRef, useState } from 'preact/hooks';\nimport { useHotkeys } from 'react-hotkeys-hook';\nimport { InView } from 'react-intersection-observer';\nimport { useSearchParams } from 'react-router-dom';\nimport { useSnapshot } from 'valtio';\nimport { subscribeKey } from 'valtio/utils';\n\nimport AccountBlock from '../components/account-block';\nimport FollowRequestButtons from '../components/follow-request-buttons';\nimport Icon from '../components/icon';\nimport Link from '../components/link';\nimport Loader from '../components/loader';\nimport Modal from '../components/modal';\nimport NavMenu from '../components/nav-menu';\nimport Notification from '../components/notification';\nimport Status from '../components/status';\nimport { api } from '../utils/api';\nimport enhanceContent from '../utils/enhance-content';\nimport groupNotifications from '../utils/group-notifications';\nimport handleContentLinks from '../utils/handle-content-links';\nimport niceDateTime from '../utils/nice-date-time';\nimport { getRegistration } from '../utils/push-notifications';\nimport shortenNumber from '../utils/shorten-number';\nimport showToast from '../utils/show-toast';\nimport states, { saveStatus } from '../utils/states';\nimport { getCurrentInstance } from '../utils/store-utils';\nimport supports from '../utils/supports';\nimport usePageVisibility from '../utils/usePageVisibility';\nimport useScroll from '../utils/useScroll';\nimport useTitle from '../utils/useTitle';\n\nconst LIMIT = 30; // 30 is the maximum limit :(\nconst emptySearchParams = new URLSearchParams();\n\nconst scrollIntoViewOptions = {\n  block: 'center',\n  inline: 'center',\n  behavior: 'smooth',\n};\n\nfunction Notifications({ columnMode }) {\n  useTitle('Notifications', '/notifications');\n  const { masto, instance } = api();\n  const snapStates = useSnapshot(states);\n  const [uiState, setUIState] = useState('default');\n  const [searchParams] = columnMode ? [emptySearchParams] : useSearchParams();\n  const notificationID = searchParams.get('id');\n  const notificationAccessToken = searchParams.get('access_token');\n  const [showMore, setShowMore] = useState(false);\n  const [onlyMentions, setOnlyMentions] = useState(false);\n  const scrollableRef = useRef();\n  const { nearReachEnd, scrollDirection, reachStart, nearReachStart } =\n    useScroll({\n      scrollableRef,\n    });\n  const hiddenUI = scrollDirection === 'end' && !nearReachStart;\n  const [followRequests, setFollowRequests] = useState([]);\n  const [announcements, setAnnouncements] = useState([]);\n\n  console.debug('RENDER Notifications');\n\n  const notificationsIterator = useRef();\n  async function fetchNotifications(firstLoad) {\n    if (firstLoad || !notificationsIterator.current) {\n      // Reset iterator\n      notificationsIterator.current = masto.v1.notifications.list({\n        limit: LIMIT,\n        excludeTypes: ['follow_request'],\n      });\n    }\n    const allNotifications = await notificationsIterator.current.next();\n    const notifications = allNotifications.value;\n\n    if (notifications?.length) {\n      notifications.forEach((notification) => {\n        saveStatus(notification.status, instance, {\n          skipThreading: true,\n        });\n      });\n\n      const groupedNotifications = groupNotifications(notifications);\n\n      if (firstLoad) {\n        states.notificationsLast = notifications[0];\n        states.notifications = groupedNotifications;\n\n        // Update last read marker\n        masto.v1.markers\n          .create({\n            notifications: {\n              lastReadId: notifications[0].id,\n            },\n          })\n          .catch(() => {});\n      } else {\n        states.notifications.push(...groupedNotifications);\n      }\n    }\n\n    states.notificationsShowNew = false;\n    states.notificationsLastFetchTime = Date.now();\n    return allNotifications;\n  }\n\n  async function fetchFollowRequests() {\n    // Note: no pagination here yet because this better be on a separate page. Should be rare use-case???\n    try {\n      return await masto.v1.followRequests.list({\n        limit: 80,\n      });\n    } catch (e) {\n      // Silently fail\n      return [];\n    }\n  }\n\n  const loadFollowRequests = () => {\n    setUIState('loading');\n    (async () => {\n      try {\n        const requests = await fetchFollowRequests();\n        setFollowRequests(requests);\n        setUIState('default');\n      } catch (e) {\n        setUIState('error');\n      }\n    })();\n  };\n\n  async function fetchAnnouncements() {\n    try {\n      return await masto.v1.announcements.list();\n    } catch (e) {\n      // Silently fail\n      return [];\n    }\n  }\n\n  const supportsFilteredNotifications = supports(\n    '@mastodon/filtered-notifications',\n  );\n  const [showNotificationsSettings, setShowNotificationsSettings] =\n    useState(false);\n  const [notificationsPolicy, setNotificationsPolicy] = useState({});\n  function fetchNotificationsPolicy() {\n    return masto.v1.notifications.policy.fetch().catch(() => {});\n  }\n  function loadNotificationsPolicy() {\n    fetchNotificationsPolicy()\n      .then((policy) => {\n        console.log('✨ Notifications policy', policy);\n        setNotificationsPolicy(policy);\n      })\n      .catch(() => {});\n  }\n  const [notificationsRequests, setNotificationsRequests] = useState(null);\n  function fetchNotificationsRequest() {\n    return masto.v1.notifications.requests.list();\n  }\n\n  const loadNotifications = (firstLoad) => {\n    setShowNew(false);\n    setUIState('loading');\n    (async () => {\n      try {\n        const fetchNotificationsPromise = fetchNotifications(firstLoad);\n\n        if (firstLoad) {\n          fetchAnnouncements()\n            .then((announcements) => {\n              announcements.sort((a, b) => {\n                // Sort by updatedAt first, then createdAt\n                const aDate = new Date(a.updatedAt || a.createdAt);\n                const bDate = new Date(b.updatedAt || b.createdAt);\n                return bDate - aDate;\n              });\n              setAnnouncements(announcements);\n            })\n            .catch(() => {});\n\n          fetchFollowRequests()\n            .then((requests) => {\n              setFollowRequests(requests);\n            })\n            .catch(() => {});\n\n          if (supportsFilteredNotifications) {\n            loadNotificationsPolicy();\n          }\n        }\n\n        const { done } = await fetchNotificationsPromise;\n        setShowMore(!done);\n\n        setUIState('default');\n      } catch (e) {\n        console.error(e);\n        setUIState('error');\n      }\n    })();\n  };\n\n  useEffect(() => {\n    loadNotifications(true);\n  }, []);\n  useEffect(() => {\n    if (reachStart) {\n      loadNotifications(true);\n    }\n  }, [reachStart]);\n\n  // useEffect(() => {\n  //   if (nearReachEnd && showMore) {\n  //     loadNotifications();\n  //   }\n  // }, [nearReachEnd, showMore]);\n\n  const [showNew, setShowNew] = useState(false);\n\n  const loadUpdates = useCallback(\n    ({ disableIdleCheck = false } = {}) => {\n      if (uiState === 'loading') {\n        return;\n      }\n      console.log('✨ Load updates', {\n        autoRefresh: snapStates.settings.autoRefresh,\n        scrollTop: scrollableRef.current?.scrollTop,\n        inBackground: inBackground(),\n        disableIdleCheck,\n      });\n      if (\n        snapStates.settings.autoRefresh &&\n        scrollableRef.current?.scrollTop < 16 &&\n        (disableIdleCheck || window.__IDLE__) &&\n        !inBackground()\n      ) {\n        loadNotifications(true);\n      }\n    },\n    [snapStates.notificationsShowNew, snapStates.settings.autoRefresh, uiState],\n  );\n  // useEffect(loadUpdates, [snapStates.notificationsShowNew]);\n\n  const lastHiddenTime = useRef();\n  usePageVisibility((visible) => {\n    let unsub;\n    if (visible) {\n      const timeDiff = Date.now() - lastHiddenTime.current;\n      if (!lastHiddenTime.current || timeDiff > 1000 * 3) {\n        // 3 seconds\n        loadUpdates({\n          disableIdleCheck: true,\n        });\n      } else {\n        lastHiddenTime.current = Date.now();\n      }\n      unsub = subscribeKey(states, 'notificationsShowNew', (v) => {\n        if (uiState === 'loading') {\n          return;\n        }\n        if (v) {\n          loadUpdates();\n        }\n        setShowNew(v);\n      });\n    }\n    return () => {\n      unsub?.();\n    };\n  });\n\n  const todayDate = new Date();\n  const yesterdayDate = new Date(todayDate - 24 * 60 * 60 * 1000);\n  let currentDay = new Date();\n  const showTodayEmpty = !snapStates.notifications.some(\n    (notification) =>\n      new Date(notification.createdAt).toDateString() ===\n      todayDate.toDateString(),\n  );\n\n  const announcementsListRef = useRef();\n\n  useEffect(() => {\n    if (notificationID) {\n      states.routeNotification = {\n        id: notificationID,\n        accessToken: atob(notificationAccessToken),\n      };\n    }\n  }, [notificationID, notificationAccessToken]);\n\n  // useEffect(() => {\n  //   if (uiState === 'default') {\n  //     (async () => {\n  //       try {\n  //         const registration = await getRegistration();\n  //         if (registration?.getNotifications) {\n  //           const notifications = await registration.getNotifications();\n  //           console.log('🔔 Push notifications', notifications);\n  //           // Close all notifications?\n  //           // notifications.forEach((notification) => {\n  //           //   notification.close();\n  //           // });\n  //         }\n  //       } catch (e) {}\n  //     })();\n  //   }\n  // }, [uiState]);\n\n  const itemsSelector = '.notification';\n  const jRef = useHotkeys('j', () => {\n    const activeItem = document.activeElement.closest(itemsSelector);\n    const activeItemRect = activeItem?.getBoundingClientRect();\n    const allItems = Array.from(\n      scrollableRef.current.querySelectorAll(itemsSelector),\n    );\n    if (\n      activeItem &&\n      activeItemRect.top < scrollableRef.current.clientHeight &&\n      activeItemRect.bottom > 0\n    ) {\n      const activeItemIndex = allItems.indexOf(activeItem);\n      let nextItem = allItems[activeItemIndex + 1];\n      if (nextItem) {\n        nextItem.focus();\n        nextItem.scrollIntoView(scrollIntoViewOptions);\n      }\n    } else {\n      const topmostItem = allItems.find((item) => {\n        const itemRect = item.getBoundingClientRect();\n        return itemRect.top >= 44 && itemRect.left >= 0;\n      });\n      if (topmostItem) {\n        topmostItem.focus();\n        topmostItem.scrollIntoView(scrollIntoViewOptions);\n      }\n    }\n  });\n\n  const kRef = useHotkeys('k', () => {\n    // focus on previous status after active item\n    const activeItem = document.activeElement.closest(itemsSelector);\n    const activeItemRect = activeItem?.getBoundingClientRect();\n    const allItems = Array.from(\n      scrollableRef.current.querySelectorAll(itemsSelector),\n    );\n    if (\n      activeItem &&\n      activeItemRect.top < scrollableRef.current.clientHeight &&\n      activeItemRect.bottom > 0\n    ) {\n      const activeItemIndex = allItems.indexOf(activeItem);\n      let prevItem = allItems[activeItemIndex - 1];\n      if (prevItem) {\n        prevItem.focus();\n        prevItem.scrollIntoView(scrollIntoViewOptions);\n      }\n    } else {\n      const topmostItem = allItems.find((item) => {\n        const itemRect = item.getBoundingClientRect();\n        return itemRect.top >= 44 && itemRect.left >= 0;\n      });\n      if (topmostItem) {\n        topmostItem.focus();\n        topmostItem.scrollIntoView(scrollIntoViewOptions);\n      }\n    }\n  });\n\n  const oRef = useHotkeys(['enter', 'o'], () => {\n    const activeItem = document.activeElement.closest(itemsSelector);\n    const statusLink = activeItem?.querySelector('.status-link');\n    if (statusLink) {\n      statusLink.click();\n    }\n  });\n\n  return (\n    <div\n      id=\"notifications-page\"\n      class=\"deck-container\"\n      ref={(node) => {\n        scrollableRef.current = node;\n        jRef.current = node;\n        kRef.current = node;\n        oRef.current = node;\n      }}\n      tabIndex=\"-1\"\n    >\n      <div class={`timeline-deck deck ${onlyMentions ? 'only-mentions' : ''}`}>\n        <header\n          hidden={hiddenUI}\n          onClick={(e) => {\n            if (!e.target.closest('a, button')) {\n              scrollableRef.current?.scrollTo({ top: 0, behavior: 'smooth' });\n            }\n          }}\n          onDblClick={(e) => {\n            if (!e.target.closest('a, button')) {\n              loadNotifications(true);\n            }\n          }}\n          class={uiState === 'loading' ? 'loading' : ''}\n        >\n          <div class=\"header-grid\">\n            <div class=\"header-side\">\n              <NavMenu />\n              <Link to=\"/\" class=\"button plain\">\n                <Icon icon=\"home\" size=\"l\" alt=\"Home\" />\n              </Link>\n            </div>\n            <h1>Notifications</h1>\n            <div class=\"header-side\">\n              {supportsFilteredNotifications && (\n                <button\n                  type=\"button\"\n                  class=\"button plain\"\n                  onClick={() => {\n                    setShowNotificationsSettings(true);\n                  }}\n                >\n                  <Icon icon=\"settings\" size=\"l\" alt=\"Notifications settings\" />\n                </button>\n              )}\n            </div>\n          </div>\n          {showNew && uiState !== 'loading' && (\n            <button\n              class=\"updates-button shiny-pill\"\n              type=\"button\"\n              onClick={() => {\n                loadNotifications(true);\n                scrollableRef.current?.scrollTo({\n                  top: 0,\n                  behavior: 'smooth',\n                });\n              }}\n            >\n              <Icon icon=\"arrow-up\" /> New notifications\n            </button>\n          )}\n        </header>\n        {announcements.length > 0 && (\n          <div class=\"shazam-container\">\n            <div class=\"shazam-container-inner\">\n              <details class=\"announcements\">\n                <summary>\n                  <span>\n                    <Icon icon=\"announce\" class=\"announcement-icon\" size=\"l\" />{' '}\n                    <b>Announcement{announcements.length > 1 ? 's' : ''}</b>{' '}\n                    <small class=\"insignificant\">{instance}</small>\n                  </span>\n                  {announcements.length > 1 && (\n                    <span class=\"announcements-nav-buttons\">\n                      {announcements.map((announcement, index) => (\n                        <button\n                          type=\"button\"\n                          class=\"plain2 small\"\n                          onClick={() => {\n                            announcementsListRef.current?.children[\n                              index\n                            ].scrollIntoView({\n                              behavior: 'smooth',\n                              block: 'nearest',\n                            });\n                          }}\n                        >\n                          {index + 1}\n                        </button>\n                      ))}\n                    </span>\n                  )}\n                </summary>\n                <ul\n                  class={`announcements-list-${\n                    announcements.length > 1 ? 'multiple' : 'single'\n                  }`}\n                  ref={announcementsListRef}\n                >\n                  {announcements.map((announcement) => (\n                    <li>\n                      <AnnouncementBlock announcement={announcement} />\n                    </li>\n                  ))}\n                </ul>\n              </details>\n            </div>\n          </div>\n        )}\n        {followRequests.length > 0 && (\n          <div class=\"follow-requests\">\n            <h2 class=\"timeline-header\">Follow requests</h2>\n            {followRequests.length > 5 ? (\n              <details>\n                <summary>{followRequests.length} follow requests</summary>\n                <ul>\n                  {followRequests.map((account) => (\n                    <li key={account.id}>\n                      <AccountBlock account={account} />\n                      <FollowRequestButtons\n                        accountID={account.id}\n                        onChange={() => {\n                          // loadFollowRequests();\n                          // loadNotifications(true);\n                        }}\n                      />\n                    </li>\n                  ))}\n                </ul>\n              </details>\n            ) : (\n              <ul>\n                {followRequests.map((account) => (\n                  <li key={account.id}>\n                    <AccountBlock account={account} />\n                    <FollowRequestButtons\n                      accountID={account.id}\n                      onChange={() => {\n                        // loadFollowRequests();\n                        // loadNotifications(true);\n                      }}\n                    />\n                  </li>\n                ))}\n              </ul>\n            )}\n          </div>\n        )}\n        {supportsFilteredNotifications &&\n          notificationsPolicy?.summary?.pendingRequestsCount > 0 && (\n            <div class=\"shazam-container\">\n              <div class=\"shazam-container-inner\">\n                <div class=\"filtered-notifications\">\n                  <details\n                    onToggle={async (e) => {\n                      const { open } = e.target;\n                      if (open) {\n                        const requests = await fetchNotificationsRequest();\n                        setNotificationsRequests(requests);\n                        console.log({ open, requests });\n                      }\n                    }}\n                  >\n                    <summary>\n                      Filtered notifications from{' '}\n                      {notificationsPolicy.summary.pendingRequestsCount} people\n                    </summary>\n                    {!notificationsRequests ? (\n                      <p class=\"ui-state\">\n                        <Loader abrupt />\n                      </p>\n                    ) : (\n                      notificationsRequests?.length > 0 && (\n                        <ul>\n                          {notificationsRequests.map((request) => (\n                            <li key={request.id}>\n                              <div class=\"request-notifcations\">\n                                {!request.lastStatus?.id && (\n                                  <AccountBlock\n                                    useAvatarStatic\n                                    showStats\n                                    account={request.account}\n                                  />\n                                )}\n                                {request.lastStatus?.id && (\n                                  <div class=\"last-post\">\n                                    <Link\n                                      class=\"status-link\"\n                                      to={`/${instance}/s/${request.lastStatus.id}`}\n                                    >\n                                      <Status\n                                        status={request.lastStatus}\n                                        size=\"s\"\n                                        readOnly\n                                      />\n                                    </Link>\n                                  </div>\n                                )}\n                                <NotificationRequestModalButton\n                                  request={request}\n                                />\n                              </div>\n                              <NotificationRequestButtons\n                                request={request}\n                                onChange={() => {\n                                  loadNotifications(true);\n                                }}\n                              />\n                            </li>\n                          ))}\n                        </ul>\n                      )\n                    )}\n                  </details>\n                </div>\n              </div>\n            </div>\n          )}\n        <div id=\"mentions-option\">\n          <label>\n            <input\n              type=\"checkbox\"\n              checked={onlyMentions}\n              onChange={(e) => {\n                setOnlyMentions(e.target.checked);\n              }}\n            />{' '}\n            Only mentions\n          </label>\n        </div>\n        <h2 class=\"timeline-header\">Today</h2>\n        {showTodayEmpty && !!snapStates.notifications.length && (\n          <p class=\"ui-state insignificant\">\n            {uiState === 'default' ? \"You're all caught up.\" : <>&hellip;</>}\n          </p>\n        )}\n        {snapStates.notifications.length ? (\n          <>\n            {snapStates.notifications\n              // This is leaked from Notifications popover\n              .filter((n) => n.type !== 'follow_request')\n              .map((notification) => {\n                if (onlyMentions && notification.type !== 'mention') {\n                  return null;\n                }\n                const notificationDay = new Date(notification.createdAt);\n                const differentDay =\n                  notificationDay.toDateString() !== currentDay.toDateString();\n                if (differentDay) {\n                  currentDay = notificationDay;\n                }\n                // if notificationDay is yesterday, show \"Yesterday\"\n                // if notificationDay is before yesterday, show date\n                const heading =\n                  notificationDay.toDateString() ===\n                  yesterdayDate.toDateString()\n                    ? 'Yesterday'\n                    : niceDateTime(currentDay, {\n                        hideTime: true,\n                      });\n                return (\n                  <Fragment key={notification.id}>\n                    {differentDay && <h2 class=\"timeline-header\">{heading}</h2>}\n                    <Notification\n                      instance={instance}\n                      notification={notification}\n                      key={notification.id}\n                    />\n                  </Fragment>\n                );\n              })}\n          </>\n        ) : (\n          <>\n            {uiState === 'loading' && (\n              <>\n                <ul class=\"timeline flat\">\n                  {Array.from({ length: 5 }).map((_, i) => (\n                    <li class=\"notification skeleton\">\n                      <div class=\"notification-type\">\n                        <Icon icon=\"notification\" size=\"xl\" />\n                      </div>\n                      <div class=\"notification-content\">\n                        <p>███████████ ████</p>\n                      </div>\n                    </li>\n                  ))}\n                </ul>\n              </>\n            )}\n            {uiState === 'error' && (\n              <p class=\"ui-state\">\n                Unable to load notifications\n                <br />\n                <br />\n                <button type=\"button\" onClick={() => loadNotifications(true)}>\n                  Try again\n                </button>\n              </p>\n            )}\n          </>\n        )}\n        {showMore && (\n          <InView\n            onChange={(inView) => {\n              if (inView) {\n                loadNotifications();\n              }\n            }}\n          >\n            <button\n              type=\"button\"\n              class=\"plain block\"\n              disabled={uiState === 'loading'}\n              onClick={() => loadNotifications()}\n              style={{ marginBlockEnd: '6em' }}\n            >\n              {uiState === 'loading' ? (\n                <Loader abrupt />\n              ) : (\n                <>Show more&hellip;</>\n              )}\n            </button>\n          </InView>\n        )}\n      </div>\n      {supportsFilteredNotifications && showNotificationsSettings && (\n        <Modal\n          onClick={(e) => {\n            if (e.target === e.currentTarget) {\n              setShowNotificationsSettings(false);\n            }\n          }}\n        >\n          <div class=\"sheet\" id=\"notifications-settings\" tabIndex=\"-1\">\n            <button\n              type=\"button\"\n              class=\"sheet-close\"\n              onClick={() => setShowNotificationsSettings(false)}\n            >\n              <Icon icon=\"x\" />\n            </button>\n            <header>\n              <h2>Notifications settings</h2>\n            </header>\n            <main>\n              <form\n                onSubmit={(e) => {\n                  e.preventDefault();\n                  const {\n                    filterNotFollowing,\n                    filterNotFollowers,\n                    filterNewAccounts,\n                    filterPrivateMentions,\n                  } = e.target;\n                  const allFilters = {\n                    filterNotFollowing: filterNotFollowing.checked,\n                    filterNotFollowers: filterNotFollowers.checked,\n                    filterNewAccounts: filterNewAccounts.checked,\n                    filterPrivateMentions: filterPrivateMentions.checked,\n                  };\n                  setNotificationsPolicy({\n                    ...notificationsPolicy,\n                    ...allFilters,\n                  });\n                  setShowNotificationsSettings(false);\n                  (async () => {\n                    try {\n                      await masto.v1.notifications.policy.update(allFilters);\n                      showToast('Notifications settings updated');\n                    } catch (e) {\n                      console.error(e);\n                    }\n                  })();\n                }}\n              >\n                <p>Filter out notifications from people:</p>\n                <p>\n                  <label>\n                    <input\n                      type=\"checkbox\"\n                      switch\n                      defaultChecked={notificationsPolicy.filterNotFollowing}\n                      name=\"filterNotFollowing\"\n                    />{' '}\n                    You don't follow\n                  </label>\n                </p>\n                <p>\n                  <label>\n                    <input\n                      type=\"checkbox\"\n                      switch\n                      defaultChecked={notificationsPolicy.filterNotFollowers}\n                      name=\"filterNotFollowers\"\n                    />{' '}\n                    Who don't follow you\n                  </label>\n                </p>\n                <p>\n                  <label>\n                    <input\n                      type=\"checkbox\"\n                      switch\n                      defaultChecked={notificationsPolicy.filterNewAccounts}\n                      name=\"filterNewAccounts\"\n                    />{' '}\n                    With a new account\n                  </label>\n                </p>\n                <p>\n                  <label>\n                    <input\n                      type=\"checkbox\"\n                      switch\n                      defaultChecked={notificationsPolicy.filterPrivateMentions}\n                      name=\"filterPrivateMentions\"\n                    />{' '}\n                    Who unsolicitedly private mention you\n                  </label>\n                </p>\n                <p>\n                  <button type=\"submit\">Save</button>\n                </p>\n              </form>\n            </main>\n          </div>\n        </Modal>\n      )}\n    </div>\n  );\n}\n\nfunction inBackground() {\n  return !!document.querySelector('.deck-backdrop, #modal-container > *');\n}\n\nfunction AnnouncementBlock({ announcement }) {\n  const { instance } = api();\n  const { contact } = getCurrentInstance();\n  const contactAccount = contact?.account;\n  const {\n    id,\n    content,\n    startsAt,\n    endsAt,\n    published,\n    allDay,\n    publishedAt,\n    updatedAt,\n    read,\n    mentions,\n    statuses,\n    tags,\n    emojis,\n    reactions,\n  } = announcement;\n\n  const publishedAtDate = new Date(publishedAt);\n  const publishedDateText = niceDateTime(publishedAtDate);\n  const updatedAtDate = new Date(updatedAt);\n  const updatedAtText = niceDateTime(updatedAtDate);\n\n  return (\n    <div class=\"announcement-block\">\n      <AccountBlock account={contactAccount} />\n      <div\n        class=\"announcement-content\"\n        onClick={handleContentLinks({ mentions, instance })}\n        dangerouslySetInnerHTML={{\n          __html: enhanceContent(content, {\n            emojis,\n          }),\n        }}\n      />\n      <p class=\"insignificant\">\n        <time datetime={publishedAtDate.toISOString()}>\n          {niceDateTime(publishedAtDate)}\n        </time>\n        {updatedAt && updatedAtText !== publishedDateText && (\n          <>\n            {' '}\n            &bull;{' '}\n            <span class=\"ib\">\n              Updated{' '}\n              <time datetime={updatedAtDate.toISOString()}>\n                {niceDateTime(updatedAtDate)}\n              </time>\n            </span>\n          </>\n        )}\n      </p>\n      <div class=\"announcement-reactions\" hidden>\n        {reactions.map((reaction) => {\n          const { name, count, me, staticUrl, url } = reaction;\n          return (\n            <button type=\"button\" class={`plain4 small ${me ? 'reacted' : ''}`}>\n              {url || staticUrl ? (\n                <img src={url || staticUrl} alt={name} width=\"16\" height=\"16\" />\n              ) : (\n                <span>{name}</span>\n              )}{' '}\n              <span class=\"count\">{shortenNumber(count)}</span>\n            </button>\n          );\n        })}\n      </div>\n    </div>\n  );\n}\n\nfunction fetchNotficationsByAccount(accountID) {\n  const { masto } = api();\n  return masto.v1.notifications.list({\n    accountID,\n  });\n}\nfunction NotificationRequestModalButton({ request }) {\n  const { instance } = api();\n  const [uiState, setUIState] = useState('loading');\n  const { account, lastStatus } = request;\n  const [showModal, setShowModal] = useState(false);\n  const [notifications, setNotifications] = useState([]);\n\n  function onClose() {\n    setShowModal(false);\n  }\n\n  useEffect(() => {\n    if (!request?.account?.id) return;\n    if (!showModal) return;\n    setUIState('loading');\n    (async () => {\n      const notifs = await fetchNotficationsByAccount(request.account.id);\n      setNotifications(notifs || []);\n      setUIState('default');\n    })();\n  }, [showModal, request?.account?.id]);\n\n  return (\n    <>\n      <button\n        type=\"button\"\n        class=\"plain4 request-notifications-account\"\n        onClick={() => {\n          setShowModal(true);\n        }}\n      >\n        <Icon icon=\"notification\" class=\"more-insignificant\" />{' '}\n        <small>View notifications from @{account.username}</small>{' '}\n        <Icon icon=\"chevron-down\" />\n      </button>\n      {showModal && (\n        <Modal\n          onClick={(e) => {\n            if (e.target === e.currentTarget) {\n              onClose();\n            }\n          }}\n        >\n          <div class=\"sheet\" tabIndex=\"-1\">\n            <button type=\"button\" class=\"sheet-close\" onClick={onClose}>\n              <Icon icon=\"x\" />\n            </button>\n            <header>\n              <b>Notifications from @{account.username}</b>\n            </header>\n            <main>\n              {uiState === 'loading' ? (\n                <p class=\"ui-state\">\n                  <Loader abrupt />\n                </p>\n              ) : (\n                notifications.map((notification) => (\n                  <div\n                    class=\"notification-peek\"\n                    onClick={(e) => {\n                      const { target } = e;\n                      // If button or links\n                      if (\n                        e.target.tagName === 'BUTTON' ||\n                        e.target.tagName === 'A'\n                      ) {\n                        onClose();\n                      }\n                    }}\n                  >\n                    <Notification\n                      instance={instance}\n                      notification={notification}\n                      isStatic\n                    />\n                  </div>\n                ))\n              )}\n            </main>\n          </div>\n        </Modal>\n      )}\n    </>\n  );\n}\n\nfunction NotificationRequestButtons({ request, onChange }) {\n  const { masto } = api();\n  const [uiState, setUIState] = useState('default');\n  const [requestState, setRequestState] = useState(null); // accept, dismiss\n  const hasRequestState = requestState !== null;\n\n  return (\n    <p class=\"notification-request-buttons\">\n      <button\n        type=\"button\"\n        disabled={uiState === 'loading' || hasRequestState}\n        onClick={() => {\n          setUIState('loading');\n          (async () => {\n            try {\n              await masto.v1.notifications.requests\n                .$select(request.id)\n                .accept();\n              setRequestState('accept');\n              setUIState('default');\n              onChange({\n                request,\n                state: 'accept',\n              });\n              showToast(\n                `Notifications from @${request.account.username} will not be filtered from now on.`,\n              );\n            } catch (error) {\n              setUIState('error');\n              console.error(error);\n              showToast(`Unable to accept notification request`);\n            }\n          })();\n        }}\n      >\n        Allow\n      </button>{' '}\n      <button\n        type=\"button\"\n        disabled={uiState === 'loading' || hasRequestState}\n        class=\"light danger\"\n        onClick={() => {\n          setUIState('loading');\n          (async () => {\n            try {\n              await masto.v1.notifications.requests\n                .$select(request.id)\n                .dismiss();\n              setRequestState('dismiss');\n              setUIState('default');\n              onChange({\n                request,\n                state: 'dismiss',\n              });\n              showToast(\n                `Notifications from @${request.account.username} will not show up in Filtered notifications from now on.`,\n              );\n            } catch (error) {\n              setUIState('error');\n              console.error(error);\n              showToast(`Unable to dismiss notification request`);\n            }\n          })();\n        }}\n      >\n        Dismiss\n      </button>\n      <span class=\"notification-request-states\">\n        {uiState === 'loading' ? (\n          <Loader abrupt />\n        ) : requestState === 'accept' ? (\n          <Icon\n            icon=\"check-circle\"\n            alt=\"Accepted\"\n            class=\"notification-accepted\"\n          />\n        ) : (\n          requestState === 'dismiss' && (\n            <Icon\n              icon=\"x-circle\"\n              alt=\"Dismissed\"\n              class=\"notification-dismissed\"\n            />\n          )\n        )}\n      </span>\n    </p>\n  );\n}\n\nexport default memo(Notifications);\n","import { Menu, MenuDivider, MenuItem } from '@szhsin/react-menu';\nimport { useRef } from 'preact/hooks';\nimport { useNavigate, useParams } from 'react-router-dom';\nimport { useSnapshot } from 'valtio';\n\nimport Icon from '../components/icon';\nimport Menu2 from '../components/menu2';\nimport Timeline from '../components/timeline';\nimport { api } from '../utils/api';\nimport { filteredItems } from '../utils/filters';\nimport states from '../utils/states';\nimport { saveStatus } from '../utils/states';\nimport useTitle from '../utils/useTitle';\n\nconst LIMIT = 20;\n\nfunction Public({ local, columnMode, ...props }) {\n  const snapStates = useSnapshot(states);\n  const isLocal = !!local;\n  const params = columnMode ? {} : useParams();\n  const { masto, instance } = api({\n    instance: props?.instance || params.instance,\n  });\n  const { masto: currentMasto, instance: currentInstance } = api();\n  const title = `${isLocal ? 'Local' : 'Federated'} timeline (${instance})`;\n  useTitle(title, isLocal ? `/:instance?/p/l` : `/:instance?/p`);\n  // const navigate = useNavigate();\n  const latestItem = useRef();\n\n  const publicIterator = useRef();\n  async function fetchPublic(firstLoad) {\n    if (firstLoad || !publicIterator.current) {\n      publicIterator.current = masto.v1.timelines.public.list({\n        limit: LIMIT,\n        local: isLocal,\n      });\n    }\n    const results = await publicIterator.current.next();\n    let { value } = results;\n    if (value?.length) {\n      if (firstLoad) {\n        latestItem.current = value[0].id;\n      }\n\n      // value = filteredItems(value, 'public');\n      value.forEach((item) => {\n        saveStatus(item, instance);\n      });\n    }\n    return {\n      ...results,\n      value,\n    };\n  }\n\n  async function checkForUpdates() {\n    try {\n      const results = await masto.v1.timelines.public\n        .list({\n          limit: 1,\n          local: isLocal,\n          since_id: latestItem.current,\n        })\n        .next();\n      let { value } = results;\n      value = filteredItems(value, 'public');\n      if (value?.length) {\n        return true;\n      }\n      return false;\n    } catch (e) {\n      return false;\n    }\n  }\n\n  return (\n    <Timeline\n      key={instance + isLocal}\n      title={title}\n      titleComponent={\n        <h1 class=\"header-double-lines\">\n          <b>{isLocal ? 'Local timeline' : 'Federated timeline'}</b>\n          <div>{instance}</div>\n        </h1>\n      }\n      id=\"public\"\n      instance={instance}\n      emptyText=\"No one has posted anything yet.\"\n      errorText=\"Unable to load posts\"\n      fetchItems={fetchPublic}\n      checkForUpdates={checkForUpdates}\n      useItemID\n      headerStart={<></>}\n      boostsCarousel={snapStates.settings.boostsCarousel}\n      // allowFilters\n      filterContext=\"public\"\n      headerEnd={\n        <Menu2\n          portal\n          // setDownOverflow\n          overflow=\"auto\"\n          viewScroll=\"close\"\n          position=\"anchor\"\n          menuButton={\n            <button type=\"button\" class=\"plain\">\n              <Icon icon=\"more\" size=\"l\" />\n            </button>\n          }\n        >\n          <MenuItem href={isLocal ? `/#/${instance}/p` : `/#/${instance}/p/l`}>\n            {isLocal ? (\n              <>\n                <Icon icon=\"transfer\" /> <span>Switch to Federated</span>\n              </>\n            ) : (\n              <>\n                <Icon icon=\"transfer\" /> <span>Switch to Local</span>\n              </>\n            )}\n          </MenuItem>\n          <MenuDivider />\n          <MenuItem\n            onClick={() => {\n              let newInstance = prompt(\n                'Enter a new instance e.g. \"mastodon.social\"',\n              );\n              if (!/\\./.test(newInstance)) {\n                if (newInstance) alert('Invalid instance');\n                return;\n              }\n              if (newInstance) {\n                newInstance = newInstance.toLowerCase().trim();\n                // navigate(isLocal ? `/${newInstance}/p/l` : `/${newInstance}/p`);\n                location.hash = isLocal\n                  ? `/${newInstance}/p/l`\n                  : `/${newInstance}/p`;\n              }\n            }}\n          >\n            <Icon icon=\"bus\" /> <span>Go to another instance…</span>\n          </MenuItem>\n          {currentInstance !== instance && (\n            <MenuItem\n              onClick={() => {\n                location.hash = isLocal\n                  ? `/${currentInstance}/p/l`\n                  : `/${currentInstance}/p`;\n              }}\n            >\n              <Icon icon=\"bus\" />{' '}\n              <small class=\"menu-double-lines\">\n                Go to my instance (<b>{currentInstance}</b>)\n              </small>\n            </MenuItem>\n          )}\n        </Menu2>\n      }\n    />\n  );\n}\n\nexport default Public;\n","import './search.css';\n\nimport { useAutoAnimate } from '@formkit/auto-animate/preact';\nimport { useEffect, useLayoutEffect, useRef, useState } from 'preact/hooks';\nimport { useHotkeys } from 'react-hotkeys-hook';\nimport { InView } from 'react-intersection-observer';\nimport { useParams, useSearchParams } from 'react-router-dom';\n\nimport AccountBlock from '../components/account-block';\nimport Icon from '../components/icon';\nimport Link from '../components/link';\nimport Loader from '../components/loader';\nimport NavMenu from '../components/nav-menu';\nimport SearchForm from '../components/search-form';\nimport Status from '../components/status';\nimport { api } from '../utils/api';\nimport { fetchRelationships } from '../utils/relationships';\nimport shortenNumber from '../utils/shorten-number';\nimport usePageVisibility from '../utils/usePageVisibility';\nimport useTitle from '../utils/useTitle';\n\nconst SHORT_LIMIT = 5;\nconst LIMIT = 40;\nconst emptySearchParams = new URLSearchParams();\n\nfunction Search({ columnMode, ...props }) {\n  const params = columnMode ? {} : useParams();\n  const { masto, instance, authenticated } = api({\n    instance: params.instance,\n  });\n  const [uiState, setUIState] = useState('default');\n  const [searchParams] = columnMode ? [emptySearchParams] : useSearchParams();\n  const searchFormRef = useRef();\n  const q = props?.query || searchParams.get('q');\n  const type = columnMode\n    ? 'statuses'\n    : props?.type || searchParams.get('type');\n  useTitle(\n    q\n      ? `Search: ${q}${\n          type\n            ? ` (${\n                {\n                  statuses: 'Posts',\n                  accounts: 'Accounts',\n                  hashtags: 'Hashtags',\n                }[type]\n              })`\n            : ''\n        }`\n      : 'Search',\n    `/search`,\n  );\n\n  const [showMore, setShowMore] = useState(false);\n  const offsetRef = useRef(0);\n  useEffect(() => {\n    offsetRef.current = 0;\n  }, [q, type]);\n\n  const scrollableRef = useRef();\n  useLayoutEffect(() => {\n    scrollableRef.current?.scrollTo?.(0, 0);\n  }, [q, type]);\n\n  const [statusResults, setStatusResults] = useState([]);\n  const [accountResults, setAccountResults] = useState([]);\n  const [hashtagResults, setHashtagResults] = useState([]);\n  useEffect(() => {\n    setStatusResults([]);\n    setAccountResults([]);\n    setHashtagResults([]);\n  }, [q]);\n  const setTypeResultsFunc = {\n    statuses: setStatusResults,\n    accounts: setAccountResults,\n    hashtags: setHashtagResults,\n  };\n\n  const [relationshipsMap, setRelationshipsMap] = useState({});\n  const loadRelationships = async (accounts) => {\n    if (!accounts?.length) return;\n    const relationships = await fetchRelationships(accounts, relationshipsMap);\n    if (relationships) {\n      setRelationshipsMap({\n        ...relationshipsMap,\n        ...relationships,\n      });\n    }\n  };\n\n  function loadResults(firstLoad) {\n    if (firstLoad) {\n      offsetRef.current = 0;\n    }\n\n    if (!firstLoad && !authenticated) {\n      // Search results pagination is only available to authenticated users\n      return;\n    }\n\n    setUIState('loading');\n    if (firstLoad && !type) {\n      setStatusResults(statusResults.slice(0, SHORT_LIMIT));\n      setAccountResults(accountResults.slice(0, SHORT_LIMIT));\n      setHashtagResults(hashtagResults.slice(0, SHORT_LIMIT));\n    }\n\n    (async () => {\n      const params = {\n        q,\n        resolve: authenticated,\n        limit: SHORT_LIMIT,\n      };\n      if (type) {\n        params.limit = LIMIT;\n        params.type = type;\n        if (authenticated) params.offset = offsetRef.current;\n      }\n\n      try {\n        const results = await masto.v2.search.fetch(params);\n        console.log(results);\n        if (type) {\n          if (firstLoad) {\n            setTypeResultsFunc[type](results[type]);\n            const length = results[type]?.length;\n            offsetRef.current = LIMIT;\n            setShowMore(!!length);\n          } else {\n            setTypeResultsFunc[type]((prev) => [...prev, ...results[type]]);\n            const length = results[type]?.length;\n            offsetRef.current = offsetRef.current + LIMIT;\n            setShowMore(!!length);\n          }\n        } else {\n          setStatusResults(results.statuses || []);\n          setAccountResults(results.accounts || []);\n          setHashtagResults(results.hashtags || []);\n          offsetRef.current = 0;\n          setShowMore(false);\n        }\n        loadRelationships(results.accounts);\n\n        setUIState('default');\n      } catch (err) {\n        console.error(err);\n        setUIState('error');\n      }\n    })();\n  }\n\n  const lastHiddenTime = useRef();\n  usePageVisibility((visible) => {\n    const reachStart = scrollableRef.current?.scrollTop === 0;\n    if (visible && reachStart) {\n      const timeDiff = Date.now() - lastHiddenTime.current;\n      if (!lastHiddenTime.current || timeDiff > 1000 * 3) {\n        // 3 seconds\n        loadResults(true);\n      } else {\n        lastHiddenTime.current = Date.now();\n      }\n    }\n  });\n\n  useEffect(() => {\n    searchFormRef.current?.setValue?.(q || '');\n    if (q) {\n      loadResults(true);\n    } else {\n      searchFormRef.current?.focus?.();\n    }\n  }, [q, type, instance]);\n\n  useHotkeys(\n    ['/', 'Slash'],\n    (e) => {\n      searchFormRef.current?.focus?.();\n    },\n    {\n      preventDefault: true,\n    },\n  );\n\n  const [filterBarParent] = useAutoAnimate();\n\n  return (\n    <div id=\"search-page\" class=\"deck-container\" ref={scrollableRef}>\n      <div class=\"timeline-deck deck\">\n        <header class={uiState === 'loading' ? 'loading' : ''}>\n          <div class=\"header-grid\">\n            <div class=\"header-side\">\n              <NavMenu />\n            </div>\n            <SearchForm ref={searchFormRef} />\n            <div class=\"header-side\">\n              <button\n                type=\"button\"\n                class=\"plain\"\n                onClick={() => {\n                  loadResults(true);\n                }}\n                disabled={uiState === 'loading'}\n              >\n                <Icon icon=\"search\" size=\"l\" />\n              </button>\n            </div>\n          </div>\n        </header>\n        <main>\n          {!!q && !columnMode && (\n            <div\n              ref={filterBarParent}\n              class={`filter-bar ${uiState === 'loading' ? 'loading' : ''}`}\n            >\n              {!!type && (\n                <Link to={`/search${q ? `?q=${encodeURIComponent(q)}` : ''}`}>\n                  ‹ All\n                </Link>\n              )}\n              {[\n                {\n                  label: 'Accounts',\n                  type: 'accounts',\n                  to: `/search?q=${encodeURIComponent(q)}&type=accounts`,\n                },\n                {\n                  label: 'Hashtags',\n                  type: 'hashtags',\n                  to: `/search?q=${encodeURIComponent(q)}&type=hashtags`,\n                },\n                {\n                  label: 'Posts',\n                  type: 'statuses',\n                  to: `/search?q=${encodeURIComponent(q)}&type=statuses`,\n                },\n              ]\n                .sort((a, b) => {\n                  if (a.type === type) return -1;\n                  if (b.type === type) return 1;\n                  return 0;\n                })\n                .map((link) => (\n                  <Link to={link.to} key={link.type}>\n                    {link.label}\n                  </Link>\n                ))}\n            </div>\n          )}\n          {!!q ? (\n            <>\n              {(!type || type === 'accounts') && (\n                <>\n                  {type !== 'accounts' && (\n                    <h2 class=\"timeline-header\">\n                      Accounts{' '}\n                      <Link\n                        to={`/search?q=${encodeURIComponent(q)}&type=accounts`}\n                      >\n                        <Icon icon=\"arrow-right\" size=\"l\" />\n                      </Link>\n                    </h2>\n                  )}\n                  {accountResults.length > 0 ? (\n                    <>\n                      <ul class=\"timeline flat accounts-list\">\n                        {accountResults.map((account) => (\n                          <li key={account.id}>\n                            <AccountBlock\n                              account={account}\n                              instance={instance}\n                              showStats\n                              relationship={relationshipsMap[account.id]}\n                            />\n                          </li>\n                        ))}\n                      </ul>\n                      {type !== 'accounts' && (\n                        <div class=\"ui-state\">\n                          <Link\n                            class=\"plain button\"\n                            to={`/search?q=${encodeURIComponent(\n                              q,\n                            )}&type=accounts`}\n                          >\n                            See more accounts <Icon icon=\"arrow-right\" />\n                          </Link>\n                        </div>\n                      )}\n                    </>\n                  ) : (\n                    !type &&\n                    (uiState === 'loading' ? (\n                      <p class=\"ui-state\">\n                        <Loader abrupt />\n                      </p>\n                    ) : (\n                      <p class=\"ui-state\">No accounts found.</p>\n                    ))\n                  )}\n                </>\n              )}\n              {(!type || type === 'hashtags') && (\n                <>\n                  {type !== 'hashtags' && (\n                    <h2 class=\"timeline-header\">\n                      Hashtags{' '}\n                      <Link\n                        to={`/search?q=${encodeURIComponent(q)}&type=hashtags`}\n                      >\n                        <Icon icon=\"arrow-right\" size=\"l\" />\n                      </Link>\n                    </h2>\n                  )}\n                  {hashtagResults.length > 0 ? (\n                    <>\n                      <ul class=\"link-list hashtag-list\">\n                        {hashtagResults.map((hashtag) => {\n                          const { name, history } = hashtag;\n                          const total = history?.reduce?.(\n                            (acc, cur) => acc + +cur.uses,\n                            0,\n                          );\n                          return (\n                            <li key={`${name}-${total}`}>\n                              <Link\n                                to={\n                                  instance\n                                    ? `/${instance}/t/${name}`\n                                    : `/t/${name}`\n                                }\n                              >\n                                <Icon icon=\"hashtag\" />\n                                <span>{name}</span>\n                                {!!total && (\n                                  <span class=\"count\">\n                                    {shortenNumber(total)}\n                                  </span>\n                                )}\n                              </Link>\n                            </li>\n                          );\n                        })}\n                      </ul>\n                      {type !== 'hashtags' && (\n                        <div class=\"ui-state\">\n                          <Link\n                            class=\"plain button\"\n                            to={`/search?q=${encodeURIComponent(\n                              q,\n                            )}&type=hashtags`}\n                          >\n                            See more hashtags <Icon icon=\"arrow-right\" />\n                          </Link>\n                        </div>\n                      )}\n                    </>\n                  ) : (\n                    !type &&\n                    (uiState === 'loading' ? (\n                      <p class=\"ui-state\">\n                        <Loader abrupt />\n                      </p>\n                    ) : (\n                      <p class=\"ui-state\">No hashtags found.</p>\n                    ))\n                  )}\n                </>\n              )}\n              {(!type || type === 'statuses') && (\n                <>\n                  {type !== 'statuses' && (\n                    <h2 class=\"timeline-header\">\n                      Posts{' '}\n                      <Link\n                        to={`/search?q=${encodeURIComponent(q)}&type=statuses`}\n                      >\n                        <Icon icon=\"arrow-right\" size=\"l\" />\n                      </Link>\n                    </h2>\n                  )}\n                  {statusResults.length > 0 ? (\n                    <>\n                      <ul class=\"timeline\">\n                        {statusResults.map((status) => (\n                          <li key={status.id}>\n                            <Link\n                              class=\"status-link\"\n                              to={\n                                instance\n                                  ? `/${instance}/s/${status.id}`\n                                  : `/s/${status.id}`\n                              }\n                            >\n                              <Status status={status} />\n                            </Link>\n                          </li>\n                        ))}\n                      </ul>\n                      {type !== 'statuses' && (\n                        <div class=\"ui-state\">\n                          <Link\n                            class=\"plain button\"\n                            to={`/search?q=${encodeURIComponent(\n                              q,\n                            )}&type=statuses`}\n                          >\n                            See more posts <Icon icon=\"arrow-right\" />\n                          </Link>\n                        </div>\n                      )}\n                    </>\n                  ) : (\n                    !type &&\n                    (uiState === 'loading' ? (\n                      <p class=\"ui-state\">\n                        <Loader abrupt />\n                      </p>\n                    ) : (\n                      <p class=\"ui-state\">No posts found.</p>\n                    ))\n                  )}\n                </>\n              )}\n              {!!type &&\n                (uiState === 'default' ? (\n                  showMore ? (\n                    <InView\n                      onChange={(inView) => {\n                        if (inView) {\n                          loadResults();\n                        }\n                      }}\n                    >\n                      <button\n                        type=\"button\"\n                        class=\"plain block\"\n                        onClick={() => loadResults()}\n                        style={{ marginBlockEnd: '6em' }}\n                      >\n                        Show more&hellip;\n                      </button>\n                    </InView>\n                  ) : (\n                    <p class=\"ui-state insignificant\">The end.</p>\n                  )\n                ) : (\n                  uiState === 'loading' && (\n                    <p class=\"ui-state\">\n                      <Loader abrupt />\n                    </p>\n                  )\n                ))}\n            </>\n          ) : uiState === 'loading' ? (\n            <p class=\"ui-state\">\n              <Loader abrupt />\n            </p>\n          ) : (\n            <p class=\"ui-state\">\n              Enter your search term or paste a URL above to get started.\n            </p>\n          )}\n        </main>\n      </div>\n    </div>\n  );\n}\n\nexport default Search;\n","// https://gist.github.com/earthbound19/e7fe15fdf8ca3ef814750a61bc75b5ce\nfunction clamp(value, min, max) {\n  return Math.max(Math.min(value, max), min);\n}\n\nconst gammaToLinear = (c) =>\n  c >= 0.04045 ? Math.pow((c + 0.055) / 1.055, 2.4) : c / 12.92;\nconst linearToGamma = (c) =>\n  c >= 0.0031308 ? 1.055 * Math.pow(c, 1 / 2.4) - 0.055 : 12.92 * c;\n\nexport function rgb2oklab([r, g, b]) {\n  r = gammaToLinear(r / 255);\n  g = gammaToLinear(g / 255);\n  b = gammaToLinear(b / 255);\n  var l = 0.4122214708 * r + 0.5363325363 * g + 0.0514459929 * b;\n  var m = 0.2119034982 * r + 0.6806995451 * g + 0.1073969566 * b;\n  var s = 0.0883024619 * r + 0.2817188376 * g + 0.6299787005 * b;\n  l = Math.cbrt(l);\n  m = Math.cbrt(m);\n  s = Math.cbrt(s);\n  return [\n    l * +0.2104542553 + m * +0.793617785 + s * -0.0040720468,\n    l * +1.9779984951 + m * -2.428592205 + s * +0.4505937099,\n    l * +0.0259040371 + m * +0.7827717662 + s * -0.808675766,\n  ];\n}\n\nexport function oklab2rgb([L, a, b]) {\n  var l = L + a * +0.3963377774 + b * +0.2158037573;\n  var m = L + a * -0.1055613458 + b * -0.0638541728;\n  var s = L + a * -0.0894841775 + b * -1.291485548;\n  // The ** operator here cubes; same as l_*l_*l_ in the C++ example:\n  l = l ** 3;\n  m = m ** 3;\n  s = s ** 3;\n  var r = l * +4.0767416621 + m * -3.3077115913 + s * +0.2309699292;\n  var g = l * -1.2684380046 + m * +2.6097574011 + s * -0.3413193965;\n  var b = l * -0.0041960863 + m * -0.7034186147 + s * +1.707614701;\n  // Convert linear RGB values returned from oklab math to sRGB for our use before returning them:\n  r = 255 * linearToGamma(r);\n  g = 255 * linearToGamma(g);\n  b = 255 * linearToGamma(b);\n  // OPTION: clamp r g and b values to the range 0-255; but if you use the values immediately to draw, JavaScript clamps them on use:\n  r = clamp(r, 0, 255);\n  g = clamp(g, 0, 255);\n  b = clamp(b, 0, 255);\n  // OPTION: round the values. May not be necessary if you use them immediately for rendering in JavaScript, as JavaScript (also) discards decimals on render:\n  r = Math.round(r);\n  g = Math.round(g);\n  b = Math.round(b);\n  return [r, g, b];\n}\n","import '../components/links-bar.css';\n\nimport { MenuItem } from '@szhsin/react-menu';\nimport { getBlurHashAverageColor } from 'fast-blurhash';\nimport { useMemo, useRef, useState } from 'preact/hooks';\nimport { useNavigate, useParams } from 'react-router-dom';\nimport { useSnapshot } from 'valtio';\n\nimport Icon from '../components/icon';\nimport Link from '../components/link';\nimport Menu2 from '../components/menu2';\nimport RelativeTime from '../components/relative-time';\nimport Timeline from '../components/timeline';\nimport { api } from '../utils/api';\nimport { oklab2rgb, rgb2oklab } from '../utils/color-utils';\nimport { filteredItems } from '../utils/filters';\nimport pmem from '../utils/pmem';\nimport shortenNumber from '../utils/shorten-number';\nimport states from '../utils/states';\nimport { saveStatus } from '../utils/states';\nimport useTitle from '../utils/useTitle';\n\nconst LIMIT = 20;\n\nconst fetchLinks = pmem(\n  (masto) => {\n    return masto.v1.trends.links.list().next();\n  },\n  {\n    // News last much longer\n    maxAge: 10 * 60 * 1000, // 10 minutes\n  },\n);\n\nfunction Trending({ columnMode, ...props }) {\n  const snapStates = useSnapshot(states);\n  const params = columnMode ? {} : useParams();\n  const { masto, instance } = api({\n    instance: props?.instance || params.instance,\n  });\n  const { masto: currentMasto, instance: currentInstance } = api();\n  const title = `Trending (${instance})`;\n  useTitle(title, `/:instance?/trending`);\n  // const navigate = useNavigate();\n  const latestItem = useRef();\n\n  const [hashtags, setHashtags] = useState([]);\n  const [links, setLinks] = useState([]);\n  const trendIterator = useRef();\n  async function fetchTrend(firstLoad) {\n    if (firstLoad || !trendIterator.current) {\n      trendIterator.current = masto.v1.trends.statuses.list({\n        limit: LIMIT,\n      });\n\n      // Get hashtags\n      try {\n        const iterator = masto.v1.trends.tags.list();\n        const { value: tags } = await iterator.next();\n        console.log('tags', tags);\n        if (tags?.length) {\n          setHashtags(tags);\n        }\n      } catch (e) {\n        console.error(e);\n      }\n\n      // Get links\n      try {\n        const { value } = await fetchLinks(masto, instance);\n        // 4 types available: link, photo, video, rich\n        // Only want links for now\n        const links = value?.filter?.((link) => link.type === 'link');\n        console.log('links', links);\n        if (links?.length) {\n          setLinks(links);\n        }\n      } catch (e) {\n        console.error(e);\n      }\n    }\n    const results = await trendIterator.current.next();\n    let { value } = results;\n    if (value?.length) {\n      if (firstLoad) {\n        latestItem.current = value[0].id;\n      }\n\n      // value = filteredItems(value, 'public'); // Might not work here\n      value.forEach((item) => {\n        saveStatus(item, instance);\n      });\n    }\n    return {\n      ...results,\n      value,\n    };\n  }\n\n  async function checkForUpdates() {\n    try {\n      const results = await masto.v1.trends.statuses\n        .list({\n          limit: 1,\n          // NOT SUPPORTED\n          // since_id: latestItem.current,\n        })\n        .next();\n      let { value } = results;\n      value = filteredItems(value, 'public');\n      if (value?.length && value[0].id !== latestItem.current) {\n        latestItem.current = value[0].id;\n        return true;\n      }\n      return false;\n    } catch (e) {\n      return false;\n    }\n  }\n\n  const TimelineStart = useMemo(() => {\n    return (\n      <>\n        {!!hashtags.length && (\n          <div class=\"filter-bar expandable\">\n            <Icon icon=\"chart\" class=\"insignificant\" size=\"l\" />\n            {hashtags.map((tag, i) => {\n              const { name, history } = tag;\n              const total = history.reduce((acc, cur) => acc + +cur.uses, 0);\n              return (\n                <Link to={`/${instance}/t/${name}`} key={name}>\n                  <span>\n                    <span class=\"more-insignificant\">#</span>\n                    {name}\n                  </span>\n                  <span class=\"filter-count\">{shortenNumber(total)}</span>\n                </Link>\n              );\n            })}\n          </div>\n        )}\n        {!!links.length && (\n          <div class=\"links-bar\">\n            <header>\n              <h3>Trending News</h3>\n            </header>\n            {links.map((link) => {\n              const {\n                authorName,\n                authorUrl,\n                blurhash,\n                description,\n                height,\n                image,\n                imageDescription,\n                language,\n                providerName,\n                providerUrl,\n                publishedAt,\n                title,\n                url,\n                width,\n              } = link;\n              const domain = new URL(url).hostname\n                .replace(/^www\\./, '')\n                .replace(/\\/$/, '');\n              let accentColor;\n              if (blurhash) {\n                const averageColor = getBlurHashAverageColor(blurhash);\n                const labAverageColor = rgb2oklab(averageColor);\n                accentColor = oklab2rgb([\n                  0.6,\n                  labAverageColor[1],\n                  labAverageColor[2],\n                ]);\n              }\n\n              return (\n                <a\n                  key={url}\n                  href={url}\n                  target=\"_blank\"\n                  rel=\"noopener noreferrer\"\n                  style={\n                    accentColor\n                      ? {\n                          '--accent-color': `rgb(${accentColor.join(',')})`,\n                          '--accent-alpha-color': `rgba(${accentColor.join(\n                            ',',\n                          )}, 0.4)`,\n                        }\n                      : {}\n                  }\n                >\n                  <article>\n                    <figure>\n                      <img\n                        src={image}\n                        alt={imageDescription}\n                        width={width}\n                        height={height}\n                        loading=\"lazy\"\n                      />\n                    </figure>\n                    <div class=\"article-body\">\n                      <header>\n                        <div class=\"article-meta\">\n                          <span class=\"domain\">{domain}</span>{' '}\n                          {!!publishedAt && <>&middot; </>}\n                          {!!publishedAt && (\n                            <>\n                              <RelativeTime\n                                datetime={publishedAt}\n                                format=\"micro\"\n                              />\n                            </>\n                          )}\n                        </div>\n                        {!!title && (\n                          <h1\n                            class=\"title\"\n                            lang={language}\n                            dir=\"auto\"\n                            title={title}\n                          >\n                            {title}\n                          </h1>\n                        )}\n                      </header>\n                      {!!description && (\n                        <p\n                          class=\"description\"\n                          lang={language}\n                          dir=\"auto\"\n                          title={description}\n                        >\n                          {description}\n                        </p>\n                      )}\n                    </div>\n                  </article>\n                </a>\n              );\n            })}\n          </div>\n        )}\n      </>\n    );\n  }, [hashtags, links]);\n\n  return (\n    <Timeline\n      key={instance}\n      title={title}\n      titleComponent={\n        <h1 class=\"header-double-lines\">\n          <b>Trending</b>\n          <div>{instance}</div>\n        </h1>\n      }\n      id=\"trending\"\n      instance={instance}\n      emptyText=\"No trending posts.\"\n      errorText=\"Unable to load posts\"\n      fetchItems={fetchTrend}\n      checkForUpdates={checkForUpdates}\n      checkForUpdatesInterval={5 * 60 * 1000} // 5 minutes\n      useItemID\n      headerStart={<></>}\n      boostsCarousel={snapStates.settings.boostsCarousel}\n      // allowFilters\n      filterContext=\"public\"\n      timelineStart={TimelineStart}\n      headerEnd={\n        <Menu2\n          portal\n          // setDownOverflow\n          overflow=\"auto\"\n          viewScroll=\"close\"\n          position=\"anchor\"\n          menuButton={\n            <button type=\"button\" class=\"plain\">\n              <Icon icon=\"more\" size=\"l\" />\n            </button>\n          }\n        >\n          <MenuItem\n            onClick={() => {\n              let newInstance = prompt(\n                'Enter a new instance e.g. \"mastodon.social\"',\n              );\n              if (!/\\./.test(newInstance)) {\n                if (newInstance) alert('Invalid instance');\n                return;\n              }\n              if (newInstance) {\n                newInstance = newInstance.toLowerCase().trim();\n                // navigate(`/${newInstance}/trending`);\n                location.hash = `/${newInstance}/trending`;\n              }\n            }}\n          >\n            <Icon icon=\"bus\" /> <span>Go to another instance…</span>\n          </MenuItem>\n          {currentInstance !== instance && (\n            <MenuItem\n              onClick={() => {\n                location.hash = `/${currentInstance}/trending`;\n              }}\n            >\n              <Icon icon=\"bus\" />{' '}\n              <small class=\"menu-double-lines\">\n                Go to my instance (<b>{currentInstance}</b>)\n              </small>\n            </MenuItem>\n          )}\n        </Menu2>\n      }\n    />\n  );\n}\n\nexport default Trending;\n","import { useHotkeys } from 'react-hotkeys-hook';\nimport { useSnapshot } from 'valtio';\n\nimport Bookmarks from '../pages/bookmarks';\nimport Favourites from '../pages/favourites';\nimport Following from '../pages/following';\nimport Hashtag from '../pages/hashtag';\nimport List from '../pages/list';\nimport Mentions from '../pages/mentions';\nimport Notifications from '../pages/notifications';\nimport Public from '../pages/public';\nimport Search from '../pages/search';\nimport Trending from '../pages/trending';\nimport states from '../utils/states';\nimport useTitle from '../utils/useTitle';\n\nfunction Columns() {\n  useTitle('Home', '/');\n  const snapStates = useSnapshot(states);\n  const { shortcuts } = snapStates;\n\n  console.debug('RENDER Columns', shortcuts);\n\n  const components = shortcuts.map((shortcut) => {\n    if (!shortcut) return null;\n    const { type, ...params } = shortcut;\n    const Component = {\n      following: Following,\n      notifications: Notifications,\n      list: List,\n      public: Public,\n      bookmarks: Bookmarks,\n      favourites: Favourites,\n      hashtag: Hashtag,\n      mentions: Mentions,\n      trending: Trending,\n      search: Search,\n    }[type];\n    if (!Component) return null;\n    // Don't show Search column with no query, for now\n    if (type === 'search' && !params.query) return null;\n    // Don't show List column with no list, for now\n    if (type === 'list' && !params.id) return null;\n    return (\n      <Component key={type + JSON.stringify(params)} {...params} columnMode />\n    );\n  });\n\n  useHotkeys(['1', '2', '3', '4', '5', '6', '7', '8', '9'], (e, handler) => {\n    try {\n      const index = parseInt(handler.keys[0], 10) - 1;\n      document.querySelectorAll('#columns > *')[index].focus();\n    } catch (e) {\n      console.error(e);\n    }\n  });\n\n  return (\n    <div\n      id=\"columns\"\n      onContextMenu={(e) => {\n        // If right-click on header, but not links or buttons\n        if (\n          e.target.closest('.deck > header') &&\n          !e.target.closest('a') &&\n          !e.target.closest('button')\n        ) {\n          e.preventDefault();\n          states.showShortcutsSettings = true;\n        }\n      }}\n    >\n      {components}\n    </div>\n  );\n}\n\nexport default Columns;\n","import './notifications-menu.css';\n\nimport { ControlledMenu } from '@szhsin/react-menu';\nimport { memo } from 'preact/compat';\nimport { useEffect, useRef, useState } from 'preact/hooks';\nimport { useSnapshot } from 'valtio';\n\nimport Columns from '../components/columns';\nimport Icon from '../components/icon';\nimport Link from '../components/link';\nimport Loader from '../components/loader';\nimport Notification from '../components/notification';\nimport { api } from '../utils/api';\nimport db from '../utils/db';\nimport groupNotifications from '../utils/group-notifications';\nimport states, { saveStatus } from '../utils/states';\nimport { getCurrentAccountNS } from '../utils/store-utils';\n\nimport Following from './following';\n\nfunction Home() {\n  const snapStates = useSnapshot(states);\n  useEffect(() => {\n    (async () => {\n      const keys = await db.drafts.keys();\n      if (keys.length) {\n        const ns = getCurrentAccountNS();\n        const ownKeys = keys.filter((key) => key.startsWith(ns));\n        if (ownKeys.length) {\n          states.showDrafts = true;\n        }\n      }\n    })();\n  }, []);\n\n  return (\n    <>\n      {(snapStates.settings.shortcutsViewMode === 'multi-column' ||\n        (!snapStates.settings.shortcutsViewMode &&\n          snapStates.settings.shortcutsColumnsMode)) &&\n      !!snapStates.shortcuts?.length ? (\n        <Columns />\n      ) : (\n        <Following\n          title=\"Home\"\n          path=\"/\"\n          id=\"home\"\n          headerStart={false}\n          headerEnd={<NotificationsLink />}\n        />\n      )}\n    </>\n  );\n}\n\nfunction NotificationsLink() {\n  const snapStates = useSnapshot(states);\n  const notificationLinkRef = useRef();\n  const [menuState, setMenuState] = useState(undefined);\n  return (\n    <>\n      <Link\n        ref={notificationLinkRef}\n        to=\"/notifications\"\n        class={`button plain notifications-button ${\n          snapStates.notificationsShowNew ? 'has-badge' : ''\n        } ${menuState || ''}`}\n        onClick={(e) => {\n          e.stopPropagation();\n          if (window.matchMedia('(min-width: calc(40em))').matches) {\n            e.preventDefault();\n            setMenuState((state) => (!state ? 'open' : undefined));\n          }\n        }}\n      >\n        <Icon icon=\"notification\" size=\"l\" alt=\"Notifications\" />\n      </Link>\n      <NotificationsMenu\n        state={menuState}\n        anchorRef={notificationLinkRef}\n        onClose={() => setMenuState(undefined)}\n      />\n    </>\n  );\n}\n\nconst NOTIFICATIONS_LIMIT = 30;\nconst NOTIFICATIONS_DISPLAY_LIMIT = 5;\nfunction NotificationsMenu({ anchorRef, state, onClose }) {\n  const { masto, instance } = api();\n  const snapStates = useSnapshot(states);\n  const [uiState, setUIState] = useState('default');\n\n  const notificationsIterator = masto.v1.notifications.list({\n    limit: NOTIFICATIONS_LIMIT,\n  });\n\n  async function fetchNotifications() {\n    const allNotifications = await notificationsIterator.next();\n    const notifications = allNotifications.value;\n\n    if (notifications?.length) {\n      notifications.forEach((notification) => {\n        saveStatus(notification.status, instance, {\n          skipThreading: true,\n        });\n      });\n\n      const groupedNotifications = groupNotifications(notifications);\n\n      states.notificationsLast = notifications[0];\n      states.notifications = groupedNotifications;\n\n      // Update last read marker\n      masto.v1.markers\n        .create({\n          notifications: {\n            lastReadId: notifications[0].id,\n          },\n        })\n        .catch(() => {});\n    }\n\n    states.notificationsShowNew = false;\n    states.notificationsLastFetchTime = Date.now();\n    return allNotifications;\n  }\n\n  const [hasFollowRequests, setHasFollowRequests] = useState(false);\n  function fetchFollowRequests() {\n    return masto.v1.followRequests.list({\n      limit: 1,\n    });\n  }\n\n  function loadNotifications() {\n    setUIState('loading');\n    (async () => {\n      try {\n        await fetchNotifications();\n        const followRequests = await fetchFollowRequests();\n        setHasFollowRequests(!!followRequests?.length);\n        setUIState('default');\n      } catch (e) {\n        setUIState('error');\n      }\n    })();\n  }\n\n  useEffect(() => {\n    if (state === 'open') loadNotifications();\n  }, [state]);\n\n  return (\n    <ControlledMenu\n      menuClassName=\"notifications-menu\"\n      state={state}\n      anchorRef={anchorRef}\n      onClose={onClose}\n      portal={{\n        target: document.body,\n      }}\n      overflow=\"auto\"\n      viewScroll=\"close\"\n      position=\"anchor\"\n      align=\"center\"\n      boundingBoxPadding=\"8 8 8 8\"\n    >\n      <header>\n        <h2>Notifications</h2>\n      </header>\n      <main>\n        {snapStates.notifications.length ? (\n          <>\n            {snapStates.notifications\n              .slice(0, NOTIFICATIONS_DISPLAY_LIMIT)\n              .map((notification) => (\n                <Notification\n                  key={notification.id}\n                  instance={instance}\n                  notification={notification}\n                  disableContextMenu\n                />\n              ))}\n          </>\n        ) : uiState === 'loading' ? (\n          <div class=\"ui-state\">\n            <Loader abrupt />\n          </div>\n        ) : (\n          uiState === 'error' && (\n            <div class=\"ui-state\">\n              <p>Unable to fetch notifications.</p>\n              <p>\n                <button type=\"button\" onClick={loadNotifications}>\n                  Try again\n                </button>\n              </p>\n            </div>\n          )\n        )}\n      </main>\n      <footer>\n        <Link to=\"/mentions\" class=\"button plain\">\n          <Icon icon=\"at\" /> <span>Mentions</span>\n        </Link>\n        <Link to=\"/notifications\" class=\"button plain2\">\n          {hasFollowRequests ? (\n            <>\n              <span class=\"tag collapsed\">New</span>{' '}\n              <span>Follow Requests</span>\n            </>\n          ) : (\n            <b>See all</b>\n          )}{' '}\n          <Icon icon=\"arrow-right\" />\n        </Link>\n      </footer>\n    </ControlledMenu>\n  );\n}\n\nexport default memo(Home);\n","// export const statusRegex = /\\/@([^@\\/]+)@?([^\\/]+)?\\/([^\\/]+)\\/?$/i;\n// export const statusNoteRegex = /\\/notes\\/([^\\/]+)\\/?$/i;\n\nconst statusPostRegexes = [\n  /^\\/@[^@\\/]+\\/(?:statuses|posts)\\/([^\\/]+)/i, // GoToSocial, Takahe\n  /\\/notes\\/([^\\/]+)/i, // Misskey, Firefish\n  /^\\/(?:notice|objects)\\/([a-z0-9-]+)/i, // Pleroma\n  /\\/@[^@\\/]+@?[^\\/]+?\\/([^\\/]+)/i, // Mastodon\n];\n\nexport function getInstanceStatusObject(url) {\n  // Regex /:username/:id, where username = @username or @username@domain, id = anything\n  const { hostname, pathname } = new URL(url);\n  // const [, username, domain, id] = pathname.match(statusRegex) || [];\n  for (const regex of statusPostRegexes) {\n    const [, id] = pathname.match(regex) || [];\n    console.log(pathname, regex, id);\n    if (id) {\n      return {\n        instance: hostname,\n        id,\n      };\n    }\n  }\n  return {};\n}\n\nfunction getInstanceStatusURL(url) {\n  const { instance, id } = getInstanceStatusObject(url);\n  if (instance && id) {\n    return `/${instance}/s/${id}`;\n  }\n  return null;\n}\n\nexport default getInstanceStatusURL;\n","import { useLayoutEffect, useState } from 'preact/hooks';\nimport { useLocation } from 'react-router-dom';\n\nimport Link from '../components/link';\nimport Loader from '../components/loader';\nimport { api } from '../utils/api';\nimport getInstanceStatusURL, {\n  getInstanceStatusObject,\n} from '../utils/get-instance-status-url';\n\nexport default function HttpRoute() {\n  const location = useLocation();\n  const url = location.pathname.replace(/^\\//, '');\n  const statusObject = getInstanceStatusObject(url);\n  // const statusURL = getInstanceStatusURL(url);\n  const statusURL = statusObject?.instance\n    ? `/${statusObject.instance}/s/${statusObject.id}`\n    : null;\n  const [uiState, setUIState] = useState('loading');\n\n  useLayoutEffect(() => {\n    setUIState('loading');\n    (async () => {\n      // Check if status returns 200\n      try {\n        const { instance, id } = statusObject;\n        const { masto } = api({ instance });\n        const status = await masto.v1.statuses.$select(id).fetch();\n        if (status) {\n          window.location.hash = statusURL + '?view=full';\n          return;\n        }\n      } catch (e) {}\n\n      // Fallback to search\n      {\n        const { masto: currentMasto, instance: currentInstance } = api();\n        const result = await currentMasto.v2.search.fetch({\n          q: url,\n          limit: 1,\n          resolve: true,\n        });\n        if (result.statuses.length) {\n          const status = result.statuses[0];\n          window.location.hash = `/${currentInstance}/s/${status.id}?view=full`;\n        } else if (result.accounts.length) {\n          const account = result.accounts[0];\n          window.location.hash = `/${currentInstance}/a/${account.id}`;\n        } else if (statusURL) {\n          // Fallback to original URL, which will probably show error\n          window.location.hash = statusURL + '?view=full';\n        } else {\n          setUIState('error');\n        }\n      }\n    })();\n  }, [statusURL]);\n\n  return (\n    <div class=\"ui-state\" tabIndex=\"-1\">\n      {uiState === 'loading' ? (\n        <>\n          <Loader abrupt />\n          <h2>Resolving…</h2>\n          <p>\n            <a href={url} target=\"_blank\" rel=\"noopener noreferrer\">\n              {url}\n            </a>\n          </p>\n        </>\n      ) : (\n        <>\n          <h2>Unable to resolve URL</h2>\n          <p>\n            <a href={url} target=\"_blank\" rel=\"noopener noreferrer\">\n              {url}\n            </a>\n          </p>\n        </>\n      )}\n      <hr />\n      <p>\n        <Link to=\"/\">Go home</Link>\n      </p>\n    </div>\n  );\n}\n","import './lists.css';\n\nimport { useEffect, useReducer, useRef, useState } from 'preact/hooks';\n\nimport Icon from '../components/icon';\nimport Link from '../components/link';\nimport ListAddEdit from '../components/list-add-edit';\nimport Loader from '../components/loader';\nimport Modal from '../components/modal';\nimport NavMenu from '../components/nav-menu';\nimport { fetchLists } from '../utils/lists';\nimport useTitle from '../utils/useTitle';\n\nfunction Lists() {\n  useTitle(`Lists`, `/l`);\n  const [uiState, setUIState] = useState('default');\n\n  const [reloadCount, reload] = useReducer((c) => c + 1, 0);\n  const [lists, setLists] = useState([]);\n  useEffect(() => {\n    setUIState('loading');\n    (async () => {\n      try {\n        const lists = await fetchLists();\n        console.log(lists);\n        setLists(lists);\n        setUIState('default');\n      } catch (e) {\n        console.error(e);\n        setUIState('error');\n      }\n    })();\n  }, [reloadCount]);\n\n  const [showListAddEditModal, setShowListAddEditModal] = useState(false);\n\n  return (\n    <div id=\"lists-page\" class=\"deck-container\" tabIndex=\"-1\">\n      <div class=\"timeline-deck deck\">\n        <header>\n          <div class=\"header-grid\">\n            <div class=\"header-side\">\n              <NavMenu />\n              <Link to=\"/\" class=\"button plain\">\n                <Icon icon=\"home\" size=\"l\" />\n              </Link>\n            </div>\n            <h1>Lists</h1>\n            <div class=\"header-side\">\n              <button\n                type=\"button\"\n                class=\"plain\"\n                onClick={() => setShowListAddEditModal(true)}\n              >\n                <Icon icon=\"plus\" size=\"l\" alt=\"New list\" />\n              </button>\n            </div>\n          </div>\n        </header>\n        <main>\n          {lists.length > 0 ? (\n            <>\n              <ul class=\"link-list\">\n                {lists.map((list) => (\n                  <li>\n                    <Link to={`/l/${list.id}`}>\n                      <span>\n                        <Icon icon=\"list\" /> <span>{list.title}</span>\n                      </span>\n                      {/* <button\n                      type=\"button\"\n                      class=\"plain\"\n                      onClick={(e) => {\n                        e.preventDefault();\n                        e.stopPropagation();\n                        setShowListAddEditModal({\n                          list,\n                        });\n                      }}\n                    >\n                      <Icon icon=\"pencil\" />\n                    </button> */}\n                    </Link>\n                  </li>\n                ))}\n              </ul>\n              {lists.length > 1 && (\n                <footer class=\"ui-state\">\n                  <small class=\"insignificant\">\n                    {lists.length} list\n                    {lists.length === 1 ? '' : 's'}\n                  </small>\n                </footer>\n              )}\n            </>\n          ) : uiState === 'loading' ? (\n            <p class=\"ui-state\">\n              <Loader />\n            </p>\n          ) : uiState === 'error' ? (\n            <p class=\"ui-state\">Unable to load lists.</p>\n          ) : (\n            <p class=\"ui-state\">No lists yet.</p>\n          )}\n        </main>\n      </div>\n      {showListAddEditModal && (\n        <Modal\n          onClick={(e) => {\n            if (e.target === e.currentTarget) {\n              setShowListAddEditModal(false);\n            }\n          }}\n        >\n          <ListAddEdit\n            list={showListAddEditModal?.list}\n            onClose={(result) => {\n              if (result.state === 'success') {\n                reload();\n              }\n              setShowListAddEditModal(false);\n            }}\n          />\n        </Modal>\n      )}\n    </div>\n  );\n}\n\nexport default Lists;\n","export default \"data:image/svg+xml,%3csvg%20xmlns='http://www.w3.org/2000/svg'%20xml:space='preserve'%20fill-rule='evenodd'%20stroke-linejoin='round'%20stroke-miterlimit='2'%20clip-rule='evenodd'%20viewBox='0%200%2064%2064'%3e%3cpath%20fill='none'%20d='M0%200h63.994v63.994H0z'/%3e%3cpath%20fill='%23a4bff7'%20d='M37.774%2011.471c14.639%203.752%2019.034%2016.557%2015.889%2031.304-.696%203.261-2.563%206.661-6.356%208.693-3.204%201.717-8.07%202.537-15.338.55l-9.634-2.404C11.651%2046.992%208.378%2038.733%2010.027%2031.823c3.627-15.201%2015.543-23.48%2027.747-20.352Z'/%3e%3cpath%20fill='%23d8e7fe'%20d='M36.76%2015.429c12.289%203.15%2015.547%2014.114%2012.907%2026.493-.947%204.44-4.937%209.365-16.664%206.143l-9.684-2.417c-7.854-1.923-10.53-7.8-9.318-12.877%203.016-12.639%2012.611-19.943%2022.759-17.342Z'/%3e%3cpath%20fill='%236081e6'%20d='M27.471%2024.991c-1.457-.698-7.229%203.213-7.663%208.926-.182%202.39%204.55%203.237%205.071-.169.725-4.743%203.715-8.218%202.592-8.757Zm10.746%202.005c-2.083.327-.382%205.901-.595%2010.727-.123%202.8%204.388%203.464%204.703%202.011%201.098-5.073-2.066-13.058-4.108-12.738Z'/%3e%3c/svg%3e\"","export default \"__VITE_ASSET__Y_wpqkTO__\"","const { PHANPY_CLIENT_NAME: CLIENT_NAME, PHANPY_WEBSITE: WEBSITE } = import.meta\n  .env;\n\nconst SCOPES = 'read write follow push';\n\nexport async function registerApplication({ instanceURL }) {\n  const registrationParams = new URLSearchParams({\n    client_name: CLIENT_NAME,\n    redirect_uris: location.origin + location.pathname,\n    scopes: SCOPES,\n    website: WEBSITE,\n  });\n  const registrationResponse = await fetch(\n    `https://${instanceURL}/api/v1/apps`,\n    {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/x-www-form-urlencoded',\n      },\n      body: registrationParams.toString(),\n    },\n  );\n  const registrationJSON = await registrationResponse.json();\n  console.log({ registrationJSON });\n  return registrationJSON;\n}\n\nexport async function getAuthorizationURL({ instanceURL, client_id }) {\n  const authorizationParams = new URLSearchParams({\n    client_id,\n    scope: SCOPES,\n    redirect_uri: location.origin + location.pathname,\n    // redirect_uri: 'urn:ietf:wg:oauth:2.0:oob',\n    response_type: 'code',\n  });\n  const authorizationURL = `https://${instanceURL}/oauth/authorize?${authorizationParams.toString()}`;\n  return authorizationURL;\n}\n\nexport async function getAccessToken({\n  instanceURL,\n  client_id,\n  client_secret,\n  code,\n}) {\n  const params = new URLSearchParams({\n    client_id,\n    client_secret,\n    redirect_uri: location.origin + location.pathname,\n    grant_type: 'authorization_code',\n    code,\n    scope: SCOPES,\n  });\n  const tokenResponse = await fetch(`https://${instanceURL}/oauth/token`, {\n    method: 'POST',\n    headers: {\n      'Content-Type': 'application/x-www-form-urlencoded',\n    },\n    body: params.toString(),\n  });\n  const tokenJSON = await tokenResponse.json();\n  console.log({ tokenJSON });\n  return tokenJSON;\n}\n","import './login.css';\n\nimport { useEffect, useRef, useState } from 'preact/hooks';\nimport { useSearchParams } from 'react-router-dom';\n\nimport logo from '../assets/logo.svg';\n\nimport Link from '../components/link';\nimport Loader from '../components/loader';\nimport instancesListURL from '../data/instances.json?url';\nimport { getAuthorizationURL, registerApplication } from '../utils/auth';\nimport store from '../utils/store';\nimport useTitle from '../utils/useTitle';\n\nconst { PHANPY_DEFAULT_INSTANCE: DEFAULT_INSTANCE } = import.meta.env;\n\nfunction Login() {\n  useTitle('Log in');\n  const instanceURLRef = useRef();\n  const cachedInstanceURL = store.local.get('instanceURL');\n  const [uiState, setUIState] = useState('default');\n  const [searchParams] = useSearchParams();\n  const instance = searchParams.get('instance');\n  const submit = searchParams.get('submit');\n  const [instanceText, setInstanceText] = useState(\n    instance || cachedInstanceURL?.toLowerCase() || '',\n  );\n\n  const [instancesList, setInstancesList] = useState([]);\n  useEffect(() => {\n    (async () => {\n      try {\n        const res = await fetch(instancesListURL);\n        const data = await res.json();\n        setInstancesList(data);\n      } catch (e) {\n        // Silently fail\n        console.error(e);\n      }\n    })();\n  }, []);\n\n  // useEffect(() => {\n  //   if (cachedInstanceURL) {\n  //     instanceURLRef.current.value = cachedInstanceURL.toLowerCase();\n  //   }\n  // }, []);\n\n  const submitInstance = (instanceURL) => {\n    if (!instanceURL) return;\n    store.local.set('instanceURL', instanceURL);\n\n    (async () => {\n      setUIState('loading');\n      try {\n        const { client_id, client_secret, vapid_key } =\n          await registerApplication({\n            instanceURL,\n          });\n\n        if (client_id && client_secret) {\n          store.session.set('clientID', client_id);\n          store.session.set('clientSecret', client_secret);\n          store.session.set('vapidKey', vapid_key);\n\n          location.href = await getAuthorizationURL({\n            instanceURL,\n            client_id,\n          });\n        } else {\n          alert('Failed to register application');\n        }\n        setUIState('default');\n      } catch (e) {\n        console.error(e);\n        setUIState('error');\n      }\n    })();\n  };\n\n  const cleanInstanceText = instanceText\n    ? instanceText\n        .replace(/^https?:\\/\\//, '') // Remove protocol from instance URL\n        .replace(/\\/+$/, '') // Remove trailing slash\n        .replace(/^@?[^@]+@/, '') // Remove @?acct@\n        .trim()\n    : null;\n  const instanceTextLooksLikeDomain =\n    /[^\\s\\r\\n\\t\\/\\\\]+\\.[^\\s\\r\\n\\t\\/\\\\]+/.test(cleanInstanceText) &&\n    !/[\\s\\/\\\\@]/.test(cleanInstanceText);\n\n  const instancesSuggestions = cleanInstanceText\n    ? instancesList\n        .filter((instance) => instance.includes(instanceText))\n        .sort((a, b) => {\n          // Move text that starts with instanceText to the start\n          const aStartsWith = a\n            .toLowerCase()\n            .startsWith(instanceText.toLowerCase());\n          const bStartsWith = b\n            .toLowerCase()\n            .startsWith(instanceText.toLowerCase());\n          if (aStartsWith && !bStartsWith) return -1;\n          if (!aStartsWith && bStartsWith) return 1;\n          return 0;\n        })\n        .slice(0, 10)\n    : [];\n\n  const selectedInstanceText = instanceTextLooksLikeDomain\n    ? cleanInstanceText\n    : instancesSuggestions?.length\n    ? instancesSuggestions[0]\n    : instanceText\n    ? instancesList.find((instance) => instance.includes(instanceText))\n    : null;\n\n  const onSubmit = (e) => {\n    e.preventDefault();\n    // const { elements } = e.target;\n    // let instanceURL = elements.instanceURL.value.toLowerCase();\n    // // Remove protocol from instance URL\n    // instanceURL = instanceURL.replace(/^https?:\\/\\//, '').replace(/\\/+$/, '');\n    // // Remove @acct@ or acct@ from instance URL\n    // instanceURL = instanceURL.replace(/^@?[^@]+@/, '');\n    // if (!/\\./.test(instanceURL)) {\n    //   instanceURL = instancesList.find((instance) =>\n    //     instance.includes(instanceURL),\n    //   );\n    // }\n    // submitInstance(instanceURL);\n    submitInstance(selectedInstanceText);\n  };\n\n  if (submit) {\n    useEffect(() => {\n      submitInstance(instance || selectedInstanceText);\n    }, []);\n  }\n\n  return (\n    <main id=\"login\" style={{ textAlign: 'center' }}>\n      <form onSubmit={onSubmit}>\n        <h1>\n          <img src={logo} alt=\"\" width=\"80\" height=\"80\" />\n          <br />\n          Log in\n        </h1>\n        <label>\n          <p>Instance</p>\n          <input\n            value={instanceText}\n            required\n            type=\"text\"\n            class=\"large\"\n            id=\"instanceURL\"\n            ref={instanceURLRef}\n            disabled={uiState === 'loading'}\n            // list=\"instances-list\"\n            autocorrect=\"off\"\n            autocapitalize=\"off\"\n            autocomplete=\"off\"\n            spellCheck={false}\n            placeholder=\"instance domain\"\n            onInput={(e) => {\n              setInstanceText(e.target.value);\n            }}\n          />\n          {instancesSuggestions?.length > 0 ? (\n            <ul id=\"instances-suggestions\">\n              {instancesSuggestions.map((instance, i) => (\n                <li>\n                  <button\n                    type=\"button\"\n                    class=\"plain5\"\n                    onClick={() => {\n                      submitInstance(instance);\n                    }}\n                  >\n                    {instance}\n                  </button>\n                </li>\n              ))}\n            </ul>\n          ) : (\n            <div id=\"instances-eg\">e.g. &ldquo;mastodon.social&rdquo;</div>\n          )}\n          {/* <datalist id=\"instances-list\">\n            {instancesList.map((instance) => (\n              <option value={instance} />\n            ))}\n          </datalist> */}\n        </label>\n        {uiState === 'error' && (\n          <p class=\"error\">\n            Failed to log in. Please try again or another instance.\n          </p>\n        )}\n        <div>\n          <button\n            disabled={\n              uiState === 'loading' || !instanceText || !selectedInstanceText\n            }\n          >\n            {selectedInstanceText\n              ? `Continue with ${selectedInstanceText}`\n              : 'Continue'}\n          </button>{' '}\n        </div>\n        <Loader hidden={uiState !== 'loading'} />\n        <hr />\n        {!DEFAULT_INSTANCE && (\n          <p>\n            <a href=\"https://joinmastodon.org/servers\" target=\"_blank\">\n              Don't have an account? Create one!\n            </a>\n          </p>\n        )}\n        <p>\n          <Link to=\"/\">Go home</Link>\n        </p>\n      </form>\n    </main>\n  );\n}\n\nexport default Login;\n","import { MenuDivider, MenuItem } from '@szhsin/react-menu';\nimport { getBlurHashAverageColor } from 'fast-blurhash';\nimport {\n  useEffect,\n  useLayoutEffect,\n  useMemo,\n  useRef,\n  useState,\n} from 'preact/hooks';\nimport { useHotkeys } from 'react-hotkeys-hook';\n\nimport { oklab2rgb, rgb2oklab } from '../utils/color-utils';\nimport showToast from '../utils/show-toast';\nimport states from '../utils/states';\n\nimport Icon from './icon';\nimport Link from './link';\nimport Media from './media';\nimport Menu2 from './menu2';\nimport MenuLink from './menu-link';\n\nconst { PHANPY_IMG_ALT_API_URL: IMG_ALT_API_URL } = import.meta.env;\n\nfunction MediaModal({\n  mediaAttachments,\n  statusID,\n  instance,\n  lang,\n  index = 0,\n  onClose = () => {},\n}) {\n  const [uiState, setUIState] = useState('default');\n  const carouselRef = useRef(null);\n\n  const [currentIndex, setCurrentIndex] = useState(index);\n  const carouselFocusItem = useRef(null);\n  useLayoutEffect(() => {\n    carouselFocusItem.current?.scrollIntoView();\n\n    // history.pushState({ mediaModal: true }, '');\n    // const handlePopState = (e) => {\n    //   if (e.state?.mediaModal) {\n    //     onClose();\n    //   }\n    // };\n    // window.addEventListener('popstate', handlePopState);\n    // return () => {\n    //   window.removeEventListener('popstate', handlePopState);\n    // };\n  }, []);\n  const prevStatusID = useRef(statusID);\n  useEffect(() => {\n    const scrollLeft = index * carouselRef.current.clientWidth;\n    const differentStatusID = prevStatusID.current !== statusID;\n    if (differentStatusID) prevStatusID.current = statusID;\n    carouselRef.current.scrollTo({\n      left: scrollLeft,\n      behavior: differentStatusID ? 'auto' : 'smooth',\n    });\n    carouselRef.current.focus();\n  }, [index, statusID]);\n\n  const [showControls, setShowControls] = useState(true);\n\n  useEffect(() => {\n    let handleSwipe = () => {\n      onClose();\n    };\n    if (carouselRef.current) {\n      carouselRef.current.addEventListener('swiped-down', handleSwipe);\n    }\n    return () => {\n      if (carouselRef.current) {\n        carouselRef.current.removeEventListener('swiped-down', handleSwipe);\n      }\n    };\n  }, []);\n\n  useHotkeys(\n    'esc',\n    onClose,\n    {\n      ignoreEventWhen: (e) => {\n        const hasModal = !!document.querySelector('#modal-container > *');\n        return hasModal;\n      },\n    },\n    [onClose],\n  );\n\n  useEffect(() => {\n    let handleScroll = () => {\n      const { clientWidth, scrollLeft } = carouselRef.current;\n      const index = Math.round(scrollLeft / clientWidth);\n      setCurrentIndex(index);\n    };\n    if (carouselRef.current) {\n      carouselRef.current.addEventListener('scroll', handleScroll, {\n        passive: true,\n      });\n    }\n    return () => {\n      if (carouselRef.current) {\n        carouselRef.current.removeEventListener('scroll', handleScroll);\n      }\n    };\n  }, []);\n\n  useEffect(() => {\n    let timer = setTimeout(() => {\n      carouselRef.current?.focus?.();\n    }, 100);\n    return () => clearTimeout(timer);\n  }, []);\n\n  const mediaAccentColors = useMemo(() => {\n    return mediaAttachments?.map((media) => {\n      const { blurhash } = media;\n      if (blurhash) {\n        const averageColor = getBlurHashAverageColor(blurhash);\n        const labAverageColor = rgb2oklab(averageColor);\n        return oklab2rgb([0.6, labAverageColor[1], labAverageColor[2]]);\n      }\n      return null;\n    });\n  }, [mediaAttachments]);\n  const mediaAccentGradient = useMemo(() => {\n    const gap = 5;\n    const range = 100 / mediaAccentColors.length;\n    return (\n      mediaAccentColors\n        ?.map((color, i) => {\n          const start = i * range + gap;\n          const end = (i + 1) * range - gap;\n          if (color) {\n            return `\n            rgba(${color?.join(',')}, 0.4) ${start}%,\n            rgba(${color?.join(',')}, 0.4) ${end}%\n          `;\n          }\n\n          return `\n            transparent ${start}%,\n            transparent ${end}%\n          `;\n        })\n        ?.join(', ') || 'transparent'\n    );\n  }, [mediaAccentColors]);\n\n  let toastRef = useRef(null);\n  useEffect(() => {\n    return () => {\n      toastRef.current?.hideToast?.();\n    };\n  }, []);\n\n  return (\n    <div\n      class={`media-modal-container media-modal-count-${mediaAttachments?.length}`}\n    >\n      <div\n        ref={carouselRef}\n        tabIndex=\"0\"\n        data-swipe-threshold=\"44\"\n        class=\"carousel\"\n        onClick={(e) => {\n          if (\n            e.target.classList.contains('carousel-item') ||\n            e.target.classList.contains('media') ||\n            e.target.classList.contains('media-zoom')\n          ) {\n            onClose();\n          }\n        }}\n        style={\n          mediaAttachments.length > 1\n            ? {\n                backgroundAttachment: 'local',\n                backgroundImage: `linear-gradient(\n            to right, ${mediaAccentGradient})`,\n              }\n            : {}\n        }\n      >\n        {mediaAttachments?.map((media, i) => {\n          const accentColor =\n            mediaAttachments.length === 1 ? mediaAccentColors[i] : null;\n          return (\n            <div\n              class=\"carousel-item\"\n              style={\n                accentColor\n                  ? {\n                      '--accent-color': `rgb(${accentColor?.join(',')})`,\n                      '--accent-alpha-color': `rgba(${accentColor?.join(\n                        ',',\n                      )}, 0.4)`,\n                    }\n                  : {}\n              }\n              tabindex=\"0\"\n              key={media.id}\n              ref={i === currentIndex ? carouselFocusItem : null}\n              onClick={(e) => {\n                // console.log(e);\n                // if (e.target !== e.currentTarget) {\n                //   setShowControls(!showControls);\n                // }\n                if (!e.target.classList.contains('media')) {\n                  setShowControls(!showControls);\n                }\n              }}\n            >\n              {!!media.description && (\n                <button\n                  type=\"button\"\n                  class=\"media-alt\"\n                  hidden={!showControls}\n                  onClick={() => {\n                    states.showMediaAlt = {\n                      alt: media.description,\n                      lang,\n                    };\n                  }}\n                >\n                  <span class=\"alt-badge\">ALT</span>\n                  <span class=\"media-alt-desc\" lang={lang} dir=\"auto\">\n                    {media.description}\n                  </span>\n                </button>\n              )}\n              <Media media={media} showOriginal lang={lang} />\n            </div>\n          );\n        })}\n      </div>\n      <div class=\"carousel-top-controls\" hidden={!showControls}>\n        <span>\n          <button\n            type=\"button\"\n            class=\"carousel-button\"\n            onClick={() => onClose()}\n          >\n            <Icon icon=\"x\" />\n          </button>\n        </span>\n        {mediaAttachments?.length > 1 ? (\n          <span class=\"carousel-dots\">\n            {mediaAttachments?.map((media, i) => (\n              <button\n                key={media.id}\n                type=\"button\"\n                disabled={i === currentIndex}\n                class={`carousel-dot ${i === currentIndex ? 'active' : ''}`}\n                onClick={(e) => {\n                  e.preventDefault();\n                  e.stopPropagation();\n                  carouselRef.current.scrollTo({\n                    left: carouselRef.current.clientWidth * i,\n                    behavior: 'smooth',\n                  });\n                  carouselRef.current.focus();\n                }}\n              >\n                <Icon icon=\"round\" size=\"s\" />\n              </button>\n            ))}\n          </span>\n        ) : (\n          <span />\n        )}\n        <span>\n          <Menu2\n            overflow=\"auto\"\n            align=\"end\"\n            position=\"anchor\"\n            gap={4}\n            menuClassName=\"glass-menu\"\n            menuButton={\n              <button type=\"button\" class=\"carousel-button\">\n                <Icon icon=\"more\" alt=\"More\" />\n              </button>\n            }\n          >\n            <MenuLink\n              href={\n                mediaAttachments[currentIndex]?.remoteUrl ||\n                mediaAttachments[currentIndex]?.url\n              }\n              class=\"carousel-button\"\n              target=\"_blank\"\n              title=\"Open original media in new window\"\n            >\n              <Icon icon=\"popout\" />\n              <span>Open original media</span>\n            </MenuLink>\n            {import.meta.env.DEV && // Only dev for now\n              !!states.settings.mediaAltGenerator &&\n              !!IMG_ALT_API_URL &&\n              !!mediaAttachments[currentIndex]?.url &&\n              !mediaAttachments[currentIndex]?.description &&\n              mediaAttachments[currentIndex]?.type === 'image' && (\n                <>\n                  <MenuDivider />\n                  <MenuItem\n                    disabled={uiState === 'loading'}\n                    onClick={() => {\n                      setUIState('loading');\n                      toastRef.current = showToast({\n                        text: 'Attempting to describe image. Please wait...',\n                        duration: -1,\n                      });\n                      (async function () {\n                        try {\n                          const response = await fetch(\n                            `${IMG_ALT_API_URL}?image=${encodeURIComponent(\n                              mediaAttachments[currentIndex]?.url,\n                            )}`,\n                          ).then((r) => r.json());\n                          states.showMediaAlt = {\n                            alt: response.description,\n                          };\n                        } catch (e) {\n                          console.error(e);\n                          showToast('Failed to describe image');\n                        } finally {\n                          setUIState('default');\n                          toastRef.current?.hideToast?.();\n                        }\n                      })();\n                    }}\n                  >\n                    <Icon icon=\"sparkles2\" />\n                    <span>Describe image…</span>\n                  </MenuItem>\n                </>\n              )}\n          </Menu2>{' '}\n          <Link\n            to={`${instance ? `/${instance}` : ''}/s/${statusID}${\n              window.matchMedia('(min-width: calc(40em + 350px))').matches\n                ? `?media=${currentIndex + 1}`\n                : ''\n            }`}\n            class=\"button carousel-button media-post-link\"\n            // onClick={() => {\n            //   // if small screen (not media query min-width 40em + 350px), run onClose\n            //   if (\n            //     !window.matchMedia('(min-width: calc(40em + 350px))').matches\n            //   ) {\n            //     onClose();\n            //   }\n            // }}\n          >\n            <span class=\"button-label\">View post </span>&raquo;\n          </Link>\n        </span>\n      </div>\n      {mediaAttachments?.length > 1 && (\n        <div class=\"carousel-controls\" hidden={!showControls}>\n          <button\n            type=\"button\"\n            class=\"carousel-button\"\n            hidden={currentIndex === 0}\n            onClick={(e) => {\n              e.preventDefault();\n              e.stopPropagation();\n              carouselRef.current.focus();\n              carouselRef.current.scrollTo({\n                left: carouselRef.current.clientWidth * (currentIndex - 1),\n                behavior: 'smooth',\n              });\n            }}\n          >\n            <Icon icon=\"arrow-left\" />\n          </button>\n          <button\n            type=\"button\"\n            class=\"carousel-button\"\n            hidden={currentIndex === mediaAttachments.length - 1}\n            onClick={(e) => {\n              e.preventDefault();\n              e.stopPropagation();\n              carouselRef.current.focus();\n              carouselRef.current.scrollTo({\n                left: carouselRef.current.clientWidth * (currentIndex + 1),\n                behavior: 'smooth',\n              });\n            }}\n          >\n            <Icon icon=\"arrow-right\" />\n          </button>\n        </div>\n      )}\n    </div>\n  );\n}\n\nexport default MediaModal;\n","import './status.css';\n\nimport { Menu, MenuDivider, MenuHeader, MenuItem } from '@szhsin/react-menu';\nimport debounce from 'just-debounce-it';\nimport pRetry from 'p-retry';\nimport { memo } from 'preact/compat';\nimport {\n  useCallback,\n  useEffect,\n  useLayoutEffect,\n  useMemo,\n  useRef,\n  useState,\n} from 'preact/hooks';\nimport { useHotkeys } from 'react-hotkeys-hook';\nimport { InView } from 'react-intersection-observer';\nimport { matchPath, useSearchParams } from 'react-router-dom';\nimport { useDebouncedCallback } from 'use-debounce';\nimport { useSnapshot } from 'valtio';\n\nimport Avatar from '../components/avatar';\nimport Icon from '../components/icon';\nimport Link from '../components/link';\nimport Loader from '../components/loader';\nimport MediaModal from '../components/media-modal';\nimport Menu2 from '../components/menu2';\nimport NameText from '../components/name-text';\nimport RelativeTime from '../components/relative-time';\nimport Status from '../components/status';\nimport { api } from '../utils/api';\nimport htmlContentLength from '../utils/html-content-length';\nimport shortenNumber from '../utils/shorten-number';\nimport states, {\n  getStatus,\n  saveStatus,\n  statusKey,\n  threadifyStatus,\n} from '../utils/states';\nimport statusPeek from '../utils/status-peek';\nimport { getCurrentAccount } from '../utils/store-utils';\nimport useScroll from '../utils/useScroll';\nimport useTitle from '../utils/useTitle';\n\nimport getInstanceStatusURL from './../utils/get-instance-status-url';\n\nconst LIMIT = 40;\nconst SUBCOMMENTS_OPEN_ALL_LIMIT = 10;\nconst MAX_WEIGHT = 5;\n\nlet cachedRepliesToggle = {};\nlet cachedStatusesMap = {};\nlet scrollPositions = {};\nfunction resetScrollPosition(id) {\n  delete cachedStatusesMap[id];\n  delete scrollPositions[id];\n}\n\nconst scrollIntoViewOptions = {\n  block: 'nearest',\n  inline: 'center',\n  behavior: 'smooth',\n};\n\n// Select all statuses except those inside collapsed details/summary\n// Hat-tip to @AmeliaBR@front-end.social\n// https://front-end.social/@AmeliaBR/109784776146144471\nconst STATUSES_SELECTOR =\n  '.status-link:not(details:not([open]) > summary ~ *, details:not([open]) > summary ~ * *), .status-focus:not(details:not([open]) > summary ~ *, details:not([open]) > summary ~ * *)';\n\nconst STATUS_URL_REGEX = /\\/s\\//i;\n\nfunction StatusPage(params) {\n  const { id } = params;\n  const { masto, instance } = api({ instance: params.instance });\n  const snapStates = useSnapshot(states);\n  const [searchParams, setSearchParams] = useSearchParams();\n  const mediaParam = searchParams.get('media');\n  const mediaOnlyParam = searchParams.get('media-only');\n  const mediaIndex = parseInt(mediaParam || mediaOnlyParam, 10);\n  let showMedia = mediaIndex > 0;\n  const mediaStatusID = searchParams.get('mediaStatusID');\n  const mediaStatus = getStatus(mediaStatusID, instance);\n  if (mediaStatusID && !mediaStatus) {\n    showMedia = false;\n  }\n  const showMediaOnly = showMedia && !!mediaOnlyParam;\n\n  const sKey = statusKey(id, instance);\n  const [heroStatus, setHeroStatus] = useState(states.statuses[sKey]);\n  useEffect(() => {\n    if (states.statuses[sKey]) {\n      setHeroStatus(states.statuses[sKey]);\n    }\n  }, [sKey]);\n\n  const closeLink = useMemo(() => {\n    const { prevLocation } = states;\n    const pathname =\n      (prevLocation?.pathname || '') + (prevLocation?.search || '');\n    const matchStatusPath =\n      matchPath('/:instance/s/:id', pathname) || matchPath('/s/:id', pathname);\n    if (!pathname || matchStatusPath) {\n      return '/';\n    }\n    return pathname;\n  }, []);\n\n  useEffect(() => {\n    if (!heroStatus && showMedia) {\n      (async () => {\n        try {\n          const status = await masto.v1.statuses.$select(id).fetch();\n          saveStatus(status, instance);\n          setHeroStatus(status);\n        } catch (err) {\n          console.error(err);\n          alert('Unable to load post.');\n          location.hash = closeLink;\n        }\n      })();\n    }\n  }, [showMedia]);\n\n  const mediaAttachments = mediaStatusID\n    ? mediaStatus?.mediaAttachments\n    : heroStatus?.mediaAttachments;\n\n  const handleMediaClose = useCallback(() => {\n    if (\n      !window.matchMedia('(min-width: calc(40em + 350px))').matches &&\n      snapStates.prevLocation\n    ) {\n      history.back();\n    } else {\n      if (showMediaOnly) {\n        location.hash = closeLink;\n      } else {\n        searchParams.delete('media');\n        searchParams.delete('mediaStatusID');\n        setSearchParams(searchParams);\n      }\n    }\n  }, [showMediaOnly, closeLink, snapStates.prevLocation]);\n\n  useEffect(() => {\n    let timer = setTimeout(() => {\n      // carouselRef.current?.focus?.();\n      const $carousel = document.querySelector('.carousel');\n      if ($carousel) {\n        $carousel.focus();\n      }\n    }, 100);\n    return () => clearTimeout(timer);\n  }, [showMediaOnly]);\n\n  return (\n    <div class=\"deck-backdrop\">\n      {showMedia ? (\n        mediaAttachments?.length ? (\n          <MediaModal\n            mediaAttachments={mediaAttachments}\n            statusID={mediaStatusID || id}\n            instance={instance}\n            lang={heroStatus?.language}\n            index={mediaIndex - 1}\n            onClose={handleMediaClose}\n          />\n        ) : (\n          <div class=\"media-modal-container loading\">\n            <Loader abrupt />\n          </div>\n        )\n      ) : (\n        <Link to={closeLink} />\n      )}\n      {!showMediaOnly && (\n        <StatusThread\n          id={id}\n          instance={params.instance}\n          closeLink={closeLink}\n        />\n      )}\n    </div>\n  );\n}\n\nfunction StatusParent(props) {\n  const { linkable, to, onClick, ...restProps } = props;\n  return linkable ? (\n    <Link class=\"status-link\" to={to} onClick={onClick} {...restProps} />\n  ) : (\n    <div class=\"status-focus\" tabIndex={0} {...restProps} />\n  );\n}\n\nfunction StatusThread({ id, closeLink = '/', instance: propInstance }) {\n  const [searchParams, setSearchParams] = useSearchParams();\n  const mediaParam = searchParams.get('media');\n  const mediaStatusID = searchParams.get('mediaStatusID');\n  const showMedia = parseInt(mediaParam, 10) > 0;\n  const firstLoad = useRef(\n    !states.prevLocation &&\n      (history.length === 1 ||\n        ('navigation' in window && navigation?.entries?.()?.length === 1)),\n  );\n  const [viewMode, setViewMode] = useState(\n    searchParams.get('view') || firstLoad.current ? 'full' : null,\n  );\n  const translate = !!parseInt(searchParams.get('translate'));\n  const { masto, instance } = api({ instance: propInstance });\n  const {\n    masto: currentMasto,\n    instance: currentInstance,\n    authenticated,\n  } = api();\n  const sameInstance = instance === currentInstance;\n  const snapStates = useSnapshot(states);\n  const [statuses, setStatuses] = useState([]);\n  const [uiState, setUIState] = useState('default');\n  const heroStatusRef = useRef();\n  const sKey = statusKey(id, instance);\n  const totalDescendants = useRef(0);\n\n  const scrollableRef = useRef();\n  useEffect(() => {\n    scrollableRef.current?.focus();\n  }, []);\n  useEffect(() => {\n    const onScroll = debounce(() => {\n      // console.log('onScroll');\n      if (!scrollableRef.current) return;\n      const { scrollTop } = scrollableRef.current;\n      if (uiState !== 'loading') {\n        scrollPositions[id] = scrollTop;\n      }\n    }, 50);\n    scrollableRef.current?.addEventListener('scroll', onScroll, {\n      passive: true,\n    });\n    onScroll();\n    return () => {\n      onScroll.cancel();\n      scrollableRef.current?.removeEventListener('scroll', onScroll);\n    };\n  }, [id, uiState !== 'loading']);\n\n  const scrollOffsets = useRef();\n  const lastInitContextTS = useRef();\n  const initContext = ({ reloadHero } = {}) => {\n    console.debug('initContext', id);\n    setUIState('loading');\n    let heroTimer;\n\n    const cachedStatuses = cachedStatusesMap[id];\n    if (cachedStatuses) {\n      // Case 1: It's cached, let's restore them to make it snappy\n      const reallyCachedStatuses = cachedStatuses.filter(\n        (s) => states.statuses[sKey],\n        // Some are not cached in the global state, so we need to filter them out\n      );\n      setStatuses(reallyCachedStatuses);\n    } else {\n      // const heroIndex = statuses.findIndex((s) => s.id === id);\n      // if (heroIndex !== -1) {\n      //   // Case 2: It's in current statuses. Slice off all descendant statuses after the hero status to be safe\n      //   const slicedStatuses = statuses.slice(0, heroIndex + 1);\n      //   setStatuses(slicedStatuses);\n      // } else {\n      // Case 3: Not cached and not in statuses, let's start from scratch\n      setStatuses([{ id }]);\n      // }\n    }\n\n    (async () => {\n      const heroFetch = () =>\n        pRetry(() => masto.v1.statuses.$select(id).fetch(), {\n          retries: 4,\n        });\n      const contextFetch = pRetry(\n        () => masto.v1.statuses.$select(id).context.fetch(),\n        {\n          retries: 8,\n        },\n      );\n\n      const hasStatus = !!snapStates.statuses[sKey];\n      let heroStatus = snapStates.statuses[sKey];\n      if (hasStatus && !reloadHero) {\n        console.debug('Hero status is cached');\n      } else {\n        try {\n          heroStatus = await heroFetch();\n          saveStatus(heroStatus, instance);\n          // Give time for context to appear\n          await new Promise((resolve) => {\n            setTimeout(resolve, 100);\n          });\n        } catch (e) {\n          console.error(e);\n          setUIState('error');\n          return;\n        }\n      }\n\n      try {\n        const context = await contextFetch;\n        const { ancestors, descendants } = context;\n\n        totalDescendants.current = descendants?.length || 0;\n\n        const missingStatuses = new Set();\n        ancestors.forEach((status) => {\n          saveStatus(status, instance, {\n            skipThreading: true,\n          });\n          if (\n            status.inReplyToId &&\n            !ancestors.find((s) => s.id === status.inReplyToId)\n          ) {\n            missingStatuses.add(status.inReplyToId);\n          }\n        });\n        const ancestorsIsThread = ancestors.every(\n          (s) => s.account.id === heroStatus.account.id,\n        );\n        const nestedDescendants = [];\n        descendants.forEach((status) => {\n          saveStatus(status, instance, {\n            skipThreading: true,\n          });\n\n          if (\n            status.inReplyToId &&\n            !descendants.find((s) => s.id === status.inReplyToId) &&\n            status.inReplyToId !== heroStatus.id\n          ) {\n            missingStatuses.add(status.inReplyToId);\n          }\n\n          if (status.inReplyToAccountId === status.account.id) {\n            // If replying to self, it's part of the thread, level 1\n            nestedDescendants.push(status);\n          } else if (status.inReplyToId === heroStatus.id) {\n            // If replying to the hero status, it's a reply, level 1\n            nestedDescendants.push(status);\n          } else if (\n            !status.inReplyToAccountId &&\n            nestedDescendants.find((s) => s.id === status.inReplyToId) &&\n            status.account.id === heroStatus.account.id\n          ) {\n            // If replying to hero's own statuses, it's part of the thread, level 1\n            nestedDescendants.push(status);\n          } else {\n            // If replying to someone else, it's a reply to a reply, level 2\n            const parent = descendants.find((s) => s.id === status.inReplyToId);\n            if (parent) {\n              if (!parent.__replies) {\n                parent.__replies = [];\n              }\n              parent.__replies.push(status);\n            } else {\n              // If no parent, something is wrong\n              console.warn('No parent found for', status);\n            }\n          }\n        });\n\n        console.log({ ancestors, descendants, nestedDescendants });\n        if (missingStatuses.size) {\n          console.error('Missing statuses', [...missingStatuses]);\n        }\n\n        function expandReplies(_replies) {\n          return _replies?.map((_r) => ({\n            id: _r.id,\n            account: _r.account,\n            repliesCount: _r.repliesCount,\n            content: _r.content,\n            weight: calcStatusWeight(_r),\n            replies: expandReplies(_r.__replies),\n          }));\n        }\n\n        const allStatuses = [\n          ...ancestors.map((s) => ({\n            id: s.id,\n            ancestor: true,\n            isThread: ancestorsIsThread,\n            accountID: s.account.id,\n            account: s.account,\n            repliesCount: s.repliesCount,\n            weight: calcStatusWeight(s),\n          })),\n          {\n            id,\n            accountID: heroStatus.account.id,\n            weight: calcStatusWeight(heroStatus),\n          },\n          ...nestedDescendants.map((s) => ({\n            id: s.id,\n            account: s.account,\n            accountID: s.account.id,\n            descendant: true,\n            thread: s.account.id === heroStatus.account.id,\n            weight: calcStatusWeight(s),\n            replies: expandReplies(s.__replies),\n          })),\n        ];\n\n        setUIState('default');\n        scrollOffsets.current = {\n          offsetTop: heroStatusRef.current?.offsetTop,\n          scrollTop: scrollableRef.current?.scrollTop,\n        };\n\n        // Set limit to hero's index\n        const heroLimit = allStatuses.findIndex((s) => s.id === id);\n        if (heroLimit >= limit) {\n          setLimit(heroLimit + 1);\n        }\n\n        console.log({ allStatuses });\n        setStatuses(allStatuses);\n        cachedStatusesMap[id] = allStatuses;\n\n        // Let's threadify this one\n        // Note that all non-hero statuses will trigger saveStatus which will threadify them too\n        // By right, at this point, all descendant statuses should be cached\n        threadifyStatus(heroStatus, instance);\n      } catch (e) {\n        console.error(e);\n        setUIState('error');\n      }\n    })();\n\n    lastInitContextTS.current = Date.now();\n\n    return () => {\n      clearTimeout(heroTimer);\n    };\n  };\n\n  useEffect(initContext, [id, masto]);\n\n  const [showRefresh, setShowRefresh] = useState(false);\n  useEffect(() => {\n    let interval = setInterval(() => {\n      const now = Date.now();\n      if (\n        lastInitContextTS.current &&\n        now - lastInitContextTS.current >= 60_000\n      ) {\n        setShowRefresh(true);\n      }\n    }, 60_000); // 1 minute\n    return () => {\n      clearInterval(interval);\n    };\n  }, []);\n\n  useLayoutEffect(() => {\n    if (!statuses.length) return;\n    console.debug('STATUSES', statuses);\n    const scrollPosition = scrollPositions[id];\n    console.debug('scrollPosition', scrollPosition);\n    if (!!scrollPosition) {\n      console.debug('Case 1', {\n        id,\n        scrollPosition,\n      });\n      scrollableRef.current.scrollTop = scrollPosition;\n    } else if (scrollOffsets.current) {\n      const newScrollOffsets = {\n        offsetTop: heroStatusRef.current?.offsetTop,\n        scrollTop: scrollableRef.current?.scrollTop,\n      };\n      const newScrollTop =\n        newScrollOffsets.offsetTop -\n        scrollOffsets.current.offsetTop +\n        newScrollOffsets.scrollTop;\n      console.debug('Case 2', {\n        scrollOffsets: scrollOffsets.current,\n        newScrollOffsets,\n        newScrollTop,\n        statuses: [...statuses],\n      });\n      scrollableRef.current.scrollTop = newScrollTop;\n    } else if (statuses.length === 1) {\n      console.debug('Case 3', {\n        id,\n      });\n      scrollableRef.current.scrollTop = 0;\n    }\n\n    // RESET\n    scrollOffsets.current = null;\n  }, [statuses]);\n\n  useEffect(() => {\n    if (snapStates.reloadStatusPage <= 0) return;\n    // Delete the cache for the context\n    (async () => {\n      try {\n        const { instanceURL } = getCurrentAccount();\n        const contextURL = `https://${instanceURL}/api/v1/statuses/${id}/context`;\n        console.log('Clear cache', contextURL);\n        const apiCache = await caches.open('api');\n        await apiCache.delete(contextURL, { ignoreVary: true });\n\n        return initContext({\n          reloadHero: true,\n        });\n      } catch (e) {\n        console.error(e);\n      }\n    })();\n  }, [snapStates.reloadStatusPage]);\n\n  useEffect(() => {\n    return () => {\n      // RESET\n      scrollPositions = {};\n      states.reloadStatusPage = 0;\n      cachedStatusesMap = {};\n      cachedRepliesToggle = {};\n      statusWeightCache.clear();\n    };\n  }, []);\n\n  const heroStatus = snapStates.statuses[sKey] || snapStates.statuses[id];\n  const heroDisplayName = useMemo(() => {\n    // Remove shortcodes from display name\n    if (!heroStatus) return '';\n    const { account } = heroStatus;\n    const div = document.createElement('div');\n    div.innerHTML = account.displayName;\n    return div.innerText.trim();\n  }, [heroStatus]);\n  const heroContentText = useMemo(() => {\n    if (!heroStatus) return '';\n    let text = statusPeek(heroStatus);\n    if (text.length > 64) {\n      // \"The title should ideally be less than 64 characters in length\"\n      // https://www.w3.org/Provider/Style/TITLE.html\n      text = text.slice(0, 64) + '…';\n    }\n    return text;\n  }, [heroStatus]);\n  useTitle(\n    heroDisplayName && heroContentText\n      ? `${heroDisplayName}: \"${heroContentText}\"`\n      : 'Status',\n    '/:instance?/s/:id',\n  );\n\n  const postInstance = useMemo(() => {\n    if (!heroStatus) return;\n    const { url } = heroStatus;\n    if (!url) return;\n    return new URL(url).hostname;\n  }, [heroStatus]);\n  const postSameInstance = useMemo(() => {\n    if (!postInstance) return;\n    return postInstance === instance;\n  }, [postInstance, instance]);\n\n  const [limit, setLimit] = useState(LIMIT);\n  const showMore = useMemo(() => {\n    // return number of statuses to show\n    return statuses.length - limit;\n  }, [statuses.length, limit]);\n\n  const hasDescendants = statuses.some((s) => s.descendant);\n  const ancestors = statuses.filter((s) => s.ancestor);\n\n  const [heroInView, setHeroInView] = useState(true);\n  const heroPointer = useMemo(() => {\n    // get top offset of heroStatus\n    if (!heroStatusRef.current || heroInView) return null;\n    const { top } = heroStatusRef.current.getBoundingClientRect();\n    return top > 0 ? 'down' : 'up';\n  }, [heroInView]);\n\n  useHotkeys(\n    'esc',\n    () => {\n      location.hash = closeLink;\n    },\n    {\n      // If media is open, esc to close media first\n      // Else close the status page\n      enabled: !showMedia,\n      ignoreEventWhen: (e) => {\n        const hasModal = !!document.querySelector('#modal-container > *');\n        return hasModal;\n      },\n    },\n  );\n  // For backspace, will always close both media and status page\n  useHotkeys('backspace', () => {\n    location.hash = closeLink;\n  });\n\n  useHotkeys('j', () => {\n    const activeStatus = document.activeElement.closest(\n      '.status-link, .status-focus',\n    );\n    const activeStatusRect = activeStatus?.getBoundingClientRect();\n    const allStatusLinks = Array.from(\n      scrollableRef.current.querySelectorAll(STATUSES_SELECTOR),\n    );\n    console.log({ allStatusLinks });\n    if (\n      activeStatus &&\n      activeStatusRect.top < scrollableRef.current.clientHeight &&\n      activeStatusRect.bottom > 0\n    ) {\n      const activeStatusIndex = allStatusLinks.indexOf(activeStatus);\n      let nextStatus = allStatusLinks[activeStatusIndex + 1];\n      if (nextStatus) {\n        nextStatus.focus();\n        nextStatus.scrollIntoView(scrollIntoViewOptions);\n      }\n    } else {\n      // If active status is not in viewport, get the topmost status-link in viewport\n      const topmostStatusLink = allStatusLinks.find((statusLink) => {\n        const statusLinkRect = statusLink.getBoundingClientRect();\n        return statusLinkRect.top >= 44 && statusLinkRect.left >= 0; // 44 is the magic number for header height, not real\n      });\n      if (topmostStatusLink) {\n        topmostStatusLink.focus();\n        topmostStatusLink.scrollIntoView(scrollIntoViewOptions);\n      }\n    }\n  });\n\n  useHotkeys('k', () => {\n    const activeStatus = document.activeElement.closest(\n      '.status-link, .status-focus',\n    );\n    const activeStatusRect = activeStatus?.getBoundingClientRect();\n    const allStatusLinks = Array.from(\n      scrollableRef.current.querySelectorAll(STATUSES_SELECTOR),\n    );\n    if (\n      activeStatus &&\n      activeStatusRect.top < scrollableRef.current.clientHeight &&\n      activeStatusRect.bottom > 0\n    ) {\n      const activeStatusIndex = allStatusLinks.indexOf(activeStatus);\n      let prevStatus = allStatusLinks[activeStatusIndex - 1];\n      if (prevStatus) {\n        prevStatus.focus();\n        prevStatus.scrollIntoView(scrollIntoViewOptions);\n      }\n    } else {\n      // If active status is not in viewport, get the topmost status-link in viewport\n      const topmostStatusLink = allStatusLinks.find((statusLink) => {\n        const statusLinkRect = statusLink.getBoundingClientRect();\n        return statusLinkRect.top >= 44 && statusLinkRect.left >= 0; // 44 is the magic number for header height, not real\n      });\n      if (topmostStatusLink) {\n        topmostStatusLink.focus();\n        topmostStatusLink.scrollIntoView(scrollIntoViewOptions);\n      }\n    }\n  });\n\n  // NOTE: I'm not sure if 'x' is the best shortcut for this, might change it later\n  // IDEA: x is for expand\n  useHotkeys('x', () => {\n    const activeStatus = document.activeElement.closest(\n      '.status-link, .status-focus',\n    );\n    if (activeStatus) {\n      const details = activeStatus.nextElementSibling;\n      if (details && details.tagName.toLowerCase() === 'details') {\n        details.open = !details.open;\n      }\n    }\n  });\n\n  const [reachTopPost, setReachTopPost] = useState(false);\n  // const { nearReachStart } = useScroll({\n  //   scrollableRef,\n  //   distanceFromStartPx: 16,\n  // });\n\n  const initialPageState = useRef(showMedia ? 'media+status' : 'status');\n\n  const handleMediaClick = useCallback(\n    (e, i, media, status) => {\n      e.preventDefault();\n      e.stopPropagation();\n      setSearchParams({\n        media: i + 1,\n        mediaStatusID: status.id,\n      });\n    },\n    [id],\n  );\n\n  const handleStatusLinkClick = useCallback((e, status) => {\n    resetScrollPosition(status.id);\n  }, []);\n\n  useEffect(() => {\n    let timer;\n    if (mediaStatusID && showMedia) {\n      timer = setTimeout(() => {\n        const status = scrollableRef.current?.querySelector(\n          `.status-link[href*=\"/${mediaStatusID}\"]`,\n        );\n        if (status) {\n          status.scrollIntoView(scrollIntoViewOptions);\n        }\n      }, 400); // After CSS transition\n    }\n    return () => {\n      clearTimeout(timer);\n    };\n  }, [mediaStatusID, showMedia]);\n\n  const renderStatus = useCallback(\n    (status, i) => {\n      const {\n        id: statusID,\n        ancestor,\n        isThread,\n        descendant,\n        thread,\n        replies,\n        repliesCount,\n        weight,\n      } = status;\n      const isHero = statusID === id;\n      const isLinkable = isThread || ancestor;\n\n      return (\n        <li\n          key={statusID}\n          ref={isHero ? heroStatusRef : null}\n          class={`${ancestor ? 'ancestor' : ''} ${\n            descendant ? 'descendant' : ''\n          } ${thread ? 'thread' : ''} ${isHero ? 'hero' : ''}`}\n        >\n          {isHero ? (\n            <>\n              <InView\n                threshold={0.1}\n                onChange={(inView) => {\n                  queueMicrotask(() => {\n                    requestAnimationFrame(() => {\n                      setHeroInView(inView);\n                    });\n                  });\n                }}\n                class=\"status-focus\"\n                tabIndex={0}\n              >\n                <Status\n                  statusID={statusID}\n                  instance={instance}\n                  withinContext\n                  size=\"l\"\n                  enableTranslate\n                  forceTranslate={translate}\n                />\n              </InView>\n              {uiState !== 'loading' && !authenticated ? (\n                <div class=\"post-status-banner\">\n                  <p>\n                    You're not logged in. Interactions (reply, boost, etc) are\n                    not possible.\n                  </p>\n                  <Link to=\"/login\" class=\"button\">\n                    Log in\n                  </Link>\n                </div>\n              ) : (\n                !sameInstance && (\n                  <div class=\"post-status-banner\">\n                    <p>\n                      This post is from another instance (<b>{instance}</b>).\n                      Interactions (reply, boost, etc) are not possible.\n                    </p>\n                    <button\n                      type=\"button\"\n                      disabled={uiState === 'loading'}\n                      onClick={() => {\n                        setUIState('loading');\n                        (async () => {\n                          try {\n                            const results = await currentMasto.v2.search.fetch({\n                              q: heroStatus.url,\n                              type: 'statuses',\n                              resolve: true,\n                              limit: 1,\n                            });\n                            if (results.statuses.length) {\n                              const status = results.statuses[0];\n                              location.hash = currentInstance\n                                ? `/${currentInstance}/s/${status.id}`\n                                : `/s/${status.id}`;\n                            } else {\n                              throw new Error('No results');\n                            }\n                          } catch (e) {\n                            setUIState('default');\n                            alert('Error: ' + e);\n                            console.error(e);\n                          }\n                        })();\n                      }}\n                    >\n                      <Icon icon=\"transfer\" /> Switch to my instance to enable\n                      interactions\n                    </button>\n                  </div>\n                )\n              )}\n            </>\n          ) : (\n            <StatusParent\n              linkable={isLinkable}\n              to={instance ? `/${instance}/s/${statusID}` : `/s/${statusID}`}\n              onClick={() => {\n                resetScrollPosition(statusID);\n              }}\n            >\n              {/* <Link\n              class=\"status-link\"\n              to={instance ? `/${instance}/s/${statusID}` : `/s/${statusID}`}\n              onClick={() => {\n                resetScrollPosition(statusID);\n              }}\n            > */}\n              {i === 0 && ancestor ? (\n                <InView\n                  threshold={0.5}\n                  onChange={(inView) => {\n                    queueMicrotask(() => {\n                      requestAnimationFrame(() => {\n                        setReachTopPost(inView);\n                      });\n                    });\n                  }}\n                >\n                  <Status\n                    statusID={statusID}\n                    instance={instance}\n                    withinContext\n                    size={thread || ancestor ? 'm' : 's'}\n                    enableTranslate\n                    onMediaClick={handleMediaClick}\n                    onStatusLinkClick={handleStatusLinkClick}\n                  />\n                </InView>\n              ) : (\n                <Status\n                  statusID={statusID}\n                  instance={instance}\n                  withinContext\n                  size={thread || ancestor ? 'm' : 's'}\n                  enableTranslate\n                  onMediaClick={handleMediaClick}\n                  onStatusLinkClick={handleStatusLinkClick}\n                  showActionsBar={!!descendant}\n                />\n              )}\n              {ancestor && repliesCount > 1 && (\n                <div class=\"replies-link\">\n                  <Icon icon=\"comment2\" />{' '}\n                  <span title={repliesCount}>\n                    {shortenNumber(repliesCount)}\n                  </span>\n                </div>\n              )}{' '}\n              {/* {replies?.length > LIMIT && (\n                        <div class=\"replies-link\">\n                          <Icon icon=\"comment\" />{' '}\n                          <span title={replies.length}>\n                            {shortenNumber(replies.length)}\n                          </span>\n                        </div>\n                      )} */}\n            </StatusParent>\n            // </Link>\n          )}\n          {descendant && replies?.length > 0 && (\n            <SubComments\n              instance={instance}\n              replies={replies}\n              hasParentThread={thread}\n              level={1}\n              accWeight={weight}\n              openAll={totalDescendants.current < SUBCOMMENTS_OPEN_ALL_LIMIT}\n              parentLink={{\n                to: instance ? `/${instance}/s/${statusID}` : `/s/${statusID}`,\n                onClick: () => resetScrollPosition(statusID),\n              }}\n            />\n          )}\n          {uiState === 'loading' &&\n            isHero &&\n            !!heroStatus?.repliesCount &&\n            !hasDescendants && (\n              <div class=\"status-loading\">\n                <Loader abrupt={heroStatus.repliesCount >= 3} />\n              </div>\n            )}\n          {uiState === 'error' &&\n            isHero &&\n            !!heroStatus?.repliesCount &&\n            !hasDescendants && (\n              <div class=\"status-error\">\n                Unable to load replies.\n                <br />\n                <button\n                  type=\"button\"\n                  class=\"plain\"\n                  onClick={() => {\n                    states.reloadStatusPage++;\n                  }}\n                >\n                  Try again\n                </button>\n              </div>\n            )}\n        </li>\n      );\n    },\n    [\n      id,\n      instance,\n      uiState,\n      authenticated,\n      sameInstance,\n      translate,\n      handleMediaClick,\n      handleStatusLinkClick,\n      hasDescendants,\n    ],\n  );\n\n  const prevLocationIsStatusPage = useMemo(() => {\n    // Navigation API\n    if ('navigation' in window && navigation?.entries) {\n      const prevEntry = navigation.entries()[navigation.currentEntry.index - 1];\n      if (prevEntry?.url) {\n        return STATUS_URL_REGEX.test(prevEntry.url);\n      }\n    }\n    return STATUS_URL_REGEX.test(states.prevLocation?.pathname);\n  }, [sKey]);\n\n  const moreStatusesKeys = useMemo(() => {\n    if (!showMore) return [];\n    const ids = [];\n    function getIDs(status) {\n      ids.push(status.id);\n      if (status.replies) {\n        status.replies.forEach(getIDs);\n      }\n    }\n    statuses.slice(limit).forEach(getIDs);\n    return ids.map((id) => statusKey(id, instance));\n  }, [showMore, statuses, limit, instance]);\n\n  const statusesList = useMemo(\n    () => statuses.slice(0, limit).map(renderStatus),\n    [statuses, limit, renderStatus],\n  );\n\n  return (\n    <div\n      tabIndex=\"-1\"\n      ref={scrollableRef}\n      class={`status-deck deck contained ${\n        statuses.length > 1 ? 'padded-bottom' : ''\n      } ${\n        initialPageState.current === 'status' && !firstLoad.current\n          ? 'slide-in'\n          : ''\n      } ${viewMode ? `deck-view-${viewMode}` : ''}`}\n      onAnimationEnd={(e) => {\n        // Fix the bounce effect when switching viewMode\n        // `slide-in` animation kicks in when switching viewMode\n        if (initialPageState.current === 'status') {\n          // e.target.classList.remove('slide-in');\n          initialPageState.current = null;\n        }\n      }}\n    >\n      <header\n        class={`${uiState === 'loading' ? 'loading' : ''}`}\n        onDblClick={(e) => {\n          // reload statuses\n          states.reloadStatusPage++;\n        }}\n      >\n        {/* <div>\n            <Link class=\"button plain deck-close\" href={closeLink}>\n              <Icon icon=\"chevron-left\" size=\"xl\" />\n            </Link>\n          </div> */}\n        <div class=\"header-grid header-grid-2\">\n          <h1>\n            {prevLocationIsStatusPage && (\n              <button\n                type=\"button\"\n                class=\"plain deck-back\"\n                onClick={() => {\n                  history.back();\n                }}\n              >\n                <Icon icon=\"chevron-left\" size=\"xl\" />\n              </button>\n            )}\n            {!heroInView && heroStatus && uiState !== 'loading' ? (\n              <>\n                <span class=\"hero-heading\">\n                  <NameText\n                    account={heroStatus.account}\n                    instance={instance}\n                    showAvatar\n                    short\n                  />{' '}\n                  <span class=\"insignificant\">\n                    &bull;{' '}\n                    <RelativeTime\n                      datetime={heroStatus.createdAt}\n                      format=\"micro\"\n                    />\n                  </span>\n                </span>{' '}\n                <button\n                  type=\"button\"\n                  class=\"ancestors-indicator light small\"\n                  onClick={(e) => {\n                    e.preventDefault();\n                    e.stopPropagation();\n                    heroStatusRef.current.scrollIntoView({\n                      behavior: 'smooth',\n                      block: 'start',\n                    });\n                  }}\n                  title=\"Go to main post\"\n                >\n                  <Icon\n                    icon={heroPointer === 'down' ? 'arrow-down' : 'arrow-up'}\n                  />\n                </button>\n              </>\n            ) : (\n              <>\n                Post{' '}\n                <button\n                  type=\"button\"\n                  class=\"ancestors-indicator light small\"\n                  onClick={(e) => {\n                    // Scroll to top\n                    e.preventDefault();\n                    e.stopPropagation();\n                    scrollableRef.current.scrollTo({\n                      top: 0,\n                      behavior: 'smooth',\n                    });\n                  }}\n                  hidden={!ancestors.length || reachTopPost}\n                  title={`${ancestors.length} posts above ‒ Go to top`}\n                >\n                  <Icon icon=\"arrow-up\" />\n                  {ancestors\n                    .filter(\n                      (a, i, arr) =>\n                        arr.findIndex((b) => b.accountID === a.accountID) === i,\n                    )\n                    .slice(0, 3)\n                    .map((ancestor) => (\n                      <Avatar\n                        key={ancestor.account.id}\n                        url={ancestor.account.avatar}\n                        alt={ancestor.account.displayName}\n                      />\n                    ))}\n                  {/* <Icon icon=\"comment\" />{' '} */}\n                  {ancestors.length > 3 && (\n                    <>\n                      {' '}\n                      <span class=\"insignificant\">\n                        {shortenNumber(ancestors.length)}\n                      </span>\n                    </>\n                  )}\n                </button>\n              </>\n            )}\n          </h1>\n          <div class=\"header-side\">\n            <button\n              type=\"button\"\n              class=\"plain4 button-switch-view\"\n              style={{\n                display: viewMode === 'full' ? '' : 'none',\n              }}\n              onClick={() => {\n                setViewMode(null);\n                searchParams.delete('media');\n                searchParams.delete('media-only');\n                searchParams.delete('view');\n                setSearchParams(searchParams);\n              }}\n              title=\"Switch to Side Peek view\"\n            >\n              <Icon icon=\"layout4\" size=\"l\" />\n            </button>\n            {showRefresh && (\n              <button\n                type=\"button\"\n                class=\"plain button-refresh\"\n                onClick={() => {\n                  states.reloadStatusPage++;\n                  setShowRefresh(false);\n                }}\n              >\n                <Icon icon=\"refresh\" size=\"l\" />\n              </button>\n            )}\n            <Menu2\n              align=\"end\"\n              portal={{\n                // Need this, else the menu click will cause scroll jump\n                target: scrollableRef.current,\n              }}\n              menuButton={\n                <button type=\"button\" class=\"button plain4\">\n                  <Icon icon=\"more\" alt=\"Actions\" size=\"xl\" />\n                </button>\n              }\n            >\n              <MenuItem\n                disabled={uiState === 'loading'}\n                onClick={() => {\n                  states.reloadStatusPage++;\n                }}\n              >\n                <Icon icon=\"refresh\" />\n                <span>Refresh</span>\n              </MenuItem>\n              <MenuItem\n                className=\"menu-switch-view\"\n                onClick={() => {\n                  setViewMode(viewMode === 'full' ? null : 'full');\n                  searchParams.delete('media');\n                  searchParams.delete('media-only');\n                  if (viewMode === 'full') {\n                    searchParams.delete('view');\n                  } else {\n                    searchParams.set('view', 'full');\n                  }\n                  setSearchParams(searchParams);\n                }}\n              >\n                <Icon\n                  icon={\n                    {\n                      '': 'layout5',\n                      full: 'layout4',\n                    }[viewMode || '']\n                  }\n                />\n                <span>\n                  Switch to {viewMode === 'full' ? 'Side Peek' : 'Full'} view\n                </span>\n              </MenuItem>\n              <MenuItem\n                onClick={() => {\n                  // Click all buttons with class .spoiler but not .spoiling\n                  const buttons = Array.from(\n                    scrollableRef.current.querySelectorAll(\n                      '.spoiler-button:not(.spoiling), .spoiler-media-button:not(.spoiling)',\n                    ),\n                  );\n                  buttons.forEach((button) => {\n                    button.click();\n                  });\n                }}\n              >\n                <Icon icon=\"eye-open\" /> <span>Show all sensitive content</span>\n              </MenuItem>\n              <MenuDivider />\n              <MenuHeader className=\"plain\">Experimental</MenuHeader>\n              <MenuItem\n                disabled={!postInstance || postSameInstance}\n                onClick={() => {\n                  const statusURL = getInstanceStatusURL(heroStatus.url);\n                  if (statusURL) {\n                    location.hash = statusURL;\n                  } else {\n                    alert('Unable to switch');\n                  }\n                }}\n              >\n                <Icon icon=\"transfer\" />\n                <small class=\"menu-double-lines\">\n                  Switch to post's instance\n                  {postInstance ? (\n                    <>\n                      {' '}\n                      (<b>{postInstance}</b>)\n                    </>\n                  ) : (\n                    ''\n                  )}\n                </small>\n              </MenuItem>\n            </Menu2>\n            <Link class=\"button plain deck-close\" to={closeLink}>\n              <Icon icon=\"x\" size=\"xl\" />\n            </Link>\n          </div>\n        </div>\n      </header>\n      {!!statuses.length && heroStatus ? (\n        <ul\n          class={`timeline flat contextual grow ${\n            uiState === 'loading' ? 'loading' : ''\n          }`}\n        >\n          {statusesList}\n          {showMore > 0 && (\n            <li>\n              <button\n                type=\"button\"\n                class=\"plain block show-more\"\n                disabled={uiState === 'loading'}\n                onClick={() => setLimit((l) => l + LIMIT)}\n                style={{ marginBlockEnd: '6em' }}\n                data-state-post-ids={moreStatusesKeys.join(' ')}\n              >\n                <div class=\"ib avatars-bunch\">\n                  {/* show avatars for first 5 statuses */}\n                  {statuses.slice(limit, limit + 5).map((status) => (\n                    <Avatar\n                      key={status.id}\n                      url={status.account.avatarStatic}\n                      // title={`${status.avatar.displayName} (@${status.avatar.acct})`}\n                    />\n                  ))}\n                </div>{' '}\n                <div class=\"ib\">\n                  Show more&hellip;{' '}\n                  <span class=\"tag\">\n                    {showMore > LIMIT ? `${LIMIT}+` : showMore}\n                  </span>\n                </div>\n              </button>\n            </li>\n          )}\n        </ul>\n      ) : (\n        <>\n          {uiState === 'loading' && (\n            <ul class=\"timeline flat contextual grow loading\">\n              <li>\n                <Status skeleton size=\"l\" />\n              </li>\n            </ul>\n          )}\n          {uiState === 'error' && (\n            <p class=\"ui-state\">\n              Unable to load post\n              <br />\n              <br />\n              <button\n                type=\"button\"\n                onClick={() => {\n                  states.reloadStatusPage++;\n                }}\n              >\n                Try again\n              </button>\n            </p>\n          )}\n        </>\n      )}\n    </div>\n  );\n}\n\nfunction SubComments({\n  replies,\n  instance,\n  hasParentThread,\n  level,\n  accWeight,\n  openAll,\n  parentLink,\n}) {\n  const [searchParams, setSearchParams] = useSearchParams();\n\n  // Total comments count, including sub-replies\n  const diveDeep = (replies) => {\n    return replies.reduce((acc, reply) => {\n      const { repliesCount, replies } = reply;\n      const count = replies?.length || repliesCount;\n      return acc + count + diveDeep(replies || []);\n    }, 0);\n  };\n  const totalComments = replies.length + diveDeep(replies);\n  const sameCount = replies.length === totalComments;\n\n  // Get the first 3 accounts, unique by id\n  const accounts = replies\n    .map((r) => r.account)\n    .filter((a, i, arr) => arr.findIndex((b) => b.id === a.id) === i)\n    .slice(0, 3);\n\n  const totalWeight = useMemo(() => {\n    return replies?.reduce((acc, reply) => {\n      return acc + reply?.weight;\n    }, accWeight);\n  }, [accWeight, replies?.length]);\n\n  let open = false;\n  if (openAll) {\n    open = true;\n  } else if (totalWeight <= MAX_WEIGHT) {\n    open = true;\n  } else if (!hasParentThread && totalComments === 1) {\n    const shortReply = calcStatusWeight(replies[0]) < 2;\n    if (shortReply) open = true;\n  }\n  const openBefore = cachedRepliesToggle[replies[0].id];\n\n  const handleMediaClick = useCallback((e, i, media, status) => {\n    e.preventDefault();\n    e.stopPropagation();\n    setSearchParams({\n      media: i + 1,\n      mediaStatusID: status.id,\n    });\n  }, []);\n\n  const detailsRef = useRef();\n  useLayoutEffect(() => {\n    function handleScroll(e) {\n      e.target.dataset.scrollLeft = e.target.scrollLeft;\n    }\n    detailsRef.current?.addEventListener('scroll', handleScroll, {\n      passive: true,\n    });\n    return () => {\n      detailsRef.current?.removeEventListener('scroll', handleScroll);\n    };\n  }, []);\n\n  return (\n    <details\n      ref={detailsRef}\n      class=\"replies\"\n      open={openBefore || open}\n      onToggle={(e) => {\n        const { open } = e.target;\n        // use first reply as ID\n        cachedRepliesToggle[replies[0].id] = open;\n      }}\n      style={{\n        '--comments-level': level,\n      }}\n      data-comments-level={level}\n      data-comments-level-overflow={level > 4}\n    >\n      <summary class=\"replies-summary\" hidden={open}>\n        <span class=\"avatars\">\n          {accounts.map((a) => (\n            <Avatar\n              key={a.id}\n              url={a.avatarStatic}\n              title={`${a.displayName} @${a.username}`}\n              squircle={a?.bot}\n            />\n          ))}\n        </span>\n        <span class=\"replies-counts\">\n          <b>\n            <span title={replies.length}>{shortenNumber(replies.length)}</span>{' '}\n            repl\n            {replies.length === 1 ? 'y' : 'ies'}\n          </b>\n          {!sameCount && totalComments > 1 && (\n            <>\n              {' '}\n              &middot;{' '}\n              <span>\n                <span title={totalComments}>\n                  {shortenNumber(totalComments)}\n                </span>{' '}\n                comment\n                {totalComments === 1 ? '' : 's'}\n              </span>\n            </>\n          )}\n        </span>\n        <Icon icon=\"chevron-down\" class=\"replies-summary-chevron\" />\n        {!!parentLink && (\n          <Link\n            class=\"replies-parent-link\"\n            to={parentLink.to}\n            onClick={parentLink.onClick}\n            title=\"View post with its replies\"\n          >\n            &raquo;\n          </Link>\n        )}\n      </summary>\n      <ul>\n        {replies.map((r) => (\n          <li key={r.id}>\n            {/* <Link\n              class=\"status-link\"\n              to={instance ? `/${instance}/s/${r.id}` : `/s/${r.id}`}\n              onClick={() => {\n                resetScrollPosition(r.id);\n              }}\n            > */}\n            <div class=\"status-focus\" tabIndex={0}>\n              <Status\n                statusID={r.id}\n                instance={instance}\n                withinContext\n                size=\"s\"\n                enableTranslate\n                onMediaClick={handleMediaClick}\n                showActionsBar\n              />\n              {!r.replies?.length && r.repliesCount > 0 && (\n                <div class=\"replies-link\">\n                  <Icon icon=\"comment2\" />{' '}\n                  <span title={r.repliesCount}>\n                    {shortenNumber(r.repliesCount)}\n                  </span>\n                </div>\n              )}\n            </div>\n            {/* </Link> */}\n            {r.replies?.length && (\n              <SubComments\n                instance={instance}\n                replies={r.replies}\n                level={level + 1}\n                accWeight={!open ? r.weight : totalWeight}\n                openAll={openAll}\n                parentLink={{\n                  to: instance ? `/${instance}/s/${r.id}` : `/s/${r.id}`,\n                  onClick: () => {\n                    resetScrollPosition(r.id);\n                  },\n                }}\n              />\n            )}\n          </li>\n        ))}\n      </ul>\n    </details>\n  );\n}\n\nconst MEDIA_VIRTUAL_LENGTH = 140;\nconst POLL_VIRTUAL_LENGTH = 35;\nconst CARD_VIRTUAL_LENGTH = 70;\nconst WEIGHT_SEGMENT = 140;\nconst statusWeightCache = new Map();\nfunction calcStatusWeight(status) {\n  const cachedWeight = statusWeightCache.get(status.id);\n  if (cachedWeight) return cachedWeight;\n  const { spoilerText, content, mediaAttachments, poll, card } = status;\n  const length = htmlContentLength(spoilerText + content);\n  const mediaLength = mediaAttachments?.length ? MEDIA_VIRTUAL_LENGTH : 0;\n  const pollLength = (poll?.options?.length || 0) * POLL_VIRTUAL_LENGTH;\n  const cardLength =\n    card && (mediaAttachments?.length || poll?.options?.length)\n      ? 0\n      : CARD_VIRTUAL_LENGTH;\n  const totalLength = length + mediaLength + pollLength + cardLength;\n  const weight = totalLength / WEIGHT_SEGMENT;\n  statusWeightCache.set(status.id, weight);\n  return weight;\n}\n\nexport default memo(StatusPage);\n","import { useParams } from 'react-router-dom';\n\nimport Status from './status';\n\nexport default function StatusRoute() {\n  const params = useParams();\n  const { id, instance } = params;\n  return <Status id={id} instance={instance} />;\n}\n","export default \"__VITE_ASSET__W5CngKHO__\"","export default \"__VITE_ASSET__vmqRZ5q5__\"","export default \"__VITE_ASSET__DFAo1Udm__\"","export default \"__VITE_ASSET__D2_o1n6___\"","export default \"__VITE_ASSET__ySLnBMku__\"","export default \"data:image/svg+xml,%3csvg%20xmlns='http://www.w3.org/2000/svg'%20xml:space='preserve'%20fill-rule='evenodd'%20stroke-linejoin='round'%20stroke-miterlimit='2'%20clip-rule='evenodd'%20viewBox='0%200%20102%2028'%3e%3cpath%20fill='none'%20d='M0%200h101.5v27.5H0z'/%3e%3cg%20fill-rule='nonzero'%3e%3cpath%20fill='url(%23a)'%20d='M2.32%2021.85c1.4%200%202.21-.85%202.21-2.3v-4.64H8.5c4.45%200%207.54-2.9%207.54-7.24%200-4.35-2.98-7.24-7.32-7.24h-6.4C.93.43.11%201.28.11%202.73v16.82c0%201.45.82%202.3%202.21%202.3Zm2.21-10.4V3.94h3c2.54%200%204%201.34%204%203.75s-1.47%203.76-4%203.76h-3Z'/%3e%3cpath%20fill='url(%23b)'%20d='M20.52%2021.88c1.25%200%202.13-.76%202.13-2.23v-7.04c0-2.07%201.2-3.49%203.21-3.49%201.95%200%202.95%201.23%202.95%203.25v7.28c0%201.47.89%202.23%202.13%202.23%201.26%200%202.14-.76%202.14-2.23v-8.18c0-3.64-1.99-5.9-5.48-5.9-2.38%200-4.1%201.12-4.93%203.1h-.09V2.3c0-1.38-.78-2.2-2.1-2.2-1.31%200-2.1.82-2.1%202.2v17.34c0%201.47.9%202.23%202.14%202.23Z'/%3e%3cpath%20fill='url(%23c)'%20d='M40.45%2021.82c1.96%200%203.93-.98%204.8-2.65h.1v.8c.08%201.27.89%201.91%202.05%201.91%201.21%200%202.08-.73%202.08-2.15v-8.95c0-3.17-2.63-5.25-6.65-5.25-3.26%200-5.78%201.16-6.5%203.04-.15.32-.23.63-.23.96%200%20.97.75%201.64%201.79%201.64.69%200%201.23-.26%201.7-.79.95-1.23%201.74-1.65%203.04-1.65%201.62%200%202.64.85%202.64%202.31v1.04l-3.95.24c-3.93.23-6.13%201.88-6.13%204.74%200%202.83%202.27%204.76%205.26%204.76Zm1.4-3.09c-1.43%200-2.4-.73-2.4-1.9%200-1.12.91-1.83%202.51-1.95l3.31-.2v1.14c0%201.7-1.54%202.91-3.41%202.91Z'/%3e%3cpath%20fill='url(%23d)'%20d='M54.37%2021.88c1.26%200%202.14-.76%202.14-2.23v-7.09c0-2.03%201.21-3.44%203.13-3.44s2.89%201.17%202.89%203.22v7.31c0%201.47.88%202.23%202.14%202.23%201.24%200%202.13-.76%202.13-2.23v-8.2c0-3.68-1.96-5.87-5.45-5.87-2.41%200-4%201.07-4.83%203.01h-.09v-.87c0-1.35-.85-2.17-2.14-2.17-1.28%200-2.06.82-2.06%202.15v11.95c0%201.47.9%202.23%202.14%202.23Z'/%3e%3cpath%20fill='url(%23e)'%20d='M71.65%2027.17c1.26%200%202.14-.76%202.14-2.23v-6h.09a5.15%205.15%200%200%200%204.88%202.88c3.92%200%206.35-3.05%206.35-8.1%200-5.07-2.44-8.1-6.43-8.1a5.12%205.12%200%200%200-4.86%202.99h-.09v-.85c0-1.45-.88-2.21-2.1-2.21-1.24%200-2.11.76-2.11%202.2v17.2c0%201.46.89%202.22%202.13%202.22Zm5.6-8.8c-2.1%200-3.47-1.8-3.47-4.65%200-2.81%201.37-4.67%203.47-4.67%202.14%200%203.49%201.83%203.49%204.67%200%202.86-1.35%204.66-3.5%204.66Z'/%3e%3cpath%20fill='url(%23f)'%20d='M89.61%2027.39c3.44%200%205.26-1.5%206.73-5.55l4.81-13.1a4%204%200%200%200%20.24-1.26c0-1.13-.85-1.93-2.08-1.93-1.1%200-1.71.51-2.07%201.7l-3.4%2010.9h-.08L90.35%207.28c-.36-1.25-.94-1.73-2.07-1.73-1.26%200-2.21.83-2.21%201.99%200%20.35.09.82.25%201.26l5%2013.21-.21.56c-.52%201.1-1.32%201.42-2.07%201.42l-.75-.01c-.96%200-1.56.54-1.56%201.4%200%201.29%201%202%202.88%202Z'/%3e%3c/g%3e%3cdefs%3e%3cradialGradient%20id='a'%20cx='0'%20cy='0'%20r='1'%20gradientTransform='rotate(28.51%20.06%20.22)%20scale(57.6252)'%20gradientUnits='userSpaceOnUse'%3e%3cstop%20offset='0'%20stop-color='%23a4bff7'/%3e%3cstop%20offset='1'%20stop-color='%236081e6'/%3e%3c/radialGradient%3e%3cradialGradient%20id='b'%20cx='0'%20cy='0'%20r='1'%20gradientTransform='rotate(28.51%20.06%20.22)%20scale(57.6252)'%20gradientUnits='userSpaceOnUse'%3e%3cstop%20offset='0'%20stop-color='%23a4bff7'/%3e%3cstop%20offset='1'%20stop-color='%236081e6'/%3e%3c/radialGradient%3e%3cradialGradient%20id='c'%20cx='0'%20cy='0'%20r='1'%20gradientTransform='rotate(28.51%20.06%20.22)%20scale(57.6252)'%20gradientUnits='userSpaceOnUse'%3e%3cstop%20offset='0'%20stop-color='%23a4bff7'/%3e%3cstop%20offset='1'%20stop-color='%236081e6'/%3e%3c/radialGradient%3e%3cradialGradient%20id='d'%20cx='0'%20cy='0'%20r='1'%20gradientTransform='rotate(28.51%20.06%20.22)%20scale(57.6252)'%20gradientUnits='userSpaceOnUse'%3e%3cstop%20offset='0'%20stop-color='%23a4bff7'/%3e%3cstop%20offset='1'%20stop-color='%236081e6'/%3e%3c/radialGradient%3e%3cradialGradient%20id='e'%20cx='0'%20cy='0'%20r='1'%20gradientTransform='rotate(28.51%20.06%20.22)%20scale(57.6252)'%20gradientUnits='userSpaceOnUse'%3e%3cstop%20offset='0'%20stop-color='%23a4bff7'/%3e%3cstop%20offset='1'%20stop-color='%236081e6'/%3e%3c/radialGradient%3e%3cradialGradient%20id='f'%20cx='0'%20cy='0'%20r='1'%20gradientTransform='rotate(28.51%20.06%20.22)%20scale(57.6252)'%20gradientUnits='userSpaceOnUse'%3e%3cstop%20offset='0'%20stop-color='%23a4bff7'/%3e%3cstop%20offset='1'%20stop-color='%236081e6'/%3e%3c/radialGradient%3e%3c/defs%3e%3c/svg%3e\"","import './welcome.css';\n\nimport boostsCarouselUrl from '../assets/features/boosts-carousel.jpg';\nimport groupedNotificationsUrl from '../assets/features/grouped-notifications.jpg';\nimport multiColumnUrl from '../assets/features/multi-column.jpg';\nimport multiHashtagTimelineUrl from '../assets/features/multi-hashtag-timeline.jpg';\nimport nestedCommentsThreadUrl from '../assets/features/nested-comments-thread.jpg';\nimport logoText from '../assets/logo-text.svg';\nimport logo from '../assets/logo.svg';\n\nimport Link from '../components/link';\nimport states from '../utils/states';\nimport useTitle from '../utils/useTitle';\n\nconst {\n  PHANPY_DEFAULT_INSTANCE: DEFAULT_INSTANCE,\n  PHANPY_WEBSITE: WEBSITE,\n  PHANPY_PRIVACY_POLICY_URL: PRIVACY_POLICY_URL,\n  PHANPY_DEFAULT_INSTANCE_REGISTRATION_URL: DEFAULT_INSTANCE_REGISTRATION_URL,\n} = import.meta.env;\nconst appSite = WEBSITE\n  ? WEBSITE.replace(/https?:\\/\\//g, '').replace(/\\/$/, '')\n  : null;\nconst appVersion = __BUILD_TIME__\n  ? `${__BUILD_TIME__.slice(0, 10).replace(/-/g, '.')}${\n      __COMMIT_HASH__ ? `.${__COMMIT_HASH__}` : ''\n    }`\n  : null;\n\nfunction Welcome() {\n  useTitle(null, ['/', '/welcome']);\n  return (\n    <main id=\"welcome\">\n      <div class=\"hero-container\">\n        <div class=\"hero-content\">\n          <h1>\n            <img\n              src={logo}\n              alt=\"\"\n              width=\"160\"\n              height=\"160\"\n              style={{\n                aspectRatio: '1/1',\n                marginBlockEnd: -16,\n              }}\n            />\n            <img src={logoText} alt=\"Phanpy\" width=\"200\" />\n          </h1>\n          <p class=\"desc\">A minimalistic opinionated Mastodon web client.</p>\n          <p>\n            <Link\n              to={\n                DEFAULT_INSTANCE\n                  ? `/login?instance=${DEFAULT_INSTANCE}&submit=1`\n                  : '/login'\n              }\n              class=\"button\"\n            >\n              {DEFAULT_INSTANCE ? 'Log in' : 'Log in with Mastodon'}\n            </Link>\n          </p>\n          {DEFAULT_INSTANCE && DEFAULT_INSTANCE_REGISTRATION_URL && (\n            <p>\n              <a href={DEFAULT_INSTANCE_REGISTRATION_URL} class=\"button plain5\">\n                Sign up\n              </a>\n            </p>\n          )}\n          {!DEFAULT_INSTANCE && (\n            <p class=\"insignificant\">\n              <small>\n                Connect your existing Mastodon/Fediverse account.\n                <br />\n                Your credentials are not stored on this server.\n              </small>\n            </p>\n          )}\n        </div>\n        {(appSite || appVersion) && (\n          <p class=\"app-site-version\">\n            <small>\n              {appSite} {appVersion}\n            </small>\n          </p>\n        )}\n        <p>\n          <a href=\"https://github.com/cheeaun/phanpy\" target=\"_blank\">\n            Built\n          </a>{' '}\n          by{' '}\n          <a\n            href=\"https://mastodon.social/@cheeaun\"\n            target=\"_blank\"\n            onClick={(e) => {\n              e.preventDefault();\n              states.showAccount = 'cheeaun@mastodon.social';\n            }}\n          >\n            @cheeaun\n          </a>\n          .{' '}\n          <a href={PRIVACY_POLICY_URL} target=\"_blank\">\n            Privacy Policy\n          </a>\n          .\n        </p>\n      </div>\n      <div id=\"why-container\">\n        <div class=\"sections\">\n          <section>\n            <img\n              src={boostsCarouselUrl}\n              alt=\"Screenshot of Boosts Carousel\"\n              loading=\"lazy\"\n            />\n            <h4>Boosts Carousel</h4>\n            <p>\n              Visually separate original posts and re-shared posts (boosted\n              posts).\n            </p>\n          </section>\n          <section>\n            <img\n              src={nestedCommentsThreadUrl}\n              alt=\"Screenshot of nested comments thread\"\n              loading=\"lazy\"\n            />\n            <h4>Nested comments thread</h4>\n            <p>Effortlessly follow conversations. Semi-collapsible replies.</p>\n          </section>\n          <section>\n            <img\n              src={groupedNotificationsUrl}\n              alt=\"Screenshot of grouped notifications\"\n              loading=\"lazy\"\n            />\n            <h4>Grouped notifications</h4>\n            <p>\n              Similar notifications are grouped and collapsed to reduce clutter.\n            </p>\n          </section>\n          <section>\n            <img\n              src={multiColumnUrl}\n              alt=\"Screenshot of multi-column UI\"\n              loading=\"lazy\"\n            />\n            <h4>Single or multi-column</h4>\n            <p>\n              By default, single column for zen-mode seekers. Configurable\n              multi-column for power users.\n            </p>\n          </section>\n          <section>\n            <img\n              src={multiHashtagTimelineUrl}\n              alt=\"Screenshot of multi-hashtag timeline with a form to add more hashtags\"\n              loading=\"lazy\"\n            />\n            <h4>Multi-hashtag timeline</h4>\n            <p>Up to 5 hashtags combined into a single timeline.</p>\n          </section>\n        </div>\n      </div>\n    </main>\n  );\n}\n\nexport default Welcome;\n","const focusDeck = () => {\n  let timer = setTimeout(() => {\n    const columns = document.getElementById('columns');\n    if (columns) {\n      // Focus first column\n      // columns.querySelector('.deck-container')?.focus?.();\n    } else {\n      const modals = document.querySelectorAll('#modal-container > *');\n      if (modals?.length) {\n        // Focus last modal\n        const modal = modals[modals.length - 1]; // last one\n        const modalFocusElement =\n          modal.querySelector('[tabindex=\"-1\"]') || modal;\n        if (modalFocusElement) {\n          modalFocusElement.focus();\n          return;\n        }\n      }\n      const backDrop = document.querySelector('.deck-backdrop');\n      if (backDrop) return;\n      // Focus last deck\n      const pages = document.querySelectorAll('.deck-container');\n      const page = pages[pages.length - 1]; // last one\n      if (page && page.tabIndex === -1) {\n        console.log('FOCUS', page);\n        page.focus();\n      }\n    }\n  }, 100);\n  return () => clearTimeout(timer);\n};\n\nexport default focusDeck;\n","// Replace alert() with toastify-js\nimport Toastify from 'toastify-js';\n\nconst nativeAlert = window.alert;\nif (!window.__nativeAlert) window.__nativeAlert = nativeAlert;\n\nwindow.alert = function (message) {\n  console.debug(\n    'ALERT: This is a custom alert() function. Native alert() is still available as window.__nativeAlert()',\n  );\n  // If Error object, show the message\n  if (message instanceof Error && message?.message) {\n    message = message.message;\n  }\n  // If not string, stringify it\n  if (typeof message !== 'string') {\n    message = JSON.stringify(message);\n  }\n\n  const toast = Toastify({\n    text: message,\n    className: 'alert',\n    gravity: 'top',\n    position: 'center',\n    duration: 10_000,\n    offset: {\n      y: 48,\n    },\n    onClick: () => {\n      toast.hideToast();\n    },\n  });\n  toast.showToast();\n};\n","import './app.css';\n\nimport debounce from 'just-debounce-it';\nimport { lazy, Suspense } from 'preact/compat';\nimport {\n  useEffect,\n  useLayoutEffect,\n  useMemo,\n  useRef,\n  useState,\n} from 'preact/hooks';\nimport { matchPath, Route, Routes, useLocation } from 'react-router-dom';\nimport 'swiped-events';\nimport { subscribe } from 'valtio';\n\nimport BackgroundService from './components/background-service';\nimport ComposeButton from './components/compose-button';\nimport { ICONS } from './components/ICONS';\nimport KeyboardShortcutsHelp from './components/keyboard-shortcuts-help';\nimport Loader from './components/loader';\n// import Modals from './components/modals';\nimport NotificationService from './components/notification-service';\nimport SearchCommand from './components/search-command';\nimport Shortcuts from './components/shortcuts';\nimport NotFound from './pages/404';\nimport AccountStatuses from './pages/account-statuses';\nimport Bookmarks from './pages/bookmarks';\n// import Catchup from './pages/catchup';\nimport Favourites from './pages/favourites';\nimport Filters from './pages/filters';\nimport FollowedHashtags from './pages/followed-hashtags';\nimport Following from './pages/following';\nimport Hashtag from './pages/hashtag';\nimport Home from './pages/home';\nimport HttpRoute from './pages/http-route';\nimport List from './pages/list';\nimport Lists from './pages/lists';\nimport Login from './pages/login';\nimport Mentions from './pages/mentions';\nimport Notifications from './pages/notifications';\nimport Public from './pages/public';\nimport Search from './pages/search';\nimport StatusRoute from './pages/status-route';\nimport Trending from './pages/trending';\nimport Welcome from './pages/welcome';\nimport {\n  api,\n  initAccount,\n  initClient,\n  initInstance,\n  initPreferences,\n} from './utils/api';\nimport { getAccessToken } from './utils/auth';\nimport focusDeck from './utils/focus-deck';\nimport states, { initStates, statusKey } from './utils/states';\nimport store from './utils/store';\nimport { getCurrentAccount } from './utils/store-utils';\nimport './utils/toast-alert';\n\nconst Catchup = lazy(() => import('./pages/catchup'));\nconst Modals = lazy(() => import('./components/modals'));\n\nwindow.__STATES__ = states;\nwindow.__STATES_STATS__ = () => {\n  const keys = [\n    'statuses',\n    'accounts',\n    'spoilers',\n    'unfurledLinks',\n    'statusQuotes',\n  ];\n  const counts = {};\n  keys.forEach((key) => {\n    counts[key] = Object.keys(states[key]).length;\n  });\n  console.warn('STATE stats', counts);\n\n  const { statuses } = states;\n  const unmountedPosts = [];\n  for (const key in statuses) {\n    const $post = document.querySelector(\n      `[data-state-post-id~=\"${key}\"], [data-state-post-ids~=\"${key}\"]`,\n    );\n    if (!$post) {\n      unmountedPosts.push(key);\n    }\n  }\n  console.warn('Unmounted posts', unmountedPosts.length, unmountedPosts);\n};\n\n// Experimental \"garbage collection\" for states\n// Every 15 minutes\n// Only posts for now\nsetInterval(() => {\n  if (!window.__IDLE__) return;\n  const { statuses, unfurledLinks, notifications } = states;\n  let keysCount = 0;\n  const { instance } = api();\n  for (const key in statuses) {\n    if (!window.__IDLE__) break;\n    try {\n      const $post = document.querySelector(\n        `[data-state-post-id~=\"${key}\"], [data-state-post-ids~=\"${key}\"]`,\n      );\n      const postInNotifications = notifications.some(\n        (n) => key === statusKey(n.status?.id, instance),\n      );\n      if (!$post && !postInNotifications) {\n        delete states.statuses[key];\n        delete states.statusQuotes[key];\n        for (const link in unfurledLinks) {\n          const unfurled = unfurledLinks[link];\n          const sKey = statusKey(unfurled.id, unfurled.instance);\n          if (sKey === key) {\n            delete states.unfurledLinks[link];\n            break;\n          }\n        }\n        keysCount++;\n      }\n    } catch (e) {}\n  }\n  if (keysCount) {\n    console.info(`GC: Removed ${keysCount} keys`);\n  }\n}, 15 * 60 * 1000);\n\n// Preload icons\n// There's probably a better way to do this\n// Related: https://github.com/vitejs/vite/issues/10600\nsetTimeout(() => {\n  for (const icon in ICONS) {\n    queueMicrotask(() => {\n      if (Array.isArray(ICONS[icon])) {\n        ICONS[icon][0]?.();\n      } else {\n        ICONS[icon]?.();\n      }\n    });\n  }\n}, 5000);\n\n(() => {\n  window.__IDLE__ = true;\n  const nonIdleEvents = [\n    'mousemove',\n    'mousedown',\n    'resize',\n    'keydown',\n    'touchstart',\n    'pointerdown',\n    'pointermove',\n    'wheel',\n  ];\n  const setIdle = () => {\n    window.__IDLE__ = true;\n  };\n  const IDLE_TIME = 3_000; // 3 seconds\n  const debouncedSetIdle = debounce(setIdle, IDLE_TIME);\n  const onNonIdle = () => {\n    window.__IDLE__ = false;\n    debouncedSetIdle();\n  };\n  nonIdleEvents.forEach((event) => {\n    window.addEventListener(event, onNonIdle, {\n      passive: true,\n      capture: true,\n    });\n  });\n  window.addEventListener('blur', setIdle, {\n    passive: true,\n  });\n  // When cursor leaves the window, set idle\n  document.documentElement.addEventListener(\n    'mouseleave',\n    (e) => {\n      if (!e.relatedTarget && !e.toElement) {\n        setIdle();\n      }\n    },\n    {\n      passive: true,\n    },\n  );\n  // document.addEventListener(\n  //   'visibilitychange',\n  //   () => {\n  //     if (document.visibilityState === 'visible') {\n  //       onNonIdle();\n  //     }\n  //   },\n  //   {\n  //     passive: true,\n  //   },\n  // );\n})();\n\n// Possible fix for iOS PWA theme-color bug\n// It changes when loading web pages in \"webview\"\nconst isIOS = /iPad|iPhone|iPod/.test(navigator.userAgent);\nif (isIOS) {\n  document.addEventListener('visibilitychange', () => {\n    if (document.visibilityState === 'visible') {\n      const theme = store.local.get('theme');\n      let $meta;\n      if (theme) {\n        // Get current meta\n        $meta = document.querySelector(\n          `meta[name=\"theme-color\"][data-theme-setting=\"manual\"]`,\n        );\n        if ($meta) {\n          const color = $meta.content;\n          const tempColor =\n            theme === 'light'\n              ? $meta.dataset.themeLightColorTemp\n              : $meta.dataset.themeDarkColorTemp;\n          $meta.content = tempColor || '';\n          setTimeout(() => {\n            $meta.content = color;\n          }, 10);\n        }\n      } else {\n        // Get current color scheme\n        const colorScheme = window.matchMedia('(prefers-color-scheme: dark)')\n          .matches\n          ? 'dark'\n          : 'light';\n        // Get current theme-color\n        $meta = document.querySelector(\n          `meta[name=\"theme-color\"][media*=\"${colorScheme}\"]`,\n        );\n        if ($meta) {\n          const color = $meta.dataset.content;\n          const tempColor = $meta.dataset.contentTemp;\n          $meta.content = tempColor || '';\n          setTimeout(() => {\n            $meta.content = color;\n          }, 10);\n        }\n      }\n    }\n  });\n}\n\n{\n  const theme = store.local.get('theme');\n  // If there's a theme, it's NOT auto\n  if (theme) {\n    // dark | light\n    document.documentElement.classList.add(`is-${theme}`);\n    document\n      .querySelector('meta[name=\"color-scheme\"]')\n      .setAttribute('content', theme || 'dark light');\n\n    // Enable manual theme <meta>\n    const $manualMeta = document.querySelector(\n      'meta[data-theme-setting=\"manual\"]',\n    );\n    if ($manualMeta) {\n      $manualMeta.name = 'theme-color';\n      $manualMeta.content =\n        theme === 'light'\n          ? $manualMeta.dataset.themeLightColor\n          : $manualMeta.dataset.themeDarkColor;\n    }\n    // Disable auto theme <meta>s\n    const $autoMetas = document.querySelectorAll(\n      'meta[data-theme-setting=\"auto\"]',\n    );\n    $autoMetas.forEach((m) => {\n      m.name = '';\n    });\n  }\n  const textSize = store.local.get('textSize');\n  if (textSize) {\n    document.documentElement.style.setProperty('--text-size', `${textSize}px`);\n  }\n}\n\nsubscribe(states, (changes) => {\n  for (const [action, path, value, prevValue] of changes) {\n    // Change #app dataset based on settings.shortcutsViewMode\n    if (path.join('.') === 'settings.shortcutsViewMode') {\n      const $app = document.getElementById('app');\n      if ($app) {\n        $app.dataset.shortcutsViewMode = states.shortcuts?.length ? value : '';\n      }\n    }\n\n    // Add/Remove cloak class to body\n    if (path.join('.') === 'settings.cloakMode') {\n      const $body = document.body;\n      $body.classList.toggle('cloak', value);\n    }\n  }\n});\n\nfunction App() {\n  const [isLoggedIn, setIsLoggedIn] = useState(false);\n  const [uiState, setUIState] = useState('loading');\n\n  useEffect(() => {\n    const instanceURL = store.local.get('instanceURL');\n    const code = decodeURIComponent(\n      (window.location.search.match(/code=([^&]+)/) || [, ''])[1],\n    );\n\n    if (code) {\n      console.log({ code });\n      // Clear the code from the URL\n      window.history.replaceState(\n        {},\n        document.title,\n        window.location.pathname || '/',\n      );\n\n      const clientID = store.session.get('clientID');\n      const clientSecret = store.session.get('clientSecret');\n      const vapidKey = store.session.get('vapidKey');\n\n      (async () => {\n        setUIState('loading');\n        const { access_token: accessToken } = await getAccessToken({\n          instanceURL,\n          client_id: clientID,\n          client_secret: clientSecret,\n          code,\n        });\n\n        const client = initClient({ instance: instanceURL, accessToken });\n        await Promise.allSettled([\n          initInstance(client, instanceURL),\n          initAccount(client, instanceURL, accessToken, vapidKey),\n        ]);\n        initStates();\n        initPreferences(client);\n\n        setIsLoggedIn(true);\n        setUIState('default');\n      })();\n    } else {\n      window.__IGNORE_GET_ACCOUNT_ERROR__ = true;\n      const account = getCurrentAccount();\n      if (account) {\n        store.session.set('currentAccount', account.info.id);\n        const { client } = api({ account });\n        const { instance } = client;\n        // console.log('masto', masto);\n        initStates();\n        initPreferences(client);\n        setUIState('loading');\n        (async () => {\n          try {\n            await initInstance(client, instance);\n          } catch (e) {\n          } finally {\n            setIsLoggedIn(true);\n            setUIState('default');\n          }\n        })();\n      } else {\n        setUIState('default');\n      }\n    }\n  }, []);\n\n  let location = useLocation();\n  states.currentLocation = location.pathname;\n  // useLayoutEffect(() => {\n  //   states.currentLocation = location.pathname;\n  // }, [location.pathname]);\n\n  useEffect(focusDeck, [location, isLoggedIn]);\n\n  if (/\\/https?:/.test(location.pathname)) {\n    return <HttpRoute />;\n  }\n\n  return (\n    <>\n      <PrimaryRoutes isLoggedIn={isLoggedIn} loading={uiState === 'loading'} />\n      <SecondaryRoutes isLoggedIn={isLoggedIn} />\n      {uiState === 'default' && (\n        <Routes>\n          <Route path=\"/:instance?/s/:id\" element={<StatusRoute />} />\n        </Routes>\n      )}\n      {isLoggedIn && <ComposeButton />}\n      {isLoggedIn && <Shortcuts />}\n      <Suspense>\n        <Modals />\n      </Suspense>\n      {isLoggedIn && <NotificationService />}\n      <BackgroundService isLoggedIn={isLoggedIn} />\n      {uiState !== 'loading' && <SearchCommand onClose={focusDeck} />}\n      <KeyboardShortcutsHelp />\n    </>\n  );\n}\n\nfunction PrimaryRoutes({ isLoggedIn, loading }) {\n  const location = useLocation();\n  const nonRootLocation = useMemo(() => {\n    const { pathname } = location;\n    return !/^\\/(login|welcome)/i.test(pathname);\n  }, [location]);\n\n  return (\n    <Routes location={nonRootLocation || location}>\n      <Route\n        path=\"/\"\n        element={\n          isLoggedIn ? (\n            <Home />\n          ) : loading ? (\n            <Loader id=\"loader-root\" />\n          ) : (\n            <Welcome />\n          )\n        }\n      />\n      <Route path=\"/login\" element={<Login />} />\n      <Route path=\"/welcome\" element={<Welcome />} />\n    </Routes>\n  );\n}\n\nfunction getPrevLocation() {\n  return states.prevLocation || null;\n}\nfunction SecondaryRoutes({ isLoggedIn }) {\n  // const snapStates = useSnapshot(states);\n  const location = useLocation();\n  // const prevLocation = snapStates.prevLocation;\n  const backgroundLocation = useRef(getPrevLocation());\n\n  const isModalPage = useMemo(() => {\n    return (\n      matchPath('/:instance/s/:id', location.pathname) ||\n      matchPath('/s/:id', location.pathname)\n    );\n  }, [location.pathname, matchPath]);\n  if (isModalPage) {\n    if (!backgroundLocation.current)\n      backgroundLocation.current = getPrevLocation();\n  } else {\n    backgroundLocation.current = null;\n  }\n  console.debug({\n    backgroundLocation: backgroundLocation.current,\n    location,\n  });\n\n  return (\n    <Routes location={backgroundLocation.current || location}>\n      {isLoggedIn && (\n        <>\n          <Route path=\"/notifications\" element={<Notifications />} />\n          <Route path=\"/mentions\" element={<Mentions />} />\n          <Route path=\"/following\" element={<Following />} />\n          <Route path=\"/b\" element={<Bookmarks />} />\n          <Route path=\"/f\" element={<Favourites />} />\n          <Route path=\"/l\">\n            <Route index element={<Lists />} />\n            <Route path=\":id\" element={<List />} />\n          </Route>\n          <Route path=\"/fh\" element={<FollowedHashtags />} />\n          <Route path=\"/ft\" element={<Filters />} />\n          <Route\n            path=\"/catchup\"\n            element={\n              <Suspense>\n                <Catchup />\n              </Suspense>\n            }\n          />\n        </>\n      )}\n      <Route path=\"/:instance?/t/:hashtag\" element={<Hashtag />} />\n      <Route path=\"/:instance?/a/:id\" element={<AccountStatuses />} />\n      <Route path=\"/:instance?/p\">\n        <Route index element={<Public />} />\n        <Route path=\"l\" element={<Public local />} />\n      </Route>\n      <Route path=\"/:instance?/trending\" element={<Trending />} />\n      <Route path=\"/:instance?/search\" element={<Search />} />\n      {/* <Route path=\"/:anything\" element={<NotFound />} /> */}\n    </Routes>\n  );\n}\n\nexport { App };\n","import './index.css';\n\nimport './cloak-mode.css';\n\n// Polyfill needed for Firefox < 122\n// https://bugzilla.mozilla.org/show_bug.cgi?id=1423593\n// import '@formatjs/intl-segmenter/polyfill';\nimport { render } from 'preact';\nimport { HashRouter } from 'react-router-dom';\n\nimport { App } from './app';\n\nif (import.meta.env.DEV) {\n  import('preact/debug');\n}\n\n// AbortSignal.timeout polyfill\n// Temporary fix from https://github.com/mo/abortcontroller-polyfill/issues/73#issuecomment-1541180943\n// Incorrect implementation, but should be good enough for now\nif ('AbortSignal' in window) {\n  AbortSignal.timeout =\n    AbortSignal.timeout ||\n    ((duration) => {\n      const controller = new AbortController();\n      setTimeout(() => controller.abort(), duration);\n      return controller.signal;\n    });\n}\n\nrender(\n  <HashRouter>\n    <App />\n  </HashRouter>,\n  document.getElementById('app'),\n);\n\n// Storage cleanup\nsetTimeout(() => {\n  try {\n    // Clean up iconify localStorage\n    Object.keys(localStorage).forEach((key) => {\n      if (key.startsWith('iconify')) {\n        localStorage.removeItem(key);\n      }\n    });\n    Object.keys(sessionStorage).forEach((key) => {\n      if (key.startsWith('iconify')) {\n        sessionStorage.removeItem(key);\n      }\n    });\n\n    // Clean up old settings key\n    localStorage.removeItem('settings:boostsCarousel');\n  } catch (e) {}\n}, 5000);\n\nwindow.__CLOAK__ = () => {\n  document.body.classList.toggle('cloak');\n};\n"],"file":"assets/main-k_RAxOWG.js"}