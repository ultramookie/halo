{"version":3,"mappings":"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","names":["Accounts","onClose","masto","api","accounts","store","local","getJSON","currentAccount","session","get","moreThanOneAccount","length","_","reload","useReducer","x","accountsListParent","useAutoAnimate","_jsxs","id","class","tabIndex","children","_jsx","type","onClick","Icon","icon","ref","map","account","i","isCurrent","info","isDefault","alt","Avatar","url","avatarStatic","size","onDblClick","v1","$select","fetch","log","NameText","test","showAcct","states","set","_Fragment","Menu2","align","menuButton","title","MenuItem","MenuDivider","disabled","splice","MenuConfirm","subMenu","confirmLabel","menuItemClassName","href","Link","to","define_import_meta_env_default","useLocationChange","fn","location","useLocation","currentLocationRef","useRef","pathname","useEffect","current","AccountSheet","instance","propInstance","authenticated","isString","AccountInfo","fetchAccount","lookup","acct","skip_webfinger","result","v2","search","q","limit","resolve","accountURL","URL","hostname","replace","Drafts","uiState","setUIState","useState","drafts","setDrafts","reloadCount","c","keys","db","ns","getCurrentAccountNS","ownKeys","filter","key","startsWith","getMany","sort","a","b","Date","updatedAt","getTime","console","hasDrafts","Loader","abrupt","hidden","draft","draftStatus","replyTo","updatedAtDate","alert","replyToStatus","window","MiniDraft","poll","status","spoilerText","mediaAttachments","hasPoll","options","hasMedia","firstImageMedia","media","image","file","objectURL","createObjectURL","hasPollOrMedia","style","EmbedModal","html","width","height","target","rel","dangerouslySetInnerHTML","__html","GenericAccounts","excludeRelationshipAttrs","postID","currentInstance","isCurrentInstance","snapStates","useSnapshot","setAccounts","showMore","setShowMore","showGenericAccounts","heading","fetchAccounts","staticAccounts","showReactions","relationshipsMap","setRelationshipsMap","loadRelationships","relationships","fetchRelationships","loadAccounts","firstLoad","done","value","Array","isArray","theAccount","find","j","_types","push","prev","newAccounts","_a","reloadGenericAccounts","post","statuses","tabindex","Status","relationship","_b","reblog","favourite","AccountBlock","showStats","InView","MediaAltModal","lang","forceTranslate","setForceTranslate","targetLanguage","getTranslateTargetLanguage","contentTranslationHideLanguages","settings","differentLanguage","localeMatch","l","supportsTTS","speak","dir","whiteSpace","textWrap","TranslationBlock","sourceLanguage","text","CATEGORIES","CATEGORIES_INFO","spam","label","description","legal","violation","stampLabel","other","excludeStamp","ReportModal","username","domain","split","rules","currentDomain","useMemo","getCurrentInstance","selectedCategory","setSelectedCategory","showRules","setShowRules","rulesRef","hasRules","setHasRules","previewMode","avatarSize","useAvatarStatic","showActivity","onSubmit","e","preventDefault","formData","FormData","entries","Object","fromEntries","category","comment","forward","undefined","ruleIds","reports","accountId","statusIds","showToast","error","Fragment","name","rule","required","checked","for","maxlength","rows","Compose","lazy","__vitePreload","subscribe","changes","action","path","prevValue","focusDeck","Modals","navigate","useNavigate","showCompose","Modal","IntlSegmenterSuspense","__COMPOSE__","editStatus","results","newStatus","reloadStatusPage","reply","edit","delay","duration","toast","hideToast","prevLocation","showSettings","Settings","showAccounts","showAccount","destination","showDrafts","showMediaModal","currentTarget","classList","contains","MediaModal","index","statusID","showShortcutsSettings","ShortcutsSettings","showMediaAlt","showEmbedModal","showReportModal"],"ignoreList":[],"sources":["../../src/pages/accounts.jsx","../../src/pages/settings.jsx","../../src/utils/useLocationChange.js","../../src/components/account-sheet.jsx","../../src/components/drafts.jsx","../../src/components/embed-modal.jsx","../../src/components/generic-accounts.jsx","../../src/components/media-alt-modal.jsx","../../src/components/report-modal.jsx","../../src/components/modals.jsx"],"sourcesContent":["import './accounts.css';\n\nimport { useAutoAnimate } from '@formkit/auto-animate/preact';\nimport { Menu, MenuDivider, MenuItem } from '@szhsin/react-menu';\nimport { useReducer } from 'preact/hooks';\n\nimport Avatar from '../components/avatar';\nimport Icon from '../components/icon';\nimport Link from '../components/link';\nimport Menu2 from '../components/menu2';\nimport MenuConfirm from '../components/menu-confirm';\nimport NameText from '../components/name-text';\nimport { api } from '../utils/api';\nimport states from '../utils/states';\nimport store from '../utils/store';\n\nfunction Accounts({ onClose }) {\n  const { masto } = api();\n  // Accounts\n  const accounts = store.local.getJSON('accounts');\n  const currentAccount = store.session.get('currentAccount');\n  const moreThanOneAccount = accounts.length > 1;\n\n  const [_, reload] = useReducer((x) => x + 1, 0);\n  const [accountsListParent] = useAutoAnimate();\n\n  return (\n    <div id=\"accounts-container\" class=\"sheet\" tabIndex=\"-1\">\n      {!!onClose && (\n        <button type=\"button\" class=\"sheet-close\" onClick={onClose}>\n          <Icon icon=\"x\" />\n        </button>\n      )}\n      <header class=\"header-grid\">\n        <h2>Accounts</h2>\n      </header>\n      <main>\n        <section>\n          <ul class=\"accounts-list\" ref={accountsListParent}>\n            {accounts.map((account, i) => {\n              const isCurrent = account.info.id === currentAccount;\n              const isDefault = i === 0; // first account is always default\n              return (\n                <li key={account.info.id}>\n                  <div>\n                    {moreThanOneAccount && (\n                      <span class={`current ${isCurrent ? 'is-current' : ''}`}>\n                        <Icon icon=\"check-circle\" alt=\"Current\" />\n                      </span>\n                    )}\n                    <Avatar\n                      url={account.info.avatarStatic}\n                      size=\"xxl\"\n                      onDblClick={async () => {\n                        if (isCurrent) {\n                          try {\n                            const info = await masto.v1.accounts\n                              .$select(account.info.id)\n                              .fetch();\n                            console.log('fetched account info', info);\n                            account.info = info;\n                            store.local.setJSON('accounts', accounts);\n                            reload();\n                          } catch (e) {}\n                        }\n                      }}\n                    />\n                    <NameText\n                      account={\n                        moreThanOneAccount\n                          ? {\n                              ...account.info,\n                              acct: /@/.test(account.info.acct)\n                                ? account.info.acct\n                                : `${account.info.acct}@${account.instanceURL}`,\n                            }\n                          : account.info\n                      }\n                      showAcct\n                      onClick={() => {\n                        if (isCurrent) {\n                          states.showAccount = `${account.info.username}@${account.instanceURL}`;\n                        } else {\n                          store.session.set('currentAccount', account.info.id);\n                          location.reload();\n                        }\n                      }}\n                    />\n                  </div>\n                  <div class=\"actions\">\n                    {isDefault && moreThanOneAccount && (\n                      <>\n                        <span class=\"tag\">Default</span>{' '}\n                      </>\n                    )}\n                    <Menu2\n                      align=\"end\"\n                      menuButton={\n                        <button\n                          type=\"button\"\n                          title=\"More\"\n                          class=\"plain more-button\"\n                        >\n                          <Icon icon=\"more\" size=\"l\" alt=\"More\" />\n                        </button>\n                      }\n                    >\n                      <MenuItem\n                        onClick={() => {\n                          states.showAccount = `${account.info.username}@${account.instanceURL}`;\n                        }}\n                      >\n                        <Icon icon=\"user\" />\n                        <span>View profile…</span>\n                      </MenuItem>\n                      <MenuDivider />\n                      {moreThanOneAccount && (\n                        <MenuItem\n                          disabled={isDefault}\n                          onClick={() => {\n                            // Move account to the top of the list\n                            accounts.splice(i, 1);\n                            accounts.unshift(account);\n                            store.local.setJSON('accounts', accounts);\n                            reload();\n                          }}\n                        >\n                          <Icon icon=\"check-circle\" />\n                          <span>Set as default</span>\n                        </MenuItem>\n                      )}\n                      <MenuConfirm\n                        subMenu\n                        confirmLabel={\n                          <>\n                            <Icon icon=\"exit\" />\n                            <span>Log out @{account.info.acct}?</span>\n                          </>\n                        }\n                        disabled={!isCurrent}\n                        menuItemClassName=\"danger\"\n                        onClick={() => {\n                          // const yes = confirm('Log out?');\n                          // if (!yes) return;\n                          accounts.splice(i, 1);\n                          store.local.setJSON('accounts', accounts);\n                          // location.reload();\n                          location.href = location.pathname || '/';\n                        }}\n                      >\n                        <Icon icon=\"exit\" />\n                        <span>Log out…</span>\n                      </MenuConfirm>\n                    </Menu2>\n                  </div>\n                </li>\n              );\n            })}\n          </ul>\n          <p>\n            <Link to=\"/login\" class=\"button plain2\" onClick={onClose}>\n              <Icon icon=\"plus\" /> <span>Add an existing account</span>\n            </Link>\n          </p>\n          {moreThanOneAccount && (\n            <p>\n              <small>\n                Note: <i>Default</i> account will always be used for first load.\n                Switched accounts will persist during the session.\n              </small>\n            </p>\n          )}\n        </section>\n      </main>\n    </div>\n  );\n}\n\nexport default Accounts;\n","import './settings.css';\n\nimport { useEffect, useRef, useState } from 'preact/hooks';\nimport { useSnapshot } from 'valtio';\n\nimport logo from '../assets/logo.svg';\n\nimport Icon from '../components/icon';\nimport Link from '../components/link';\nimport RelativeTime from '../components/relative-time';\nimport targetLanguages from '../data/lingva-target-languages';\nimport { api } from '../utils/api';\nimport getTranslateTargetLanguage from '../utils/get-translate-target-language';\nimport localeCode2Text from '../utils/localeCode2Text';\nimport {\n  initSubscription,\n  isPushSupported,\n  removeSubscription,\n  updateSubscription,\n} from '../utils/push-notifications';\nimport showToast from '../utils/show-toast';\nimport states from '../utils/states';\nimport store from '../utils/store';\n\nconst DEFAULT_TEXT_SIZE = 16;\nconst TEXT_SIZES = [14, 15, 16, 17, 18, 19, 20];\nconst {\n  PHANPY_WEBSITE: WEBSITE,\n  PHANPY_PRIVACY_POLICY_URL: PRIVACY_POLICY_URL,\n  PHANPY_IMG_ALT_API_URL: IMG_ALT_API_URL,\n} = import.meta.env;\n\nfunction Settings({ onClose }) {\n  const snapStates = useSnapshot(states);\n  const currentTheme = store.local.get('theme') || 'auto';\n  const themeFormRef = useRef();\n  const targetLanguage =\n    snapStates.settings.contentTranslationTargetLanguage || null;\n  const systemTargetLanguage = getTranslateTargetLanguage();\n  const systemTargetLanguageText = localeCode2Text(systemTargetLanguage);\n  const currentTextSize = store.local.get('textSize') || DEFAULT_TEXT_SIZE;\n\n  const [prefs, setPrefs] = useState(store.account.get('preferences') || {});\n  const { masto, authenticated, instance } = api();\n  // Get preferences every time Settings is opened\n  // NOTE: Disabled for now because I don't expect this to change often. Also for some reason, the /api/v1/preferences endpoint is cached for a while and return old prefs if refresh immediately after changing them.\n  // useEffect(() => {\n  //   const { masto } = api();\n  //   (async () => {\n  //     try {\n  //       const preferences = await masto.v1.preferences.fetch();\n  //       setPrefs(preferences);\n  //       store.account.set('preferences', preferences);\n  //     } catch (e) {\n  //       // Silently fail\n  //       console.error(e);\n  //     }\n  //   })();\n  // }, []);\n\n  return (\n    <div id=\"settings-container\" class=\"sheet\" tabIndex=\"-1\">\n      {!!onClose && (\n        <button type=\"button\" class=\"sheet-close\" onClick={onClose}>\n          <Icon icon=\"x\" />\n        </button>\n      )}\n      <header>\n        <h2>Settings</h2>\n      </header>\n      <main>\n        <section>\n          <ul>\n            <li>\n              <div>\n                <label>Appearance</label>\n              </div>\n              <div>\n                <form\n                  ref={themeFormRef}\n                  onInput={(e) => {\n                    console.log(e);\n                    e.preventDefault();\n                    const formData = new FormData(themeFormRef.current);\n                    const theme = formData.get('theme');\n                    const html = document.documentElement;\n\n                    if (theme === 'auto') {\n                      html.classList.remove('is-light', 'is-dark');\n\n                      // Disable manual theme <meta>\n                      const $manualMeta = document.querySelector(\n                        'meta[data-theme-setting=\"manual\"]',\n                      );\n                      if ($manualMeta) {\n                        $manualMeta.name = '';\n                      }\n                      // Enable auto theme <meta>s\n                      const $autoMetas = document.querySelectorAll(\n                        'meta[data-theme-setting=\"auto\"]',\n                      );\n                      $autoMetas.forEach((m) => {\n                        m.name = 'theme-color';\n                      });\n                    } else {\n                      html.classList.toggle('is-light', theme === 'light');\n                      html.classList.toggle('is-dark', theme === 'dark');\n\n                      // Enable manual theme <meta>\n                      const $manualMeta = document.querySelector(\n                        'meta[data-theme-setting=\"manual\"]',\n                      );\n                      if ($manualMeta) {\n                        $manualMeta.name = 'theme-color';\n                        $manualMeta.content =\n                          theme === 'light'\n                            ? $manualMeta.dataset.themeLightColor\n                            : $manualMeta.dataset.themeDarkColor;\n                      }\n                      // Disable auto theme <meta>s\n                      const $autoMetas = document.querySelectorAll(\n                        'meta[data-theme-setting=\"auto\"]',\n                      );\n                      $autoMetas.forEach((m) => {\n                        m.name = '';\n                      });\n                    }\n                    document\n                      .querySelector('meta[name=\"color-scheme\"]')\n                      .setAttribute(\n                        'content',\n                        theme === 'auto' ? 'dark light' : theme,\n                      );\n\n                    if (theme === 'auto') {\n                      store.local.del('theme');\n                    } else {\n                      store.local.set('theme', theme);\n                    }\n                  }}\n                >\n                  <div class=\"radio-group\">\n                    <label>\n                      <input\n                        type=\"radio\"\n                        name=\"theme\"\n                        value=\"light\"\n                        defaultChecked={currentTheme === 'light'}\n                      />\n                      <span>Light</span>\n                    </label>\n                    <label>\n                      <input\n                        type=\"radio\"\n                        name=\"theme\"\n                        value=\"dark\"\n                        defaultChecked={currentTheme === 'dark'}\n                      />\n                      <span>Dark</span>\n                    </label>\n                    <label>\n                      <input\n                        type=\"radio\"\n                        name=\"theme\"\n                        value=\"auto\"\n                        defaultChecked={\n                          currentTheme !== 'light' && currentTheme !== 'dark'\n                        }\n                      />\n                      <span>Auto</span>\n                    </label>\n                  </div>\n                </form>\n              </div>\n            </li>\n            <li>\n              <div>\n                <label>Text size</label>\n              </div>\n              <div class=\"range-group\">\n                <span style={{ fontSize: TEXT_SIZES[0] }}>A</span>{' '}\n                <input\n                  type=\"range\"\n                  min={TEXT_SIZES[0]}\n                  max={TEXT_SIZES[TEXT_SIZES.length - 1]}\n                  step=\"1\"\n                  value={currentTextSize}\n                  list=\"sizes\"\n                  onChange={(e) => {\n                    const value = parseInt(e.target.value, 10);\n                    const html = document.documentElement;\n                    // set CSS variable\n                    html.style.setProperty('--text-size', `${value}px`);\n                    // save to local storage\n                    if (value === DEFAULT_TEXT_SIZE) {\n                      store.local.del('textSize');\n                    } else {\n                      store.local.set('textSize', e.target.value);\n                    }\n                  }}\n                />{' '}\n                <span style={{ fontSize: TEXT_SIZES[TEXT_SIZES.length - 1] }}>\n                  A\n                </span>\n                <datalist id=\"sizes\">\n                  {TEXT_SIZES.map((size) => (\n                    <option value={size} />\n                  ))}\n                </datalist>\n              </div>\n            </li>\n          </ul>\n        </section>\n        {authenticated && (\n          <>\n            <h3>Posting</h3>\n            <section>\n              <ul>\n                <li>\n                  <div>\n                    <label for=\"posting-privacy-field\">\n                      Default visibility{' '}\n                      <Icon icon=\"cloud\" alt=\"Synced\" class=\"synced-icon\" />\n                    </label>\n                  </div>\n                  <div>\n                    <select\n                      id=\"posting-privacy-field\"\n                      value={prefs['posting:default:visibility'] || 'public'}\n                      onChange={(e) => {\n                        const { value } = e.target;\n                        (async () => {\n                          try {\n                            await masto.v1.accounts.updateCredentials({\n                              source: {\n                                privacy: value,\n                              },\n                            });\n                            setPrefs({\n                              ...prefs,\n                              'posting:default:visibility': value,\n                            });\n                            store.account.set('preferences', {\n                              ...prefs,\n                              'posting:default:visibility': value,\n                            });\n                          } catch (e) {\n                            alert('Failed to update posting privacy');\n                            console.error(e);\n                          }\n                        })();\n                      }}\n                    >\n                      <option value=\"public\">Public</option>\n                      <option value=\"unlisted\">Unlisted</option>\n                      <option value=\"private\">Followers only</option>\n                    </select>\n                  </div>\n                </li>\n              </ul>\n            </section>\n            <p class=\"section-postnote\">\n              <Icon icon=\"cloud\" alt=\"Synced\" class=\"synced-icon\" />{' '}\n              <small>\n                Synced to your instance server's settings.{' '}\n                <a\n                  href={`https://${instance}/`}\n                  target=\"_blank\"\n                  rel=\"noopener noreferrer\"\n                >\n                  Go to your instance ({instance}) for more settings.\n                </a>\n              </small>\n            </p>\n          </>\n        )}\n        <h3>Experiments</h3>\n        <section>\n          <ul>\n            <li>\n              <label>\n                <input\n                  type=\"checkbox\"\n                  checked={snapStates.settings.autoRefresh}\n                  onChange={(e) => {\n                    states.settings.autoRefresh = e.target.checked;\n                  }}\n                />{' '}\n                Auto refresh timeline posts\n              </label>\n            </li>\n            <li>\n              <label>\n                <input\n                  type=\"checkbox\"\n                  checked={snapStates.settings.boostsCarousel}\n                  onChange={(e) => {\n                    states.settings.boostsCarousel = e.target.checked;\n                  }}\n                />{' '}\n                Boosts carousel\n              </label>\n            </li>\n            <li>\n              <label>\n                <input\n                  type=\"checkbox\"\n                  checked={snapStates.settings.contentTranslation}\n                  onChange={(e) => {\n                    const { checked } = e.target;\n                    states.settings.contentTranslation = checked;\n                    if (!checked) {\n                      states.settings.contentTranslationTargetLanguage = null;\n                    }\n                  }}\n                />{' '}\n                Post translation\n              </label>\n              <div\n                class={`sub-section ${\n                  !snapStates.settings.contentTranslation\n                    ? 'more-insignificant'\n                    : ''\n                }`}\n              >\n                <div>\n                  <label>\n                    Translate to{' '}\n                    <select\n                      value={targetLanguage || ''}\n                      disabled={!snapStates.settings.contentTranslation}\n                      onChange={(e) => {\n                        states.settings.contentTranslationTargetLanguage =\n                          e.target.value || null;\n                      }}\n                    >\n                      <option value=\"\">\n                        System language ({systemTargetLanguageText})\n                      </option>\n                      <option disabled>──────────</option>\n                      {targetLanguages.map((lang) => (\n                        <option value={lang.code}>{lang.name}</option>\n                      ))}\n                    </select>\n                  </label>\n                </div>\n                <hr />\n                <p class=\"checkbox-fieldset\">\n                  Hide \"Translate\" button for\n                  {snapStates.settings.contentTranslationHideLanguages.length >\n                    0 && (\n                    <>\n                      {' '}\n                      (\n                      {\n                        snapStates.settings.contentTranslationHideLanguages\n                          .length\n                      }\n                      )\n                    </>\n                  )}\n                  :\n                  <div class=\"checkbox-fields\">\n                    {targetLanguages.map((lang) => (\n                      <label>\n                        <input\n                          type=\"checkbox\"\n                          checked={snapStates.settings.contentTranslationHideLanguages.includes(\n                            lang.code,\n                          )}\n                          onChange={(e) => {\n                            const { checked } = e.target;\n                            if (checked) {\n                              states.settings.contentTranslationHideLanguages.push(\n                                lang.code,\n                              );\n                            } else {\n                              states.settings.contentTranslationHideLanguages =\n                                snapStates.settings.contentTranslationHideLanguages.filter(\n                                  (code) => code !== lang.code,\n                                );\n                            }\n                          }}\n                        />{' '}\n                        {lang.name}\n                      </label>\n                    ))}\n                  </div>\n                </p>\n                <p class=\"insignificant\">\n                  <small>\n                    Note: This feature uses external translation services,\n                    powered by{' '}\n                    <a\n                      href=\"https://github.com/cheeaun/lingva-api\"\n                      target=\"_blank\"\n                      rel=\"noopener noreferrer\"\n                    >\n                      Lingva API\n                    </a>{' '}\n                    &amp;{' '}\n                    <a\n                      href=\"https://github.com/thedaviddelta/lingva-translate\"\n                      target=\"_blank\"\n                      rel=\"noopener noreferrer\"\n                    >\n                      Lingva Translate\n                    </a>\n                    .\n                  </small>\n                </p>\n                <hr />\n                <div>\n                  <label>\n                    <input\n                      type=\"checkbox\"\n                      checked={snapStates.settings.contentTranslationAutoInline}\n                      disabled={!snapStates.settings.contentTranslation}\n                      onChange={(e) => {\n                        states.settings.contentTranslationAutoInline =\n                          e.target.checked;\n                      }}\n                    />{' '}\n                    Auto inline translation\n                  </label>\n                  <p class=\"insignificant\">\n                    <small>\n                      Automatically show translation for posts in timeline. Only\n                      works for <b>short</b> posts without content warning,\n                      media and poll.\n                    </small>\n                  </p>\n                </div>\n              </div>\n            </li>\n            {!!IMG_ALT_API_URL && authenticated && (\n              <li>\n                <label>\n                  <input\n                    type=\"checkbox\"\n                    checked={snapStates.settings.mediaAltGenerator}\n                    onChange={(e) => {\n                      states.settings.mediaAltGenerator = e.target.checked;\n                    }}\n                  />{' '}\n                  Image description generator{' '}\n                  <Icon icon=\"sparkles2\" class=\"more-insignificant\" />\n                </label>\n                <div class=\"sub-section insignificant\">\n                  <small>Only for new images while composing new posts.</small>\n                </div>\n                <div class=\"sub-section insignificant\">\n                  <small>\n                    Note: This feature uses external AI service, powered by{' '}\n                    <a\n                      href=\"https://github.com/cheeaun/img-alt-api\"\n                      target=\"_blank\"\n                      rel=\"noopener noreferrer\"\n                    >\n                      img-alt-api\n                    </a>\n                    . May not work well. Only for images and in English.\n                  </small>\n                </div>\n              </li>\n            )}\n            {authenticated && (\n              <li>\n                <label>\n                  <input\n                    type=\"checkbox\"\n                    checked={\n                      snapStates.settings.shortcutSettingsCloudImportExport\n                    }\n                    onChange={(e) => {\n                      states.settings.shortcutSettingsCloudImportExport =\n                        e.target.checked;\n                    }}\n                  />{' '}\n                  \"Cloud\" import/export for shortcuts settings{' '}\n                  <Icon icon=\"cloud\" class=\"more-insignificant\" />\n                </label>\n                <div class=\"sub-section insignificant\">\n                  <small>\n                    ⚠️⚠️⚠️ Very experimental.\n                    <br />\n                    Stored in your own profile’s notes. Profile (private) notes\n                    are mainly used for other profiles, and hidden for own\n                    profile.\n                  </small>\n                </div>\n                <div class=\"sub-section insignificant\">\n                  <small>\n                    Note: This feature uses currently-logged-in instance server\n                    API.\n                  </small>\n                </div>\n              </li>\n            )}\n            <li>\n              <label>\n                <input\n                  type=\"checkbox\"\n                  checked={snapStates.settings.cloakMode}\n                  onChange={(e) => {\n                    states.settings.cloakMode = e.target.checked;\n                  }}\n                />{' '}\n                Cloak mode{' '}\n                <span class=\"insignificant\">\n                  (<samp>Text</samp> → <samp>████</samp>)\n                </span>\n              </label>\n              <div class=\"sub-section insignificant\">\n                <small>\n                  Replace text as blocks, useful when taking screenshots, for\n                  privacy reasons.\n                </small>\n              </div>\n            </li>\n            {authenticated && (\n              <li>\n                <button\n                  type=\"button\"\n                  class=\"light\"\n                  onClick={() => {\n                    states.showDrafts = true;\n                    states.showSettings = false;\n                  }}\n                >\n                  Unsent drafts\n                </button>\n              </li>\n            )}\n          </ul>\n        </section>\n        {authenticated && <PushNotificationsSection onClose={onClose} />}\n        <h3>About</h3>\n        <section>\n          <div\n            style={{\n              display: 'flex',\n              flexWrap: 'wrap',\n              gap: 8,\n              lineHeight: 1.25,\n              alignItems: 'center',\n              marginTop: 8,\n            }}\n          >\n            <img\n              src={logo}\n              alt=\"\"\n              width=\"64\"\n              height=\"64\"\n              style={{\n                aspectRatio: '1/1',\n                verticalAlign: 'middle',\n                background: '#b7cdf9',\n                borderRadius: 12,\n              }}\n            />\n            <div>\n              <b>Phanpy</b>{' '}\n              <a\n                href=\"https://hachyderm.io/@phanpy\"\n                // target=\"_blank\"\n                rel=\"noopener noreferrer\"\n                onClick={(e) => {\n                  e.preventDefault();\n                  states.showAccount = 'phanpy@hachyderm.io';\n                }}\n              >\n                @phanpy\n              </a>\n              <br />\n              <a\n                href=\"https://github.com/cheeaun/phanpy\"\n                target=\"_blank\"\n                rel=\"noopener noreferrer\"\n              >\n                Built\n              </a>{' '}\n              by{' '}\n              <a\n                href=\"https://mastodon.social/@cheeaun\"\n                // target=\"_blank\"\n                rel=\"noopener noreferrer\"\n                onClick={(e) => {\n                  e.preventDefault();\n                  states.showAccount = 'cheeaun@mastodon.social';\n                }}\n              >\n                @cheeaun\n              </a>\n            </div>\n          </div>\n          <p>\n            <a\n              href=\"https://github.com/sponsors/cheeaun\"\n              target=\"_blank\"\n              rel=\"noopener noreferrer\"\n            >\n              Sponsor\n            </a>{' '}\n            &middot;{' '}\n            <a\n              href=\"https://www.buymeacoffee.com/cheeaun\"\n              target=\"_blank\"\n              rel=\"noopener noreferrer\"\n            >\n              Donate\n            </a>{' '}\n            &middot;{' '}\n            <a\n              href={PRIVACY_POLICY_URL}\n              target=\"_blank\"\n              rel=\"noopener noreferrer\"\n            >\n              Privacy Policy\n            </a>\n          </p>\n          {__BUILD_TIME__ && (\n            <p>\n              {WEBSITE && (\n                <>\n                  <span class=\"insignificant\">Site:</span>{' '}\n                  {WEBSITE.replace(/https?:\\/\\//g, '').replace(/\\/$/, '')}\n                  <br />\n                </>\n              )}\n              <span class=\"insignificant\">Version:</span>{' '}\n              <input\n                type=\"text\"\n                class=\"version-string\"\n                readOnly\n                size=\"18\" // Manually calculated here\n                value={`${__BUILD_TIME__.slice(0, 10).replace(/-/g, '.')}${\n                  __COMMIT_HASH__ ? `.${__COMMIT_HASH__}` : ''\n                }`}\n                onClick={(e) => {\n                  e.target.select();\n                  // Copy to clipboard\n                  try {\n                    navigator.clipboard.writeText(e.target.value);\n                    showToast('Version string copied');\n                  } catch (e) {\n                    console.warn(e);\n                    showToast('Unable to copy version string');\n                  }\n                }}\n              />{' '}\n              {!__FAKE_COMMIT_HASH__ && (\n                <span class=\"ib insignificant\">\n                  (\n                  <a\n                    href={`https://github.com/cheeaun/phanpy/commit/${__COMMIT_HASH__}`}\n                    target=\"_blank\"\n                    rel=\"noopener noreferrer\"\n                  >\n                    <RelativeTime datetime={new Date(__BUILD_TIME__)} />\n                  </a>\n                  )\n                </span>\n              )}\n            </p>\n          )}\n        </section>\n      </main>\n    </div>\n  );\n}\n\nfunction PushNotificationsSection({ onClose }) {\n  if (!isPushSupported()) return null;\n\n  const { instance } = api();\n  const [uiState, setUIState] = useState('default');\n  const pushFormRef = useRef();\n  const [allowNotifications, setAllowNotifications] = useState(false);\n  const [needRelogin, setNeedRelogin] = useState(false);\n  const previousPolicyRef = useRef();\n  useEffect(() => {\n    (async () => {\n      setUIState('loading');\n      try {\n        const { subscription, backendSubscription } = await initSubscription();\n        if (\n          backendSubscription?.policy &&\n          backendSubscription.policy !== 'none'\n        ) {\n          setAllowNotifications(true);\n          const { alerts, policy } = backendSubscription;\n          console.log('backendSubscription', backendSubscription);\n          previousPolicyRef.current = policy;\n          const { elements } = pushFormRef.current;\n          const policyEl = elements.namedItem('policy');\n          if (policyEl) policyEl.value = policy;\n          // alerts is {}, iterate it\n          Object.keys(alerts).forEach((alert) => {\n            const el = elements.namedItem(alert);\n            if (el?.type === 'checkbox') {\n              el.checked = true;\n            }\n          });\n        }\n        setUIState('default');\n      } catch (err) {\n        console.warn(err);\n        if (/outside.*authorized/i.test(err.message)) {\n          setNeedRelogin(true);\n        } else {\n          alert(err?.message || err);\n        }\n        setUIState('error');\n      }\n    })();\n  }, []);\n\n  const isLoading = uiState === 'loading';\n\n  return (\n    <form\n      ref={pushFormRef}\n      onChange={() => {\n        setTimeout(() => {\n          const values = Object.fromEntries(new FormData(pushFormRef.current));\n          const allowNotifications = !!values['policy-allow'];\n          const params = {\n            data: {\n              policy: values.policy,\n              alerts: {\n                mention: !!values.mention,\n                favourite: !!values.favourite,\n                reblog: !!values.reblog,\n                follow: !!values.follow,\n                follow_request: !!values.followRequest,\n                poll: !!values.poll,\n                update: !!values.update,\n                status: !!values.status,\n              },\n            },\n          };\n\n          let alertsCount = 0;\n          // Remove false values from data.alerts\n          // API defaults to false anyway\n          Object.keys(params.data.alerts).forEach((key) => {\n            if (!params.data.alerts[key]) {\n              delete params.data.alerts[key];\n            } else {\n              alertsCount++;\n            }\n          });\n          const policyChanged =\n            previousPolicyRef.current !== params.data.policy;\n\n          console.log('PN Form', {\n            values,\n            allowNotifications: allowNotifications,\n            params,\n          });\n\n          if (allowNotifications && alertsCount > 0) {\n            if (policyChanged) {\n              console.debug('Policy changed.');\n              removeSubscription()\n                .then(() => {\n                  updateSubscription(params);\n                })\n                .catch((err) => {\n                  console.warn(err);\n                  alert('Failed to update subscription. Please try again.');\n                });\n            } else {\n              updateSubscription(params).catch((err) => {\n                console.warn(err);\n                alert('Failed to update subscription. Please try again.');\n              });\n            }\n          } else {\n            removeSubscription().catch((err) => {\n              console.warn(err);\n              alert('Failed to remove subscription. Please try again.');\n            });\n          }\n        }, 100);\n      }}\n    >\n      <h3>Push Notifications (beta)</h3>\n      <section>\n        <ul>\n          <li>\n            <label>\n              <input\n                type=\"checkbox\"\n                disabled={isLoading || needRelogin}\n                name=\"policy-allow\"\n                checked={allowNotifications}\n                onChange={async (e) => {\n                  const { checked } = e.target;\n                  if (checked) {\n                    // Request permission\n                    const permission = await Notification.requestPermission();\n                    if (permission === 'granted') {\n                      setAllowNotifications(true);\n                    } else {\n                      setAllowNotifications(false);\n                      if (permission === 'denied') {\n                        alert(\n                          'Push notifications are blocked. Please enable them in your browser settings.',\n                        );\n                      }\n                    }\n                  } else {\n                    setAllowNotifications(false);\n                  }\n                }}\n              />{' '}\n              Allow from{' '}\n              <select\n                name=\"policy\"\n                disabled={isLoading || needRelogin || !allowNotifications}\n              >\n                {[\n                  {\n                    value: 'all',\n                    label: 'anyone',\n                  },\n                  {\n                    value: 'followed',\n                    label: 'people I follow',\n                  },\n                  {\n                    value: 'follower',\n                    label: 'followers',\n                  },\n                ].map((type) => (\n                  <option value={type.value}>{type.label}</option>\n                ))}\n              </select>\n            </label>\n            <div\n              class=\"shazam-container no-animation\"\n              style={{\n                width: '100%',\n              }}\n              hidden={!allowNotifications}\n            >\n              <div class=\"shazam-container-inner\">\n                <div class=\"sub-section\">\n                  <ul>\n                    {[\n                      {\n                        value: 'mention',\n                        label: 'Mentions',\n                      },\n                      {\n                        value: 'favourite',\n                        label: 'Likes',\n                      },\n                      {\n                        value: 'reblog',\n                        label: 'Boosts',\n                      },\n                      {\n                        value: 'follow',\n                        label: 'Follows',\n                      },\n                      {\n                        value: 'followRequest',\n                        label: 'Follow requests',\n                      },\n                      {\n                        value: 'poll',\n                        label: 'Polls',\n                      },\n                      {\n                        value: 'update',\n                        label: 'Post edits',\n                      },\n                      {\n                        value: 'status',\n                        label: 'New posts',\n                      },\n                    ].map((alert) => (\n                      <li>\n                        <label>\n                          <input type=\"checkbox\" name={alert.value} />{' '}\n                          {alert.label}\n                        </label>\n                      </li>\n                    ))}\n                  </ul>\n                </div>\n              </div>\n            </div>\n            {needRelogin && (\n              <div class=\"sub-section\">\n                <p>\n                  Push permission was not granted since your last login. You'll\n                  need to{' '}\n                  <Link to={`/login?instance=${instance}`} onClick={onClose}>\n                    <b>log in</b> again to grant push permission\n                  </Link>\n                  .\n                </p>\n              </div>\n            )}\n          </li>\n        </ul>\n      </section>\n      <p class=\"section-postnote\">\n        <small>\n          NOTE: Push notifications only work for <b>one account</b>.\n        </small>\n      </p>\n    </form>\n  );\n}\n\nexport default Settings;\n","import { useEffect, useRef } from 'preact/hooks';\nimport { useLocation } from 'react-router-dom';\n\n// Hook that runs a callback when the location changes\n// Won't run on the first render\n\nexport default function useLocationChange(fn) {\n  if (!fn) return;\n  const location = useLocation();\n  const currentLocationRef = useRef(location.pathname);\n  useEffect(() => {\n    // console.log('location', {\n    //   current: currentLocationRef.current,\n    //   next: location.pathname,\n    // });\n    if (\n      currentLocationRef.current &&\n      location.pathname !== currentLocationRef.current\n    ) {\n      fn?.();\n    }\n  }, [location.pathname, fn]);\n}\n","import { useEffect } from 'preact/hooks';\n\nimport { api } from '../utils/api';\nimport states from '../utils/states';\nimport useLocationChange from '../utils/useLocationChange';\n\nimport AccountInfo from './account-info';\nimport Icon from './icon';\n\nfunction AccountSheet({ account, instance: propInstance, onClose }) {\n  const { masto, instance, authenticated } = api({ instance: propInstance });\n  const isString = typeof account === 'string';\n\n  useEffect(() => {\n    if (!isString) {\n      states.accounts[`${account.id}@${instance}`] = account;\n    }\n  }, [account]);\n\n  useLocationChange(onClose);\n\n  return (\n    <div\n      class=\"sheet\"\n      // onClick={(e) => {\n      //   const accountBlock = e.target.closest('.account-block');\n      //   if (accountBlock) {\n      //     onClose({\n      //       destination: 'account-statuses',\n      //     });\n      //   }\n      // }}\n    >\n      {!!onClose && (\n        <button type=\"button\" class=\"sheet-close outer\" onClick={onClose}>\n          <Icon icon=\"x\" />\n        </button>\n      )}\n      <AccountInfo\n        instance={instance}\n        authenticated={authenticated}\n        account={account}\n        fetchAccount={async () => {\n          if (isString) {\n            try {\n              const info = await masto.v1.accounts.lookup({\n                acct: account,\n                skip_webfinger: false,\n              });\n              return info;\n            } catch (e) {\n              const result = await masto.v2.search.fetch({\n                q: account,\n                type: 'accounts',\n                limit: 1,\n                resolve: authenticated,\n              });\n              if (result.accounts.length) {\n                return result.accounts[0];\n              } else if (/https?:\\/\\/[^/]+\\/@/.test(account)) {\n                const accountURL = new URL(account);\n                const { hostname, pathname } = accountURL;\n                const acct =\n                  pathname.replace(/^\\//, '').replace(/\\/$/, '') +\n                  '@' +\n                  hostname;\n                const result = await masto.v2.search.fetch({\n                  q: acct,\n                  type: 'accounts',\n                  limit: 1,\n                  resolve: authenticated,\n                });\n                if (result.accounts.length) {\n                  return result.accounts[0];\n                }\n              }\n            }\n          } else {\n            return account;\n          }\n        }}\n      />\n    </div>\n  );\n}\n\nexport default AccountSheet;\n","import './drafts.css';\n\nimport { useEffect, useMemo, useReducer, useState } from 'react';\n\nimport { api } from '../utils/api';\nimport db from '../utils/db';\nimport niceDateTime from '../utils/nice-date-time';\nimport states from '../utils/states';\nimport { getCurrentAccountNS } from '../utils/store-utils';\n\nimport Icon from './icon';\nimport Loader from './loader';\nimport MenuConfirm from './menu-confirm';\n\nfunction Drafts({ onClose }) {\n  const { masto } = api();\n  const [uiState, setUIState] = useState('default');\n  const [drafts, setDrafts] = useState([]);\n  const [reloadCount, reload] = useReducer((c) => c + 1, 0);\n\n  useEffect(() => {\n    setUIState('loading');\n    (async () => {\n      try {\n        const keys = await db.drafts.keys();\n        if (keys.length) {\n          const ns = getCurrentAccountNS();\n          const ownKeys = keys.filter((key) => key.startsWith(ns));\n          if (ownKeys.length) {\n            const drafts = await db.drafts.getMany(ownKeys);\n            drafts.sort(\n              (a, b) =>\n                new Date(b.updatedAt).getTime() -\n                new Date(a.updatedAt).getTime(),\n            );\n            setDrafts(drafts);\n          } else {\n            setDrafts([]);\n          }\n        } else {\n          setDrafts([]);\n        }\n        setUIState('default');\n      } catch (e) {\n        console.error(e);\n        setUIState('error');\n      }\n    })();\n  }, [reloadCount]);\n\n  const hasDrafts = drafts?.length > 0;\n\n  return (\n    <div class=\"sheet\">\n      {!!onClose && (\n        <button type=\"button\" class=\"sheet-close\" onClick={onClose}>\n          <Icon icon=\"x\" />\n        </button>\n      )}\n      <header>\n        <h2>\n          Unsent drafts <Loader abrupt hidden={uiState !== 'loading'} />\n        </h2>\n        {hasDrafts && (\n          <div class=\"insignificant\">\n            Looks like you have unsent drafts. Let's continue where you left\n            off.\n          </div>\n        )}\n      </header>\n      <main>\n        {hasDrafts ? (\n          <>\n            <ul class=\"drafts-list\">\n              {drafts.map((draft) => {\n                const { updatedAt, key, draftStatus, replyTo } = draft;\n                const updatedAtDate = new Date(updatedAt);\n                return (\n                  <li key={updatedAt}>\n                    <div class=\"mini-draft-meta\">\n                      <b>\n                        <Icon icon={replyTo ? 'reply' : 'quill'} size=\"s\" />{' '}\n                        <time>\n                          {!!replyTo && (\n                            <>\n                              @{replyTo.account.acct}\n                              <br />\n                            </>\n                          )}\n                          {niceDateTime(updatedAtDate)}\n                        </time>\n                      </b>\n                      <MenuConfirm\n                        confirmLabel={<span>Delete this draft?</span>}\n                        menuItemClassName=\"danger\"\n                        align=\"end\"\n                        disabled={uiState === 'loading'}\n                        onClick={() => {\n                          (async () => {\n                            try {\n                              // const yes = confirm('Delete this draft?');\n                              // if (yes) {\n                              await db.drafts.del(key);\n                              reload();\n                              // }\n                            } catch (e) {\n                              alert('Error deleting draft! Please try again.');\n                            }\n                          })();\n                        }}\n                      >\n                        <button\n                          type=\"button\"\n                          class=\"small light\"\n                          disabled={uiState === 'loading'}\n                        >\n                          Delete&hellip;\n                        </button>\n                      </MenuConfirm>\n                    </div>\n                    <button\n                      type=\"button\"\n                      disabled={uiState === 'loading'}\n                      class=\"draft-item\"\n                      onClick={async () => {\n                        // console.log({ draftStatus });\n                        let replyToStatus;\n                        if (replyTo) {\n                          setUIState('loading');\n                          try {\n                            replyToStatus = await masto.v1.statuses\n                              .$select(replyTo.id)\n                              .fetch();\n                          } catch (e) {\n                            console.error(e);\n                            alert('Error fetching reply-to status!');\n                            setUIState('default');\n                            return;\n                          }\n                          setUIState('default');\n                        }\n                        window.__COMPOSE__ = {\n                          draftStatus,\n                          replyToStatus,\n                        };\n                        states.showCompose = true;\n                        states.showDrafts = false;\n                      }}\n                    >\n                      <MiniDraft draft={draft} />\n                    </button>\n                  </li>\n                );\n              })}\n            </ul>\n            {drafts.length > 1 && (\n              <p>\n                <MenuConfirm\n                  confirmLabel={<span>Delete all drafts?</span>}\n                  menuItemClassName=\"danger\"\n                  disabled={uiState === 'loading'}\n                  onClick={() => {\n                    (async () => {\n                      // const yes = confirm('Delete all drafts?');\n                      // if (yes) {\n                      setUIState('loading');\n                      try {\n                        await db.drafts.delMany(\n                          drafts.map((draft) => draft.key),\n                        );\n                        setUIState('default');\n                        reload();\n                      } catch (e) {\n                        console.error(e);\n                        alert('Error deleting drafts! Please try again.');\n                        setUIState('error');\n                      }\n                      // }\n                    })();\n                  }}\n                >\n                  <button\n                    type=\"button\"\n                    class=\"light danger\"\n                    disabled={uiState === 'loading'}\n                  >\n                    Delete all&hellip;\n                  </button>\n                </MenuConfirm>\n              </p>\n            )}\n          </>\n        ) : (\n          <p>No drafts found.</p>\n        )}\n      </main>\n    </div>\n  );\n}\n\nfunction MiniDraft({ draft }) {\n  const { draftStatus, replyTo } = draft;\n  const { status, spoilerText, poll, mediaAttachments } = draftStatus;\n  const hasPoll = poll?.options?.length > 0;\n  const hasMedia = mediaAttachments?.length > 0;\n  const hasPollOrMedia = hasPoll || hasMedia;\n  const firstImageMedia = useMemo(() => {\n    if (!hasMedia) return;\n    const image = mediaAttachments.find((media) => /image/.test(media.type));\n    if (!image) return;\n    const { file } = image;\n    const objectURL = URL.createObjectURL(file);\n    return objectURL;\n  }, [hasMedia, mediaAttachments]);\n  return (\n    <>\n      <div class=\"mini-draft\">\n        {hasPollOrMedia && (\n          <div\n            class={`mini-draft-aside ${firstImageMedia ? 'has-image' : ''}`}\n            style={\n              firstImageMedia\n                ? {\n                    '--bg-image': `url(${firstImageMedia})`,\n                  }\n                : {}\n            }\n          >\n            {hasPoll && <Icon icon=\"poll\" />}\n            {hasMedia && (\n              <span>\n                <Icon icon=\"attachment\" />{' '}\n                <small>{mediaAttachments?.length}</small>\n              </span>\n            )}\n          </div>\n        )}\n        <div class=\"mini-draft-main\">\n          {!!spoilerText && <div class=\"mini-draft-spoiler\">{spoilerText}</div>}\n          {!!status && <div class=\"mini-draft-status\">{status}</div>}\n        </div>\n      </div>\n    </>\n  );\n}\n\nexport default Drafts;\n","import './embed-modal.css';\n\nimport Icon from './icon';\n\nfunction EmbedModal({ html, url, width, height, onClose = () => {} }) {\n  return (\n    <div class=\"embed-modal-container\">\n      <div class=\"top-controls\">\n        <button type=\"button\" class=\"light\" onClick={() => onClose()}>\n          <Icon icon=\"x\" />\n        </button>\n        {url && (\n          <a\n            href={url}\n            target=\"_blank\"\n            rel=\"noopener noreferrer\"\n            class=\"button plain\"\n          >\n            <span>Open link</span> <Icon icon=\"external\" />\n          </a>\n        )}\n      </div>\n      <div\n        class=\"embed-content\"\n        dangerouslySetInnerHTML={{ __html: html }}\n        style={{\n          '--width': width + 'px',\n          '--height': height + 'px',\n          '--aspect-ratio': `${width}/${height}`,\n        }}\n      />\n    </div>\n  );\n}\n\nexport default EmbedModal;\n","import './generic-accounts.css';\n\nimport { useEffect, useRef, useState } from 'preact/hooks';\nimport { InView } from 'react-intersection-observer';\nimport { useSnapshot } from 'valtio';\n\nimport { api } from '../utils/api';\nimport { fetchRelationships } from '../utils/relationships';\nimport states from '../utils/states';\nimport useLocationChange from '../utils/useLocationChange';\n\nimport AccountBlock from './account-block';\nimport Icon from './icon';\nimport Loader from './loader';\nimport Status from './status';\n\nexport default function GenericAccounts({\n  instance,\n  excludeRelationshipAttrs = [],\n  postID,\n  onClose = () => {},\n}) {\n  const { masto, instance: currentInstance } = api();\n  const isCurrentInstance = instance ? instance === currentInstance : true;\n  const snapStates = useSnapshot(states);\n  ``;\n  const [uiState, setUIState] = useState('default');\n  const [accounts, setAccounts] = useState([]);\n  const [showMore, setShowMore] = useState(false);\n\n  useLocationChange(onClose);\n\n  if (!snapStates.showGenericAccounts) {\n    return null;\n  }\n\n  const {\n    id,\n    heading,\n    fetchAccounts,\n    accounts: staticAccounts,\n    showReactions,\n  } = snapStates.showGenericAccounts;\n\n  const [relationshipsMap, setRelationshipsMap] = useState({});\n\n  const loadRelationships = async (accounts) => {\n    if (!accounts?.length) return;\n    if (!isCurrentInstance) return;\n    const relationships = await fetchRelationships(accounts, relationshipsMap);\n    if (relationships) {\n      setRelationshipsMap({\n        ...relationshipsMap,\n        ...relationships,\n      });\n    }\n  };\n\n  const loadAccounts = (firstLoad) => {\n    if (!fetchAccounts) return;\n    if (firstLoad) setAccounts([]);\n    setUIState('loading');\n    (async () => {\n      try {\n        const { done, value } = await fetchAccounts(firstLoad);\n        if (Array.isArray(value)) {\n          if (firstLoad) {\n            const accounts = [];\n            for (let i = 0; i < value.length; i++) {\n              const account = value[i];\n              const theAccount = accounts.find(\n                (a, j) => a.id === account.id && i !== j,\n              );\n              if (!theAccount) {\n                accounts.push({\n                  _types: [],\n                  ...account,\n                });\n              } else {\n                theAccount._types.push(...account._types);\n              }\n            }\n            setAccounts(accounts);\n          } else {\n            // setAccounts((prev) => [...prev, ...value]);\n            // Merge accounts by id and _types\n            setAccounts((prev) => {\n              const newAccounts = prev;\n              for (const account of value) {\n                const theAccount = newAccounts.find((a) => a.id === account.id);\n                if (!theAccount) {\n                  newAccounts.push(account);\n                } else {\n                  theAccount._types.push(...account._types);\n                }\n              }\n              return newAccounts;\n            });\n          }\n          setShowMore(!done);\n\n          loadRelationships(value);\n        } else {\n          setShowMore(false);\n        }\n        setUIState('default');\n      } catch (e) {\n        console.error(e);\n        setUIState('error');\n      }\n    })();\n  };\n\n  const firstLoad = useRef(true);\n  useEffect(() => {\n    if (staticAccounts?.length > 0) {\n      setAccounts(staticAccounts);\n      loadRelationships(staticAccounts);\n    } else {\n      loadAccounts(true);\n      firstLoad.current = false;\n    }\n  }, [staticAccounts, fetchAccounts]);\n\n  useEffect(() => {\n    if (firstLoad.current) return;\n    // reloadGenericAccounts contains value like {id: 'mute', counter: 1}\n    // We only need to reload if the id matches\n    if (snapStates.reloadGenericAccounts?.id === id) {\n      loadAccounts(true);\n    }\n  }, [snapStates.reloadGenericAccounts.counter]);\n\n  const post = states.statuses[postID];\n\n  return (\n    <div id=\"generic-accounts-container\" class=\"sheet\" tabindex=\"-1\">\n      <button type=\"button\" class=\"sheet-close\" onClick={onClose}>\n        <Icon icon=\"x\" />\n      </button>\n      <header>\n        <h2>{heading || 'Accounts'}</h2>\n      </header>\n      <main>\n        {post && (\n          <div class=\"post-preview\">\n            <Status status={post} size=\"s\" readOnly />\n          </div>\n        )}\n        {accounts.length > 0 ? (\n          <>\n            <ul class=\"accounts-list\">\n              {accounts.map((account) => {\n                const relationship = relationshipsMap[account.id];\n                const key = `${account.id}-${account._types?.length || ''}`;\n                return (\n                  <li key={key}>\n                    {showReactions && account._types?.length > 0 && (\n                      <div class=\"reactions-block\">\n                        {account._types.map((type) => (\n                          <Icon\n                            icon={\n                              {\n                                reblog: 'rocket',\n                                favourite: 'heart',\n                              }[type]\n                            }\n                            class={`${type}-icon`}\n                          />\n                        ))}\n                      </div>\n                    )}\n                    <div class=\"account-relationships\">\n                      <AccountBlock\n                        account={account}\n                        showStats\n                        relationship={relationship}\n                        excludeRelationshipAttrs={excludeRelationshipAttrs}\n                      />\n                    </div>\n                  </li>\n                );\n              })}\n            </ul>\n            {uiState === 'default' ? (\n              showMore ? (\n                <InView\n                  onChange={(inView) => {\n                    if (inView) {\n                      loadAccounts();\n                    }\n                  }}\n                >\n                  <button\n                    type=\"button\"\n                    class=\"plain block\"\n                    onClick={() => loadAccounts()}\n                  >\n                    Show more&hellip;\n                  </button>\n                </InView>\n              ) : (\n                <p class=\"ui-state insignificant\">The end.</p>\n              )\n            ) : (\n              uiState === 'loading' && (\n                <p class=\"ui-state\">\n                  <Loader abrupt />\n                </p>\n              )\n            )}\n          </>\n        ) : uiState === 'loading' ? (\n          <p class=\"ui-state\">\n            <Loader abrupt />\n          </p>\n        ) : uiState === 'error' ? (\n          <p class=\"ui-state\">Error loading accounts</p>\n        ) : (\n          <p class=\"ui-state insignificant\">Nothing to show</p>\n        )}\n      </main>\n    </div>\n  );\n}\n","import { Menu, MenuItem } from '@szhsin/react-menu';\nimport { useState } from 'preact/hooks';\nimport { useSnapshot } from 'valtio';\n\nimport getTranslateTargetLanguage from '../utils/get-translate-target-language';\nimport localeMatch from '../utils/locale-match';\nimport { speak, supportsTTS } from '../utils/speech';\nimport states from '../utils/states';\n\nimport Icon from './icon';\nimport Menu2 from './menu2';\nimport TranslationBlock from './translation-block';\n\nexport default function MediaAltModal({ alt, lang, onClose }) {\n  const snapStates = useSnapshot(states);\n  const [forceTranslate, setForceTranslate] = useState(false);\n  const targetLanguage = getTranslateTargetLanguage(true);\n  const contentTranslationHideLanguages =\n    snapStates.settings.contentTranslationHideLanguages || [];\n  const differentLanguage =\n    !!lang &&\n    lang !== targetLanguage &&\n    !localeMatch([lang], [targetLanguage]) &&\n    !contentTranslationHideLanguages.find(\n      (l) => lang === l || localeMatch([lang], [l]),\n    );\n\n  return (\n    <div class=\"sheet\" tabindex=\"-1\">\n      {!!onClose && (\n        <button type=\"button\" class=\"sheet-close outer\" onClick={onClose}>\n          <Icon icon=\"x\" />\n        </button>\n      )}\n      <header class=\"header-grid\">\n        <h2>Media description</h2>\n        <div class=\"header-side\">\n          <Menu2\n            align=\"end\"\n            menuButton={\n              <button type=\"button\" class=\"plain4\">\n                <Icon icon=\"more\" alt=\"More\" size=\"xl\" />\n              </button>\n            }\n          >\n            <MenuItem\n              disabled={forceTranslate}\n              onClick={() => {\n                setForceTranslate(true);\n              }}\n            >\n              <Icon icon=\"translate\" />\n              <span>Translate</span>\n            </MenuItem>\n            {supportsTTS && (\n              <MenuItem\n                onClick={() => {\n                  speak(alt, lang);\n                }}\n              >\n                <Icon icon=\"speak\" />\n                <span>Speak</span>\n              </MenuItem>\n            )}\n          </Menu2>\n        </div>\n      </header>\n      <main lang={lang} dir=\"auto\">\n        <p\n          style={{\n            whiteSpace: 'pre-wrap',\n            textWrap: 'pretty',\n          }}\n        >\n          {alt}\n        </p>\n        {(differentLanguage || forceTranslate) && (\n          <TranslationBlock\n            forceTranslate={forceTranslate}\n            sourceLanguage={lang}\n            text={alt}\n          />\n        )}\n      </main>\n    </div>\n  );\n}\n","import './report-modal.css';\n\nimport { Fragment } from 'preact';\nimport { useMemo, useRef, useState } from 'preact/hooks';\n\nimport { api } from '../utils/api';\nimport showToast from '../utils/show-toast';\nimport { getCurrentInstance } from '../utils/store-utils';\n\nimport AccountBlock from './account-block';\nimport Icon from './icon';\nimport Loader from './loader';\nimport Status from './status';\n\n// NOTE: `dislike` hidden for now, it's actually not used for reporting\n// Mastodon shows another screen for unfollowing, muting or blocking instead of reporting\n\nconst CATEGORIES = [, /*'dislike'*/ 'spam', 'legal', 'violation', 'other'];\n// `violation` will be set if there are `rule_ids[]`\n\nconst CATEGORIES_INFO = {\n  // dislike: {\n  //   label: 'Dislike',\n  //   description: 'Not something you want to see',\n  // },\n  spam: {\n    label: 'Spam',\n    description: 'Malicious links, fake engagement, or repetitive replies',\n  },\n  legal: {\n    label: 'Illegal',\n    description: \"Violates the law of your or the server's country\",\n  },\n  violation: {\n    label: 'Server rule violation',\n    description: 'Breaks specific server rules',\n    stampLabel: 'Violation',\n  },\n  other: {\n    label: 'Other',\n    description: \"Issue doesn't fit other categories\",\n    excludeStamp: true,\n  },\n};\n\nfunction ReportModal({ account, post, onClose }) {\n  const { masto } = api();\n  const [uiState, setUIState] = useState('default');\n  const [username, domain] = account.acct.split('@');\n\n  const [rules, currentDomain] = useMemo(() => {\n    const { rules, domain } = getCurrentInstance();\n    return [rules || [], domain];\n  });\n\n  const [selectedCategory, setSelectedCategory] = useState(null);\n  const [showRules, setShowRules] = useState(false);\n\n  const rulesRef = useRef(null);\n  const [hasRules, setHasRules] = useState(false);\n\n  return (\n    <div class=\"report-modal-container\">\n      <div class=\"top-controls\">\n        <h1>{post ? 'Report Post' : `Report @${username}`}</h1>\n        <button\n          type=\"button\"\n          class=\"plain4 small\"\n          disabled={uiState === 'loading'}\n          onClick={() => onClose()}\n        >\n          <Icon icon=\"x\" size=\"xl\" />\n        </button>\n      </div>\n      <main>\n        <div class=\"report-preview\">\n          {post ? (\n            <Status status={post} size=\"s\" previewMode />\n          ) : (\n            <AccountBlock\n              account={account}\n              avatarSize=\"xxl\"\n              useAvatarStatic\n              showStats\n              showActivity\n            />\n          )}\n        </div>\n        {!!selectedCategory &&\n          !CATEGORIES_INFO[selectedCategory].excludeStamp && (\n            <span\n              class=\"rubber-stamp\"\n              key={selectedCategory}\n              aria-hidden=\"true\"\n            >\n              {CATEGORIES_INFO[selectedCategory].stampLabel ||\n                CATEGORIES_INFO[selectedCategory].label}\n              <small>Pending review</small>\n            </span>\n          )}\n        <form\n          onSubmit={(e) => {\n            e.preventDefault();\n\n            const formData = new FormData(e.target);\n            const entries = Object.fromEntries(formData.entries());\n            console.log('ENTRIES', entries);\n\n            let { category, comment, forward } = entries;\n            if (!comment) comment = undefined;\n            if (forward === 'on') forward = true;\n            const ruleIds =\n              category === 'violation'\n                ? Object.entries(entries)\n                    .filter(([key]) => key.startsWith('rule_ids'))\n                    .map(([key, value]) => value)\n                : undefined;\n\n            const params = {\n              category,\n              comment,\n              forward,\n              ruleIds,\n            };\n            console.log('PARAMS', params);\n\n            setUIState('loading');\n            (async () => {\n              try {\n                await masto.v1.reports.create({\n                  accountId: account.id,\n                  statusIds: post?.id ? [post.id] : undefined,\n                  category,\n                  comment,\n                  ruleIds,\n                  forward,\n                });\n                setUIState('success');\n                showToast(post ? 'Post reported' : 'Profile reported');\n                onClose();\n              } catch (error) {\n                console.error(error);\n                setUIState('error');\n                showToast(\n                  error?.message ||\n                    (post\n                      ? 'Unable to report post'\n                      : 'Unable to report profile'),\n                );\n              }\n            })();\n          }}\n        >\n          <p>\n            {post\n              ? `What's the issue with this post?`\n              : `What's the issue with this profile?`}\n          </p>\n          <section class=\"report-categories\">\n            {CATEGORIES.map((category) =>\n              category === 'violation' && !rules?.length ? null : (\n                <Fragment key={category}>\n                  <label class=\"report-category\">\n                    <input\n                      type=\"radio\"\n                      name=\"category\"\n                      value={category}\n                      required\n                      disabled={uiState === 'loading'}\n                      onChange={(e) => {\n                        setSelectedCategory(e.target.value);\n                        setShowRules(e.target.value === 'violation');\n                      }}\n                    />\n                    <span>\n                      {CATEGORIES_INFO[category].label} &nbsp;\n                      <small class=\"ib insignificant\">\n                        {CATEGORIES_INFO[category].description}\n                      </small>\n                    </span>\n                  </label>\n                  {category === 'violation' && !!rules?.length && (\n                    <div\n                      class=\"shazam-container no-animation\"\n                      hidden={!showRules}\n                    >\n                      <div class=\"shazam-container-inner\">\n                        <div class=\"report-rules\" ref={rulesRef}>\n                          {rules.map((rule, i) => (\n                            <label class=\"report-rule\" key={rule.id}>\n                              <input\n                                type=\"checkbox\"\n                                name={`rule_ids[${i}]`}\n                                value={rule.id}\n                                required={showRules && !hasRules}\n                                disabled={uiState === 'loading'}\n                                onChange={(e) => {\n                                  const { checked } = e.target;\n                                  if (checked) {\n                                    setHasRules(true);\n                                  } else {\n                                    const checkedInputs =\n                                      rulesRef.current.querySelectorAll(\n                                        'input:checked',\n                                      );\n                                    if (!checkedInputs.length) {\n                                      setHasRules(false);\n                                    }\n                                  }\n                                }}\n                              />\n                              <span>{rule.text}</span>\n                            </label>\n                          ))}\n                        </div>\n                      </div>\n                    </div>\n                  )}\n                </Fragment>\n              ),\n            )}\n          </section>\n          <section class=\"report-comment\">\n            <p>\n              <label for=\"report-comment\">Additional info</label>\n            </p>\n            <textarea\n              maxlength=\"1000\"\n              rows=\"1\"\n              name=\"comment\"\n              id=\"report-comment\"\n              disabled={uiState === 'loading'}\n            />\n          </section>\n          {!!domain && domain !== currentDomain && (\n            <section>\n              <p>\n                <label>\n                  <input\n                    type=\"checkbox\"\n                    switch\n                    name=\"forward\"\n                    disabled={uiState === 'loading'}\n                  />{' '}\n                  <span>\n                    Forward to <i>{domain}</i>\n                  </span>\n                </label>\n              </p>\n            </section>\n          )}\n          <footer>\n            <button type=\"submit\" disabled={uiState === 'loading'}>\n              Send Report\n            </button>{' '}\n            <button\n              type=\"submit\"\n              class=\"plain2\"\n              disabled={uiState === 'loading'}\n              onClick={async () => {\n                try {\n                  await masto.v1.accounts.$select(account.id).mute(); // Infinite duration\n                  showToast(`Muted ${username}`);\n                } catch (e) {\n                  console.error(e);\n                  showToast(`Unable to mute ${username}`);\n                }\n                // onSubmit will still run\n              }}\n            >\n              Send Report <small class=\"ib\">+ Mute profile</small>\n            </button>{' '}\n            <button\n              type=\"submit\"\n              class=\"plain2\"\n              disabled={uiState === 'loading'}\n              onClick={async () => {\n                try {\n                  await masto.v1.accounts.$select(account.id).block();\n                  showToast(`Blocked ${username}`);\n                } catch (e) {\n                  console.error(e);\n                  showToast(`Unable to block ${username}`);\n                }\n                // onSubmit will still run\n              }}\n            >\n              Send Report <small class=\"ib\">+ Block profile</small>\n            </button>\n            <Loader hidden={uiState !== 'loading'} />\n          </footer>\n        </form>\n      </main>\n    </div>\n  );\n}\n\nexport default ReportModal;\n","import { lazy } from 'preact/compat';\nimport { useLocation, useNavigate } from 'react-router-dom';\nimport { subscribe, useSnapshot } from 'valtio';\n\nimport Accounts from '../pages/accounts';\nimport Settings from '../pages/settings';\nimport focusDeck from '../utils/focus-deck';\nimport showToast from '../utils/show-toast';\nimport states from '../utils/states';\n\nimport AccountSheet from './account-sheet';\n// import Compose from './compose';\nimport Drafts from './drafts';\nimport EmbedModal from './embed-modal';\nimport GenericAccounts from './generic-accounts';\nimport IntlSegmenterSuspense from './intl-segmenter-suspense';\nimport MediaAltModal from './media-alt-modal';\nimport MediaModal from './media-modal';\nimport Modal from './modal';\nimport ReportModal from './report-modal';\nimport ShortcutsSettings from './shortcuts-settings';\n\nconst Compose = lazy(() => import('./compose'));\n\nsubscribe(states, (changes) => {\n  for (const [action, path, value, prevValue] of changes) {\n    // When closing modal, focus on deck\n    if (/^show/i.test(path) && !value) {\n      focusDeck();\n    }\n  }\n});\n\nexport default function Modals() {\n  const snapStates = useSnapshot(states);\n  const navigate = useNavigate();\n  const location = useLocation();\n\n  return (\n    <>\n      {!!snapStates.showCompose && (\n        <Modal class=\"solid\">\n          <IntlSegmenterSuspense>\n            <Compose\n              replyToStatus={\n                typeof snapStates.showCompose !== 'boolean'\n                  ? snapStates.showCompose.replyToStatus\n                  : window.__COMPOSE__?.replyToStatus || null\n              }\n              editStatus={\n                states.showCompose?.editStatus ||\n                window.__COMPOSE__?.editStatus ||\n                null\n              }\n              draftStatus={\n                states.showCompose?.draftStatus ||\n                window.__COMPOSE__?.draftStatus ||\n                null\n              }\n              onClose={(results) => {\n                const { newStatus, instance, type } = results || {};\n                states.showCompose = false;\n                window.__COMPOSE__ = null;\n                if (newStatus) {\n                  states.reloadStatusPage++;\n                  showToast({\n                    text: {\n                      post: 'Post published. Check it out.',\n                      reply: 'Reply posted. Check it out.',\n                      edit: 'Post updated. Check it out.',\n                    }[type || 'post'],\n                    delay: 1000,\n                    duration: 10_000, // 10 seconds\n                    onClick: (toast) => {\n                      toast.hideToast();\n                      states.prevLocation = location;\n                      navigate(\n                        instance\n                          ? `/${instance}/s/${newStatus.id}`\n                          : `/s/${newStatus.id}`,\n                      );\n                    },\n                  });\n                }\n              }}\n            />\n          </IntlSegmenterSuspense>\n        </Modal>\n      )}\n      {!!snapStates.showSettings && (\n        <Modal\n          onClose={() => {\n            states.showSettings = false;\n          }}\n        >\n          <Settings\n            onClose={() => {\n              states.showSettings = false;\n            }}\n          />\n        </Modal>\n      )}\n      {!!snapStates.showAccounts && (\n        <Modal\n          onClose={() => {\n            states.showAccounts = false;\n          }}\n        >\n          <Accounts\n            onClose={() => {\n              states.showAccounts = false;\n            }}\n          />\n        </Modal>\n      )}\n      {!!snapStates.showAccount && (\n        <Modal\n          onClose={() => {\n            states.showAccount = false;\n          }}\n        >\n          <AccountSheet\n            account={snapStates.showAccount?.account || snapStates.showAccount}\n            instance={snapStates.showAccount?.instance}\n            onClose={({ destination } = {}) => {\n              states.showAccount = false;\n              // states.showGenericAccounts = false;\n              // if (destination) {\n              //   states.showAccounts = false;\n              // }\n            }}\n          />\n        </Modal>\n      )}\n      {!!snapStates.showDrafts && (\n        <Modal\n          onClose={() => {\n            states.showDrafts = false;\n          }}\n        >\n          <Drafts onClose={() => (states.showDrafts = false)} />\n        </Modal>\n      )}\n      {!!snapStates.showMediaModal && (\n        <Modal\n          onClick={(e) => {\n            if (\n              e.target === e.currentTarget ||\n              e.target.classList.contains('media')\n            ) {\n              states.showMediaModal = false;\n            }\n          }}\n        >\n          <MediaModal\n            mediaAttachments={snapStates.showMediaModal.mediaAttachments}\n            instance={snapStates.showMediaModal.instance}\n            index={snapStates.showMediaModal.index}\n            statusID={snapStates.showMediaModal.statusID}\n            onClose={() => {\n              states.showMediaModal = false;\n            }}\n          />\n        </Modal>\n      )}\n      {!!snapStates.showShortcutsSettings && (\n        <Modal\n          onClose={() => {\n            states.showShortcutsSettings = false;\n          }}\n        >\n          <ShortcutsSettings\n            onClose={() => (states.showShortcutsSettings = false)}\n          />\n        </Modal>\n      )}\n      {!!snapStates.showGenericAccounts && (\n        <Modal\n          onClose={() => {\n            states.showGenericAccounts = false;\n          }}\n        >\n          <GenericAccounts\n            instance={snapStates.showGenericAccounts.instance}\n            excludeRelationshipAttrs={\n              snapStates.showGenericAccounts.excludeRelationshipAttrs\n            }\n            postID={snapStates.showGenericAccounts.postID}\n            onClose={() => (states.showGenericAccounts = false)}\n          />\n        </Modal>\n      )}\n      {!!snapStates.showMediaAlt && (\n        <Modal\n          onClose={(e) => {\n            states.showMediaAlt = false;\n          }}\n        >\n          <MediaAltModal\n            alt={snapStates.showMediaAlt.alt || snapStates.showMediaAlt}\n            lang={snapStates.showMediaAlt?.lang}\n            onClose={() => {\n              states.showMediaAlt = false;\n            }}\n          />\n        </Modal>\n      )}\n      {!!snapStates.showEmbedModal && (\n        <Modal\n          class=\"solid\"\n          onClose={() => {\n            states.showEmbedModal = false;\n          }}\n        >\n          <EmbedModal\n            html={snapStates.showEmbedModal.html}\n            url={snapStates.showEmbedModal.url}\n            width={snapStates.showEmbedModal.width}\n            height={snapStates.showEmbedModal.height}\n            onClose={() => {\n              states.showEmbedModal = false;\n            }}\n          />\n        </Modal>\n      )}\n      {!!snapStates.showReportModal && (\n        <Modal\n          onClose={() => {\n            states.showReportModal = false;\n          }}\n        >\n          <ReportModal\n            account={snapStates.showReportModal.account}\n            post={snapStates.showReportModal.post}\n            onClose={() => {\n              states.showReportModal = false;\n            }}\n          />\n        </Modal>\n      )}\n    </>\n  );\n}\n"],"file":"assets/modals-0-21Plqh.js"}