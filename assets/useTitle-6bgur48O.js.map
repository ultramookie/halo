{"version":3,"file":"useTitle-6bgur48O.js","sources":["../../src/utils/store-utils.js","../../src/utils/store.js","../../src/utils/api.js","../../src/utils/isMastodonLinkMaybe.jsx","../../src/utils/mem.js","../../src/utils/pmem.js","../../src/utils/ratelimit.js","../../src/utils/unfurl-link.jsx","../../src/utils/states.js","../../src/components/loader.jsx","../../src/utils/useTitle.js"],"sourcesContent":["import store from './store';\n\nexport function getAccount(id) {\n  const accounts = store.local.getJSON('accounts') || [];\n  if (!id) return accounts[0];\n  return accounts.find((a) => a.info.id === id) || accounts[0];\n}\n\nexport function getAccountByAccessToken(accessToken) {\n  const accounts = store.local.getJSON('accounts') || [];\n  return accounts.find((a) => a.accessToken === accessToken);\n}\n\nexport function getAccountByInstance(instance) {\n  const accounts = store.local.getJSON('accounts') || [];\n  return accounts.find((a) => a.instanceURL === instance);\n}\n\nexport function getCurrentAccount() {\n  if (!window.__IGNORE_GET_ACCOUNT_ERROR__) {\n    // Track down getCurrentAccount() calls before account-based states are initialized\n    console.error('getCurrentAccount() called before states are initialized');\n    if (import.meta.env.DEV) console.trace();\n  }\n  const currentAccount = store.session.get('currentAccount');\n  const account = getAccount(currentAccount);\n  return account;\n}\n\nexport function getCurrentAccountNS() {\n  const account = getCurrentAccount();\n  const {\n    instanceURL,\n    info: { id },\n  } = account;\n  return `${id}@${instanceURL}`;\n}\n\nexport function saveAccount(account) {\n  const accounts = store.local.getJSON('accounts') || [];\n  const acc = accounts.find((a) => a.info.id === account.info.id);\n  if (acc) {\n    acc.info = account.info;\n    acc.instanceURL = account.instanceURL;\n    acc.accessToken = account.accessToken;\n    acc.vapidKey = account.vapidKey;\n  } else {\n    accounts.push(account);\n  }\n  store.local.setJSON('accounts', accounts);\n  store.session.set('currentAccount', account.info.id);\n}\n\nexport function updateAccount(accountInfo) {\n  // Only update if displayName or avatar or avatar_static is different\n  const accounts = store.local.getJSON('accounts') || [];\n  const acc = accounts.find((a) => a.info.id === accountInfo.id);\n  if (acc) {\n    if (\n      acc.info.displayName !== accountInfo.displayName ||\n      acc.info.avatar !== accountInfo.avatar ||\n      acc.info.avatar_static !== accountInfo.avatar_static\n    ) {\n      acc.info = {\n        ...acc.info,\n        ...accountInfo,\n      };\n      store.local.setJSON('accounts', accounts);\n    }\n  }\n}\n\nlet currentInstance = null;\nexport function getCurrentInstance() {\n  if (currentInstance) return currentInstance;\n  try {\n    const account = getCurrentAccount();\n    const instances = store.local.getJSON('instances');\n    const instance = account.instanceURL.toLowerCase();\n    return (currentInstance = instances[instance]);\n  } catch (e) {\n    console.error(e);\n    alert(`Failed to load instance configuration. Please try again.\\n\\n${e}`);\n    // Temporary fix for corrupted data\n    store.local.del('instances');\n    location.reload();\n    return {};\n  }\n}\n\n// Massage these instance configurations to match the Mastodon API\n// - Pleroma\nfunction getInstanceConfiguration(instance) {\n  const {\n    configuration,\n    maxMediaAttachments,\n    maxTootChars,\n    pleroma,\n    pollLimits,\n  } = instance;\n\n  const statuses = configuration?.statuses || {};\n  if (maxMediaAttachments) {\n    statuses.maxMediaAttachments ??= maxMediaAttachments;\n  }\n  if (maxTootChars) {\n    statuses.maxCharacters ??= maxTootChars;\n  }\n\n  const polls = configuration?.polls || {};\n  if (pollLimits) {\n    polls.maxCharactersPerOption ??= pollLimits.maxOptionChars;\n    polls.maxExpiration ??= pollLimits.maxExpiration;\n    polls.maxOptions ??= pollLimits.maxOptions;\n    polls.minExpiration ??= pollLimits.minExpiration;\n  }\n\n  return {\n    ...configuration,\n    statuses,\n    polls,\n  };\n}\n\nexport function getCurrentInstanceConfiguration() {\n  const instance = getCurrentInstance();\n  return getInstanceConfiguration(instance);\n}\n","import { getCurrentAccountNS } from './store-utils';\n\nconst local = {\n  get: (key) => {\n    try {\n      return localStorage.getItem(key);\n    } catch (e) {\n      console.warn(e);\n      return null;\n    }\n  },\n  getJSON: (key) => {\n    try {\n      return JSON.parse(local.get(key));\n    } catch (e) {\n      console.warn(e);\n      return null;\n    }\n  },\n  set: (key, value) => {\n    try {\n      return localStorage.setItem(key, value);\n    } catch (e) {\n      console.warn(e);\n      return null;\n    }\n  },\n  setJSON: (key, value) => {\n    try {\n      return local.set(key, JSON.stringify(value));\n    } catch (e) {\n      console.warn(e);\n      return null;\n    }\n  },\n  del: (key) => {\n    try {\n      return localStorage.removeItem(key);\n    } catch (e) {\n      console.warn(e);\n      return null;\n    }\n  },\n};\n\nconst session = {\n  get: (key) => {\n    try {\n      return sessionStorage.getItem(key);\n    } catch (e) {\n      console.warn(e);\n      return null;\n    }\n  },\n  getJSON: (key) => {\n    try {\n      return JSON.parse(session.get(key));\n    } catch (e) {\n      console.warn(e);\n      return null;\n    }\n  },\n  set: (key, value) => {\n    try {\n      return sessionStorage.setItem(key, value);\n    } catch (e) {\n      console.warn(e);\n      return null;\n    }\n  },\n  setJSON: (key, value) => {\n    try {\n      return session.set(key, JSON.stringify(value));\n    } catch (e) {\n      console.warn(e);\n      return null;\n    }\n  },\n  del: (key) => {\n    try {\n      return sessionStorage.removeItem(key);\n    } catch (e) {\n      console.warn(e);\n      return null;\n    }\n  },\n};\n\n// Store with account namespace (id@domain.tld) <- uses id, not username\nconst account = {\n  get: (key) => {\n    try {\n      return local.getJSON(key)[getCurrentAccountNS()];\n    } catch (e) {\n      console.warn(e);\n      return null;\n    }\n  },\n  set: (key, value) => {\n    try {\n      const data = local.getJSON(key) || {};\n      data[getCurrentAccountNS()] = value;\n      return local.setJSON(key, data);\n    } catch (e) {\n      console.warn(e);\n      return null;\n    }\n  },\n  del: (key) => {\n    try {\n      const data = local.getJSON(key) || {};\n      delete data[getCurrentAccountNS()];\n      return local.setJSON(key, data);\n    } catch (e) {\n      console.warn(e);\n      return null;\n    }\n  },\n};\n\nexport default { local, session, account };\n","import { createRestAPIClient, createStreamingAPIClient } from 'masto';\n\nimport store from './store';\nimport {\n  getAccount,\n  getAccountByAccessToken,\n  getAccountByInstance,\n  getCurrentAccount,\n  saveAccount,\n} from './store-utils';\n\n// Default *fallback* instance\nconst DEFAULT_INSTANCE = 'mastodon.social';\n\n// Per-instance masto instance\n// Useful when only one account is logged in\n// I'm not sure if I'll ever allow multiple logged-in accounts but oh well...\n// E.g. apis['mastodon.social']\nconst apis = {};\n\n// Per-account masto instance\n// Note: There can be many accounts per instance\n// Useful when multiple accounts are logged in or when certain actions require a specific account\n// Just in case if I need this one day.\n// E.g. accountApis['mastodon.social']['ACCESS_TOKEN']\nconst accountApis = {};\nwindow.__ACCOUNT_APIS__ = accountApis;\n\n// Current account masto instance\nlet currentAccountApi;\n\nexport function initClient({ instance, accessToken }) {\n  if (/^https?:\\/\\//.test(instance)) {\n    instance = instance\n      .replace(/^https?:\\/\\//, '')\n      .replace(/\\/+$/, '')\n      .toLowerCase();\n  }\n  const url = instance ? `https://${instance}` : `https://${DEFAULT_INSTANCE}`;\n\n  const masto = createRestAPIClient({\n    url,\n    accessToken, // Can be null\n    timeout: 30_000, // Unfortunatly this is global instead of per-request\n  });\n\n  const client = {\n    masto,\n    instance,\n    accessToken,\n  };\n  apis[instance] = client;\n  if (!accountApis[instance]) accountApis[instance] = {};\n  if (accessToken) accountApis[instance][accessToken] = client;\n\n  return client;\n}\n\n// Get the instance information\n// The config is needed for composing\nexport async function initInstance(client, instance) {\n  console.log('INIT INSTANCE', client, instance);\n  const { masto, accessToken } = client;\n  // Request v2, fallback to v1 if fail\n  let info;\n  try {\n    info = await masto.v2.instance.fetch();\n  } catch (e) {}\n  if (!info) {\n    try {\n      info = await masto.v1.instance.fetch();\n    } catch (e) {}\n  }\n  if (!info) return;\n  console.log(info);\n  const {\n    // v1\n    uri,\n    urls: { streamingApi } = {},\n    // v2\n    domain,\n    configuration: { urls: { streaming } = {} } = {},\n  } = info;\n  const instances = store.local.getJSON('instances') || {};\n  if (uri || domain) {\n    instances[\n      (domain || uri)\n        .replace(/^https?:\\/\\//, '')\n        .replace(/\\/+$/, '')\n        .toLowerCase()\n    ] = info;\n  }\n  if (instance) {\n    instances[instance.toLowerCase()] = info;\n  }\n  store.local.setJSON('instances', instances);\n  // This is a weird place to put this but here's updating the masto instance with the streaming API URL set in the configuration\n  // Reason: Streaming WebSocket URL may change, unlike the standard API REST URLs\n  const supportsWebSocket = 'WebSocket' in window;\n  if (supportsWebSocket && (streamingApi || streaming)) {\n    console.log('üéè Streaming API URL:', streaming || streamingApi);\n    // masto.config.props.streamingApiUrl = streaming || streamingApi;\n    // Legacy masto.ws\n    const streamClient = createStreamingAPIClient({\n      streamingApiUrl: streaming || streamingApi,\n      accessToken,\n      implementation: WebSocket,\n    });\n    client.streaming = streamClient;\n    // masto.ws = streamClient;\n    console.log('üéè Streaming API client:', client);\n  }\n}\n\n// Get the account information and store it\nexport async function initAccount(client, instance, accessToken, vapidKey) {\n  const { masto } = client;\n  const mastoAccount = await masto.v1.accounts.verifyCredentials();\n\n  console.log('CURRENTACCOUNT SET', mastoAccount.id);\n  store.session.set('currentAccount', mastoAccount.id);\n\n  saveAccount({\n    info: mastoAccount,\n    instanceURL: instance.toLowerCase(),\n    accessToken,\n    vapidKey,\n  });\n}\n\n// Get preferences\nexport async function initPreferences(client) {\n  try {\n    const { masto } = client;\n    const preferences = await masto.v1.preferences.fetch();\n    store.account.set('preferences', preferences);\n  } catch (e) {\n    // silently fail\n    console.error(e);\n  }\n}\n\n// Get the masto instance\n// If accountID is provided, get the masto instance for that account\nexport function api({ instance, accessToken, accountID, account } = {}) {\n  // Always lowercase and trim the instance\n  if (instance) {\n    instance = instance.toLowerCase().trim();\n  }\n\n  // If instance and accessToken are provided, get the masto instance for that account\n  if (instance && accessToken) {\n    const client =\n      accountApis[instance]?.[accessToken] ||\n      initClient({ instance, accessToken });\n    const { masto, streaming } = client;\n    return {\n      masto,\n      streaming,\n      client,\n      authenticated: true,\n      instance,\n    };\n  }\n\n  if (accessToken) {\n    // If only accessToken is provided, get the masto instance for that accessToken\n    console.log('X 1', accountApis);\n    for (const instance in accountApis) {\n      if (accountApis[instance][accessToken]) {\n        console.log('X 2', accountApis, instance, accessToken);\n        const client = accountApis[instance][accessToken];\n        const { masto, streaming } = client;\n        return {\n          masto,\n          streaming,\n          client,\n          authenticated: true,\n          instance,\n        };\n      } else {\n        console.log('X 3', accountApis, instance, accessToken);\n        const account = getAccountByAccessToken(accessToken);\n        if (account) {\n          const accessToken = account.accessToken;\n          const instance = account.instanceURL.toLowerCase().trim();\n          const client = initClient({ instance, accessToken });\n          const { masto, streaming } = client;\n          return {\n            masto,\n            streaming,\n            client,\n            authenticated: true,\n            instance,\n          };\n        } else {\n          throw new Error(`Access token not found`);\n        }\n      }\n    }\n  }\n\n  // If account is provided, get the masto instance for that account\n  if (account || accountID) {\n    account = account || getAccount(accountID);\n    if (account) {\n      const accessToken = account.accessToken;\n      const instance = account.instanceURL.toLowerCase().trim();\n      const client =\n        accountApis[instance]?.[accessToken] ||\n        initClient({ instance, accessToken });\n      const { masto, streaming } = client;\n      return {\n        masto,\n        streaming,\n        client,\n        authenticated: true,\n        instance,\n      };\n    } else {\n      throw new Error(`Account ${accountID} not found`);\n    }\n  }\n\n  const currentAccount = getCurrentAccount();\n\n  // If only instance is provided, get the masto instance for that instance\n  if (instance) {\n    if (currentAccountApi?.instance === instance) {\n      return {\n        masto: currentAccountApi.masto,\n        streaming: currentAccountApi.streaming,\n        client: currentAccountApi,\n        authenticated: true,\n        instance,\n      };\n    }\n\n    if (currentAccount?.instanceURL === instance) {\n      const { accessToken } = currentAccount;\n      currentAccountApi =\n        accountApis[instance]?.[accessToken] ||\n        initClient({ instance, accessToken });\n      return {\n        masto: currentAccountApi.masto,\n        streaming: currentAccountApi.streaming,\n        client: currentAccountApi,\n        authenticated: true,\n        instance,\n      };\n    }\n\n    const instanceAccount = getAccountByInstance(instance);\n    if (instanceAccount) {\n      const accessToken = instanceAccount.accessToken;\n      const client =\n        accountApis[instance]?.[accessToken] ||\n        initClient({ instance, accessToken });\n      const { masto, streaming } = client;\n      return {\n        masto,\n        streaming,\n        client,\n        authenticated: true,\n        instance,\n      };\n    }\n\n    const client = apis[instance] || initClient({ instance });\n    const { masto, streaming, accessToken } = client;\n    return {\n      masto,\n      streaming,\n      client,\n      authenticated: !!accessToken,\n      instance,\n    };\n  }\n\n  // If no instance is provided, get the masto instance for the current account\n  if (currentAccountApi) {\n    return {\n      masto: currentAccountApi.masto,\n      streaming: currentAccountApi.streaming,\n      client: currentAccountApi,\n      authenticated: true,\n      instance: currentAccountApi.instance,\n    };\n  }\n  if (currentAccount) {\n    const { accessToken, instanceURL: instance } = currentAccount;\n    currentAccountApi =\n      accountApis[instance]?.[accessToken] ||\n      initClient({ instance, accessToken });\n    return {\n      masto: currentAccountApi.masto,\n      streaming: currentAccountApi.streaming,\n      client: currentAccountApi,\n      authenticated: true,\n      instance,\n    };\n  }\n\n  // If no instance is provided and no account is logged in, get the masto instance for DEFAULT_INSTANCE\n  const client =\n    apis[DEFAULT_INSTANCE] || initClient({ instance: DEFAULT_INSTANCE });\n  const { masto, streaming } = client;\n  return {\n    masto,\n    streaming,\n    client,\n    authenticated: false,\n    instance: DEFAULT_INSTANCE,\n  };\n}\n\nwindow.__API__ = {\n  currentAccountApi,\n  apis,\n  accountApis,\n};\n","export default function isMastodonLinkMaybe(url) {\n  try {\n    const { pathname, hash } = new URL(url);\n    return (\n      /^\\/.*\\/\\d+$/i.test(pathname) ||\n      /^\\/(@[^/]+|users\\/[^/]+)\\/(statuses|posts)\\/\\w+\\/?$/i.test(pathname) || // GoToSocial, Takahe\n      /^\\/notes\\/[a-z0-9]+$/i.test(pathname) || // Misskey, Firefish\n      /^\\/(notice|objects)\\/[a-z0-9-]+$/i.test(pathname) || // Pleroma\n      /#\\/[^\\/]+\\.[^\\/]+\\/s\\/.+/i.test(hash) // Phanpy ü´£\n    );\n  } catch (e) {\n    return false;\n  }\n}\n","import moize from 'moize';\n\nwindow._moize = moize;\n\nexport default function mem(fn, opts = {}) {\n  return moize(fn, { ...opts, maxSize: 50, isDeepEqual: true });\n}\n","import mem from './mem';\n\nexport default function pmem(fn, opts = {}) {\n  return mem(fn, { isPromise: true, ...opts });\n}\n","// Rate limit repeated function calls and queue them to set interval\nexport default function rateLimit(fn, interval) {\n  let queue = [];\n  let isRunning = false;\n\n  function executeNext() {\n    if (queue.length === 0) {\n      isRunning = false;\n      return;\n    }\n\n    const nextFn = queue.shift();\n    nextFn();\n    setTimeout(executeNext, interval);\n  }\n\n  return function (...args) {\n    const callFn = () => fn.apply(this, args);\n    queue.push(callFn);\n\n    if (!isRunning) {\n      isRunning = true;\n      setTimeout(executeNext, interval);\n    }\n  };\n}\n","import pThrottle from 'p-throttle';\nimport { snapshot } from 'valtio/vanilla';\n\nimport { api } from './api';\nimport states, { saveStatus } from './states';\n\nexport const throttle = pThrottle({\n  limit: 1,\n  interval: 1000,\n});\n\nconst denylistDomains = /(twitter|github)\\.com/i;\nconst failedUnfurls = {};\nfunction _unfurlMastodonLink(instance, url) {\n  const snapStates = snapshot(states);\n  if (denylistDomains.test(url)) {\n    return;\n  }\n  if (failedUnfurls[url]) {\n    return;\n  }\n  const instanceRegex = new RegExp(instance + '/');\n  if (instanceRegex.test(snapStates.unfurledLinks[url]?.url)) {\n    return Promise.resolve(snapStates.unfurledLinks[url]);\n  }\n  console.debug('ü¶¶ Unfurling URL', url);\n\n  let remoteInstanceFetch;\n  let theURL = url;\n\n  // https://elk.zone/domain.com/@stest/123 -> https://domain.com/@stest/123\n  if (/\\/\\/elk\\.[^\\/]+\\/[^\\/]+\\.[^\\/]+/i.test(theURL)) {\n    theURL = theURL.replace(/elk\\.[^\\/]+\\//i, '');\n  }\n\n  // https://trunks.social/status/domain.com/@stest/123 -> https://domain.com/@stest/123\n  if (/\\/\\/trunks\\.[^\\/]+\\/status\\/[^\\/]+\\.[^\\/]+/i.test(theURL)) {\n    theURL = theURL.replace(/trunks\\.[^\\/]+\\/status\\//i, '');\n  }\n\n  // https://phanpy.social/#/domain.com/s/123 -> https://domain.com/statuses/123\n  if (/\\/#\\/[^\\/]+\\.[^\\/]+\\/s\\/.+/i.test(theURL)) {\n    const urlAfterHash = theURL.split('/#/')[1];\n    const finalURL = urlAfterHash.replace(/\\/s\\//i, '/@fakeUsername/');\n    theURL = `https://${finalURL}`;\n  }\n\n  let urlObj;\n  try {\n    urlObj = new URL(theURL);\n  } catch (e) {\n    return;\n  }\n  const domain = urlObj.hostname;\n  const path = urlObj.pathname;\n  // Regex /:username/:id, where username = @username or @username@domain, id = number\n  const statusRegex = /\\/@([^@\\/]+)@?([^\\/]+)?\\/(\\d+)$/i;\n  const statusMatch = statusRegex.exec(path);\n  if (statusMatch) {\n    const id = statusMatch[3];\n    const { masto } = api({ instance: domain });\n    remoteInstanceFetch = masto.v1.statuses\n      .$select(id)\n      .fetch()\n      .then((status) => {\n        if (status?.id) {\n          return {\n            status,\n            instance: domain,\n          };\n        } else {\n          throw new Error('No results');\n        }\n      });\n  }\n\n  const { masto } = api({ instance });\n  const mastoSearchFetch = masto.v2.search\n    .fetch({\n      q: theURL,\n      type: 'statuses',\n      resolve: true,\n      limit: 1,\n    })\n    .then((results) => {\n      if (results.statuses.length > 0) {\n        const status = results.statuses[0];\n        return {\n          status,\n          instance,\n        };\n      } else {\n        throw new Error('No results');\n      }\n    });\n\n  function handleFulfill(result) {\n    const { status, instance } = result;\n    const { id } = status;\n    const selfURL = `/${instance}/s/${id}`;\n    console.debug('ü¶¶ Unfurled URL', url, id, selfURL);\n    const data = {\n      id,\n      instance,\n      url: selfURL,\n    };\n    states.unfurledLinks[url] = data;\n    saveStatus(status, instance, {\n      skipThreading: true,\n    });\n    return data;\n  }\n  function handleCatch(e) {\n    failedUnfurls[url] = true;\n  }\n\n  if (remoteInstanceFetch) {\n    // return Promise.any([remoteInstanceFetch, mastoSearchFetch])\n    //   .then(handleFulfill)\n    //   .catch(handleCatch);\n    // If mastoSearchFetch is fulfilled within 3s, return it, else return remoteInstanceFetch\n    const finalPromise = Promise.race([\n      mastoSearchFetch,\n      new Promise((resolve, reject) => setTimeout(reject, 3000)),\n    ]).catch(() => {\n      // If remoteInstanceFetch is fullfilled, return it, else return mastoSearchFetch\n      return remoteInstanceFetch.catch(() => mastoSearchFetch);\n    });\n    return finalPromise.then(handleFulfill).catch(handleCatch);\n  } else {\n    return mastoSearchFetch.then(handleFulfill).catch(handleCatch);\n  }\n}\n\nconst unfurlMastodonLink = throttle(_unfurlMastodonLink);\nexport default unfurlMastodonLink;\n","import { deepEqual } from 'fast-equals';\nimport { proxy, subscribe } from 'valtio';\nimport { subscribeKey } from 'valtio/utils';\n\nimport { api } from './api';\nimport isMastodonLinkMaybe from './isMastodonLinkMaybe';\nimport pmem from './pmem';\nimport rateLimit from './ratelimit';\nimport store from './store';\nimport unfurlMastodonLink from './unfurl-link';\n\nconst states = proxy({\n  appVersion: {},\n  // history: [],\n  prevLocation: null,\n  currentLocation: null,\n  statuses: {},\n  statusThreadNumber: {},\n  home: [],\n  // specialHome: [],\n  homeNew: [],\n  homeLast: null, // Last item in 'home' list\n  homeLastFetchTime: null,\n  notifications: [],\n  notificationsLast: null, // Last read notification\n  notificationsNew: [],\n  notificationsShowNew: false,\n  notificationsLastFetchTime: null,\n  reloadStatusPage: 0,\n  reloadGenericAccounts: {\n    id: null,\n    counter: 0,\n  },\n  spoilers: {},\n  spoilersMedia: {},\n  scrollPositions: {},\n  unfurledLinks: {},\n  statusQuotes: {},\n  statusFollowedTags: {},\n  statusReply: {},\n  accounts: {},\n  routeNotification: null,\n  // Modals\n  showCompose: false,\n  showSettings: false,\n  showAccount: false,\n  showAccounts: false,\n  showDrafts: false,\n  showMediaModal: false,\n  showShortcutsSettings: false,\n  showKeyboardShortcutsHelp: false,\n  showGenericAccounts: false,\n  showMediaAlt: false,\n  showEmbedModal: false,\n  showReportModal: false,\n  // Shortcuts\n  shortcuts: [],\n  // Settings\n  settings: {\n    autoRefresh: false,\n    shortcutsViewMode: null,\n    shortcutsColumnsMode: false,\n    boostsCarousel: true,\n    contentTranslation: true,\n    contentTranslationTargetLanguage: null,\n    contentTranslationHideLanguages: [],\n    contentTranslationAutoInline: false,\n    shortcutSettingsCloudImportExport: false,\n    mediaAltGenerator: false,\n    cloakMode: false,\n  },\n});\n\nexport default states;\n\nexport function initStates() {\n  // init all account based states\n  // all keys that uses store.account.get() should be initialized here\n  states.notificationsLast = store.account.get('notificationsLast') || null;\n  states.shortcuts = store.account.get('shortcuts') ?? [];\n  states.settings.autoRefresh =\n    store.account.get('settings-autoRefresh') ?? false;\n  states.settings.shortcutsViewMode =\n    store.account.get('settings-shortcutsViewMode') ?? null;\n  if (store.account.get('settings-shortcutsColumnsMode')) {\n    states.settings.shortcutsColumnsMode = true;\n  }\n  states.settings.boostsCarousel =\n    store.account.get('settings-boostsCarousel') ?? true;\n  states.settings.contentTranslation =\n    store.account.get('settings-contentTranslation') ?? true;\n  states.settings.contentTranslationTargetLanguage =\n    store.account.get('settings-contentTranslationTargetLanguage') || null;\n  states.settings.contentTranslationHideLanguages =\n    store.account.get('settings-contentTranslationHideLanguages') || [];\n  states.settings.contentTranslationAutoInline =\n    store.account.get('settings-contentTranslationAutoInline') ?? false;\n  states.settings.shortcutSettingsCloudImportExport =\n    store.account.get('settings-shortcutSettingsCloudImportExport') ?? false;\n  states.settings.mediaAltGenerator =\n    store.account.get('settings-mediaAltGenerator') ?? false;\n  states.settings.cloakMode = store.account.get('settings-cloakMode') ?? false;\n}\n\nsubscribeKey(states, 'notificationsLast', (v) => {\n  console.log('CHANGE', v);\n  store.account.set('notificationsLast', states.notificationsLast);\n});\nsubscribe(states, (changes) => {\n  console.debug('STATES change', changes);\n  for (const [action, path, value, prevValue] of changes) {\n    if (path.join('.') === 'settings.autoRefresh') {\n      store.account.set('settings-autoRefresh', !!value);\n    }\n    if (path.join('.') === 'settings.boostsCarousel') {\n      store.account.set('settings-boostsCarousel', !!value);\n    }\n    if (path.join('.') === 'settings.shortcutsViewMode') {\n      store.account.set('settings-shortcutsViewMode', value);\n    }\n    if (path.join('.') === 'settings.contentTranslation') {\n      store.account.set('settings-contentTranslation', !!value);\n    }\n    if (path.join('.') === 'settings.contentTranslationAutoInline') {\n      store.account.set('settings-contentTranslationAutoInline', !!value);\n    }\n    if (path.join('.') === 'settings.shortcutSettingsCloudImportExport') {\n      store.account.set('settings-shortcutSettingsCloudImportExport', !!value);\n    }\n    if (path.join('.') === 'settings.contentTranslationTargetLanguage') {\n      console.log('SET', value);\n      store.account.set('settings-contentTranslationTargetLanguage', value);\n    }\n    if (/^settings\\.contentTranslationHideLanguages/i.test(path.join('.'))) {\n      store.account.set(\n        'settings-contentTranslationHideLanguages',\n        states.settings.contentTranslationHideLanguages,\n      );\n    }\n    if (path.join('.') === 'settings.mediaAltGenerator') {\n      store.account.set('settings-mediaAltGenerator', !!value);\n    }\n    if (path?.[0] === 'shortcuts') {\n      store.account.set('shortcuts', states.shortcuts);\n    }\n    if (path.join('.') === 'settings.cloakMode') {\n      store.account.set('settings-cloakMode', !!value);\n    }\n  }\n});\n\nexport function hideAllModals() {\n  states.showCompose = false;\n  states.showSettings = false;\n  states.showAccount = false;\n  states.showAccounts = false;\n  states.showDrafts = false;\n  states.showMediaModal = false;\n  states.showShortcutsSettings = false;\n  states.showKeyboardShortcutsHelp = false;\n  states.showGenericAccounts = false;\n  states.showMediaAlt = false;\n  states.showEmbedModal = false;\n}\n\nexport function statusKey(id, instance) {\n  if (!id) return;\n  return instance ? `${instance}/${id}` : id;\n}\n\nexport function getStatus(statusID, instance) {\n  if (instance) {\n    const key = statusKey(statusID, instance);\n    return states.statuses[key];\n  }\n  return states.statuses[statusID];\n}\n\nexport function saveStatus(status, instance, opts) {\n  if (typeof instance === 'object') {\n    opts = instance;\n    instance = null;\n  }\n  const {\n    override = true,\n    skipThreading = false,\n    skipUnfurling = false,\n  } = opts || {};\n  if (!status) return;\n  const oldStatus = getStatus(status.id, instance);\n  if (!override && oldStatus) return;\n  if (deepEqual(status, oldStatus)) return;\n  queueMicrotask(() => {\n    const key = statusKey(status.id, instance);\n    if (oldStatus?._pinned) status._pinned = oldStatus._pinned;\n    // if (oldStatus?._filtered) status._filtered = oldStatus._filtered;\n    states.statuses[key] = status;\n    if (status.reblog?.id) {\n      const srKey = statusKey(status.reblog.id, instance);\n      states.statuses[srKey] = status.reblog;\n    }\n    if (status.quote?.id) {\n      const sKey = statusKey(status.quote.id, instance);\n      states.statuses[sKey] = status.quote;\n      states.statusQuotes[key] = [\n        {\n          id: status.quote.id,\n          instance,\n        },\n      ];\n    }\n  });\n\n  // THREAD TRAVERSER\n  if (!skipThreading) {\n    queueMicrotask(() => {\n      threadifyStatus(status.reblog || status, instance);\n    });\n  }\n\n  // UNFURLER\n  if (!skipUnfurling) {\n    queueMicrotask(() => {\n      unfurlStatus(status.reblog || status, instance);\n    });\n  }\n}\n\nfunction _threadifyStatus(status, propInstance) {\n  const { masto, instance } = api({ instance: propInstance });\n  // Return all statuses in the thread, via inReplyToId, if inReplyToAccountId === account.id\n  let fetchIndex = 0;\n  async function traverse(status, index = 0) {\n    const { inReplyToId, inReplyToAccountId } = status;\n    if (!inReplyToId || inReplyToAccountId !== status.account.id) {\n      return [status];\n    }\n    if (inReplyToId && inReplyToAccountId !== status.account.id) {\n      throw 'Not a thread';\n      // Possibly thread of replies by multiple people?\n    }\n    const key = statusKey(inReplyToId, instance);\n    let prevStatus = states.statuses[key];\n    if (!prevStatus) {\n      if (fetchIndex++ > 3) throw 'Too many fetches for thread'; // Some people revive old threads\n      await new Promise((r) => setTimeout(r, 500 * fetchIndex)); // Be nice to rate limits\n      // prevStatus = await masto.v1.statuses.$.select(inReplyToId).fetch();\n      prevStatus = await fetchStatus(inReplyToId, masto);\n      saveStatus(prevStatus, instance, { skipThreading: true });\n    }\n    // Prepend so that first status in thread will be index 0\n    return [...(await traverse(prevStatus, ++index)), status];\n  }\n  return traverse(status)\n    .then((statuses) => {\n      if (statuses.length > 1) {\n        console.debug('THREAD', statuses);\n        statuses.forEach((status, index) => {\n          const key = statusKey(status.id, instance);\n          states.statusThreadNumber[key] = index + 1;\n        });\n      }\n    })\n    .catch((e) => {\n      console.error(e, status);\n    });\n}\nexport const threadifyStatus = rateLimit(_threadifyStatus, 100);\n\nconst fauxDiv = document.createElement('div');\nexport function unfurlStatus(status, instance) {\n  const { instance: currentInstance } = api();\n  const content = status?.content;\n  const hasLink = /<a/i.test(content);\n  if (hasLink) {\n    const sKey = statusKey(status?.id, instance);\n    fauxDiv.innerHTML = content;\n    const links = fauxDiv.querySelectorAll(\n      'a[href]:not(.u-url):not(.mention):not(.hashtag)',\n    );\n    [...links]\n      .filter((a) => {\n        const url = a.href;\n        const isPostItself = url === status.url || url === status.uri;\n        return !isPostItself && isMastodonLinkMaybe(url);\n      })\n      .forEach((a, i) => {\n        unfurlMastodonLink(currentInstance, a.href).then((result) => {\n          if (!result) return;\n          if (!sKey) return;\n          if (!Array.isArray(states.statusQuotes[sKey])) {\n            states.statusQuotes[sKey] = [];\n          }\n          if (!states.statusQuotes[sKey][i]) {\n            states.statusQuotes[sKey].splice(i, 0, result);\n          }\n        });\n      });\n  }\n}\n\nconst fetchStatus = pmem((statusID, masto) => {\n  return masto.v1.statuses.$select(statusID).fetch();\n});\n","import './loader.css';\n\nfunction Loader({ abrupt, hidden, ...props }) {\n  return (\n    <span\n      {...props}\n      class={`loader-container ${abrupt ? 'abrupt' : ''} ${\n        hidden ? 'hidden' : ''\n      }`}\n    >\n      <span class=\"loader\" />\n    </span>\n  );\n}\n\nexport default Loader;\n","import { useLayoutEffect } from 'preact/hooks';\nimport { matchPath } from 'react-router-dom';\nimport { subscribeKey } from 'valtio/utils';\n\nimport states from './states';\n\nconst { PHANPY_CLIENT_NAME: CLIENT_NAME } = import.meta.env;\n\nexport default function useTitle(title, path) {\n  function setTitle() {\n    const { currentLocation } = states;\n    const hasPaths = Array.isArray(path);\n    let paths = hasPaths ? path : [];\n    // Workaround for matchPath not working for optional path segments\n    // https://github.com/remix-run/react-router/discussions/9862\n    if (!hasPaths && /:?\\w+\\?/.test(path)) {\n      paths.push(path.replace(/(:\\w+)\\?/g, '$1'));\n      paths.push(path.replace(/\\/?:\\w+\\?/g, ''));\n    }\n    let matched = false;\n    if (paths.length) {\n      matched = paths.some((p) => matchPath(p, currentLocation));\n    } else if (path) {\n      matched = matchPath(path, currentLocation);\n    }\n    console.debug('setTitle', { title, path, currentLocation, paths, matched });\n    if (matched) {\n      document.title = title ? `${title} / ${CLIENT_NAME}` : CLIENT_NAME;\n    }\n  }\n\n  useLayoutEffect(() => {\n    const unsub = subscribeKey(states, 'currentLocation', setTitle);\n    setTitle();\n    return unsub;\n  }, [title, path]);\n}\n"],"names":["getAccount","id","accounts","store","local","getJSON","find","a","info","getAccountByAccessToken","accessToken","getAccountByInstance","instance","instanceURL","getCurrentAccount","window","__IGNORE_GET_ACCOUNT_ERROR__","currentAccount","account","getCurrentAccountNS","saveAccount","acc","updateAccount","accountInfo","displayName","currentInstance","getCurrentInstance","instances","e","location","getInstanceConfiguration","configuration","maxMediaAttachments","maxTootChars","pleroma","pollLimits","statuses","polls","maxCharactersPerOption","maxExpiration","getCurrentInstanceConfiguration","get","key","localStorage","getItem","console","JSON","value","set","setJSON","warn","session","sessionStorage","setItem","data","del","DEFAULT_INSTANCE","apis","accountApis","__ACCOUNT_APIS__","currentAccountApi","initClient","test","replace","toLowerCase","url","client","masto","createRestAPIClient","timeout","initInstance","uri","streamingApi","urls","domain","streaming","streamClient","createStreamingAPIClient","implementation","initAccount","vapidKey","mastoAccount","initPreferences","preferences","accountID","authenticated","_b","_c","instanceAccount","_e","isMastodonLinkMaybe","pathname","hash","URL","_moize","moize","mem","fn","opts","maxSize","isDeepEqual","pmem","isPromise","rateLimit","interval","queue","isRunning","executeNext","length","shift","setTimeout","args","callFn","apply","push","throttle","pThrottle","limit","denylistDomains","failedUnfurls","_unfurlMastodonLink","snapStates","snapshot","states","RegExp","unfurledLinks","Promise","resolve","debug","remoteInstanceFetch","theURL","urlAfterHash","urlObj","hostname","statusRegex","path","statusMatch","masto2","status","mastoSearchFetch","q","type","results","then","handleFulfill","result","selfURL","instance2","saveStatus","reject","handleCatch","finalPromise","unfurlMastodonLink","proxy","appVersion","prevLocation","currentLocation","statusThreadNumber","home","homeNew","homeLast","homeLastFetchTime","notifications","notificationsLast","notificationsNew","notificationsShowNew","notificationsLastFetchTime","reloadStatusPage","reloadGenericAccounts","counter","spoilers","spoilersMedia","scrollPositions","statusQuotes","statusFollowedTags","statusReply","routeNotification","showCompose","showSettings","showAccount","showAccounts","showDrafts","showMediaModal","showShortcutsSettings","showKeyboardShortcutsHelp","showGenericAccounts","showMediaAlt","showEmbedModal","showReportModal","shortcuts","settings","autoRefresh","shortcutsViewMode","shortcutsColumnsMode","boostsCarousel","contentTranslation","contentTranslationTargetLanguage","contentTranslationHideLanguages","contentTranslationAutoInline","shortcutSettingsCloudImportExport","mediaAltGenerator","cloakMode","states$1","initStates","subscribeKey","v","subscribe","changes","prevValue","statusKey","getStatus","statusID","skipThreading","skipUnfurling","override","oldStatus","deepEqual","_pinned","srKey","sKey","threadifyStatus","unfurlStatus","_threadifyStatus","propInstance","api","traverse","index","fetchIndex","inReplyToAccountId","inReplyToId","prevStatus","r","fetchStatus","fauxDiv","content","document","i","splice","Loader","abrupt","hidden","props","_jsx","class","children","define_import_meta_env_default","useLayoutEffect"],"mappings":"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"}